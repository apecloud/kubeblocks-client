/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodTargetConnectionCredential;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodTargetPodSelector;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodTargetResources;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1alpha1BackupStatusTargetsInner
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:00:30.430950Z[Etc/UTC]")
public class V1alpha1BackupStatusTargetsInner {
  public static final String SERIALIZED_NAME_CONNECTION_CREDENTIAL = "connectionCredential";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CREDENTIAL)
  private V1alpha1BackupStatusBackupMethodTargetConnectionCredential connectionCredential;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POD_SELECTOR = "podSelector";
  @SerializedName(SERIALIZED_NAME_POD_SELECTOR)
  private V1alpha1BackupStatusBackupMethodTargetPodSelector podSelector;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private V1alpha1BackupStatusBackupMethodTargetResources resources;

  public static final String SERIALIZED_NAME_SELECTED_TARGET_PODS = "selectedTargetPods";
  @SerializedName(SERIALIZED_NAME_SELECTED_TARGET_PODS)
  private List<String> selectedTargetPods;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_NAME = "serviceAccountName";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_NAME)
  private String serviceAccountName;

  public V1alpha1BackupStatusTargetsInner() {
  }

  public V1alpha1BackupStatusTargetsInner connectionCredential(V1alpha1BackupStatusBackupMethodTargetConnectionCredential connectionCredential) {
    
    this.connectionCredential = connectionCredential;
    return this;
  }

   /**
   * Get connectionCredential
   * @return connectionCredential
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusBackupMethodTargetConnectionCredential getConnectionCredential() {
    return connectionCredential;
  }


  public void setConnectionCredential(V1alpha1BackupStatusBackupMethodTargetConnectionCredential connectionCredential) {
    this.connectionCredential = connectionCredential;
  }


  public V1alpha1BackupStatusTargetsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specifies a mandatory and unique identifier for each target when using the \&quot;targets\&quot; field. The backup data for the current target is stored in a uniquely named subdirectory.
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1BackupStatusTargetsInner podSelector(V1alpha1BackupStatusBackupMethodTargetPodSelector podSelector) {
    
    this.podSelector = podSelector;
    return this;
  }

   /**
   * Get podSelector
   * @return podSelector
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusBackupMethodTargetPodSelector getPodSelector() {
    return podSelector;
  }


  public void setPodSelector(V1alpha1BackupStatusBackupMethodTargetPodSelector podSelector) {
    this.podSelector = podSelector;
  }


  public V1alpha1BackupStatusTargetsInner resources(V1alpha1BackupStatusBackupMethodTargetResources resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusBackupMethodTargetResources getResources() {
    return resources;
  }


  public void setResources(V1alpha1BackupStatusBackupMethodTargetResources resources) {
    this.resources = resources;
  }


  public V1alpha1BackupStatusTargetsInner selectedTargetPods(List<String> selectedTargetPods) {
    
    this.selectedTargetPods = selectedTargetPods;
    return this;
  }

  public V1alpha1BackupStatusTargetsInner addSelectedTargetPodsItem(String selectedTargetPodsItem) {
    if (this.selectedTargetPods == null) {
      this.selectedTargetPods = new ArrayList<>();
    }
    this.selectedTargetPods.add(selectedTargetPodsItem);
    return this;
  }

   /**
   * Records the selected pods by the target info during backup.
   * @return selectedTargetPods
  **/
  @jakarta.annotation.Nullable
  public List<String> getSelectedTargetPods() {
    return selectedTargetPods;
  }


  public void setSelectedTargetPods(List<String> selectedTargetPods) {
    this.selectedTargetPods = selectedTargetPods;
  }


  public V1alpha1BackupStatusTargetsInner serviceAccountName(String serviceAccountName) {
    
    this.serviceAccountName = serviceAccountName;
    return this;
  }

   /**
   * Specifies the service account to run the backup workload.
   * @return serviceAccountName
  **/
  @jakarta.annotation.Nullable
  public String getServiceAccountName() {
    return serviceAccountName;
  }


  public void setServiceAccountName(String serviceAccountName) {
    this.serviceAccountName = serviceAccountName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1BackupStatusTargetsInner v1alpha1BackupStatusTargetsInner = (V1alpha1BackupStatusTargetsInner) o;
    return Objects.equals(this.connectionCredential, v1alpha1BackupStatusTargetsInner.connectionCredential) &&
        Objects.equals(this.name, v1alpha1BackupStatusTargetsInner.name) &&
        Objects.equals(this.podSelector, v1alpha1BackupStatusTargetsInner.podSelector) &&
        Objects.equals(this.resources, v1alpha1BackupStatusTargetsInner.resources) &&
        Objects.equals(this.selectedTargetPods, v1alpha1BackupStatusTargetsInner.selectedTargetPods) &&
        Objects.equals(this.serviceAccountName, v1alpha1BackupStatusTargetsInner.serviceAccountName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionCredential, name, podSelector, resources, selectedTargetPods, serviceAccountName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1BackupStatusTargetsInner {\n");
    sb.append("    connectionCredential: ").append(toIndentedString(connectionCredential)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    podSelector: ").append(toIndentedString(podSelector)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    selectedTargetPods: ").append(toIndentedString(selectedTargetPods)).append("\n");
    sb.append("    serviceAccountName: ").append(toIndentedString(serviceAccountName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionCredential");
    openapiFields.add("name");
    openapiFields.add("podSelector");
    openapiFields.add("resources");
    openapiFields.add("selectedTargetPods");
    openapiFields.add("serviceAccountName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1BackupStatusTargetsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1BackupStatusTargetsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1BackupStatusTargetsInner is not found in the empty JSON string", V1alpha1BackupStatusTargetsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1BackupStatusTargetsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1BackupStatusTargetsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `connectionCredential`
      if (jsonObj.get("connectionCredential") != null && !jsonObj.get("connectionCredential").isJsonNull()) {
        V1alpha1BackupStatusBackupMethodTargetConnectionCredential.validateJsonObject(jsonObj.getAsJsonObject("connectionCredential"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `podSelector`
      if (jsonObj.get("podSelector") != null && !jsonObj.get("podSelector").isJsonNull()) {
        V1alpha1BackupStatusBackupMethodTargetPodSelector.validateJsonObject(jsonObj.getAsJsonObject("podSelector"));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        V1alpha1BackupStatusBackupMethodTargetResources.validateJsonObject(jsonObj.getAsJsonObject("resources"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selectedTargetPods") != null && !jsonObj.get("selectedTargetPods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedTargetPods` to be an array in the JSON string but got `%s`", jsonObj.get("selectedTargetPods").toString()));
      }
      if ((jsonObj.get("serviceAccountName") != null && !jsonObj.get("serviceAccountName").isJsonNull()) && !jsonObj.get("serviceAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1BackupStatusTargetsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1BackupStatusTargetsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1BackupStatusTargetsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1BackupStatusTargetsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1BackupStatusTargetsInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1BackupStatusTargetsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1BackupStatusTargetsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1BackupStatusTargetsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1BackupStatusTargetsInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1BackupStatusTargetsInner
  */
  public static V1alpha1BackupStatusTargetsInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1BackupStatusTargetsInner.class);
  }

 /**
  * Convert an instance of V1alpha1BackupStatusTargetsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

