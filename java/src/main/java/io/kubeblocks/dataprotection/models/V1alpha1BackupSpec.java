/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * BackupSpec defines the desired state of Backup.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:00:30.430950Z[Etc/UTC]")
public class V1alpha1BackupSpec {
  public static final String SERIALIZED_NAME_BACKUP_METHOD = "backupMethod";
  @SerializedName(SERIALIZED_NAME_BACKUP_METHOD)
  private String backupMethod;

  public static final String SERIALIZED_NAME_BACKUP_POLICY_NAME = "backupPolicyName";
  @SerializedName(SERIALIZED_NAME_BACKUP_POLICY_NAME)
  private String backupPolicyName;

  public static final String SERIALIZED_NAME_DELETION_POLICY = "deletionPolicy";
  @SerializedName(SERIALIZED_NAME_DELETION_POLICY)
  private String deletionPolicy;

  public static final String SERIALIZED_NAME_PARENT_BACKUP_NAME = "parentBackupName";
  @SerializedName(SERIALIZED_NAME_PARENT_BACKUP_NAME)
  private String parentBackupName;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "retentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private String retentionPeriod;

  public V1alpha1BackupSpec() {
  }

  public V1alpha1BackupSpec backupMethod(String backupMethod) {
    
    this.backupMethod = backupMethod;
    return this;
  }

   /**
   * Specifies the backup method name that is defined in the backup policy.
   * @return backupMethod
  **/
  @jakarta.annotation.Nonnull
  public String getBackupMethod() {
    return backupMethod;
  }


  public void setBackupMethod(String backupMethod) {
    this.backupMethod = backupMethod;
  }


  public V1alpha1BackupSpec backupPolicyName(String backupPolicyName) {
    
    this.backupPolicyName = backupPolicyName;
    return this;
  }

   /**
   * Specifies the backup policy to be applied for this backup.
   * @return backupPolicyName
  **/
  @jakarta.annotation.Nonnull
  public String getBackupPolicyName() {
    return backupPolicyName;
  }


  public void setBackupPolicyName(String backupPolicyName) {
    this.backupPolicyName = backupPolicyName;
  }


  public V1alpha1BackupSpec deletionPolicy(String deletionPolicy) {
    
    this.deletionPolicy = deletionPolicy;
    return this;
  }

   /**
   * Determines whether the backup contents stored in the backup repository should be deleted when the backup custom resource(CR) is deleted. Supported values are &#x60;Retain&#x60; and &#x60;Delete&#x60;.   - &#x60;Retain&#x60; means that the backup content and its physical snapshot on backup repository are kept. - &#x60;Delete&#x60; means that the backup content and its physical snapshot on backup repository are deleted.   TODO: for the retain policy, we should support in the future for only deleting   the backup CR but retaining the backup contents in backup repository.   The current implementation only prevent accidental deletion of backup data.
   * @return deletionPolicy
  **/
  @jakarta.annotation.Nullable
  public String getDeletionPolicy() {
    return deletionPolicy;
  }


  public void setDeletionPolicy(String deletionPolicy) {
    this.deletionPolicy = deletionPolicy;
  }


  public V1alpha1BackupSpec parentBackupName(String parentBackupName) {
    
    this.parentBackupName = parentBackupName;
    return this;
  }

   /**
   * Determines the parent backup name for incremental or differential backup.
   * @return parentBackupName
  **/
  @jakarta.annotation.Nullable
  public String getParentBackupName() {
    return parentBackupName;
  }


  public void setParentBackupName(String parentBackupName) {
    this.parentBackupName = parentBackupName;
  }


  public V1alpha1BackupSpec retentionPeriod(String retentionPeriod) {
    
    this.retentionPeriod = retentionPeriod;
    return this;
  }

   /**
   * Determines a duration up to which the backup should be kept. Controller will remove all backups that are older than the RetentionPeriod. If not set, the backup will be kept forever. For example, RetentionPeriod of &#x60;30d&#x60; will keep only the backups of last 30 days. Sample duration format:   - years:  2y - months:  6mo - days:   30d - hours:  12h - minutes:  30m   You can also combine the above durations. For example: 30d12h30m.
   * @return retentionPeriod
  **/
  @jakarta.annotation.Nullable
  public String getRetentionPeriod() {
    return retentionPeriod;
  }


  public void setRetentionPeriod(String retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1BackupSpec v1alpha1BackupSpec = (V1alpha1BackupSpec) o;
    return Objects.equals(this.backupMethod, v1alpha1BackupSpec.backupMethod) &&
        Objects.equals(this.backupPolicyName, v1alpha1BackupSpec.backupPolicyName) &&
        Objects.equals(this.deletionPolicy, v1alpha1BackupSpec.deletionPolicy) &&
        Objects.equals(this.parentBackupName, v1alpha1BackupSpec.parentBackupName) &&
        Objects.equals(this.retentionPeriod, v1alpha1BackupSpec.retentionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupMethod, backupPolicyName, deletionPolicy, parentBackupName, retentionPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1BackupSpec {\n");
    sb.append("    backupMethod: ").append(toIndentedString(backupMethod)).append("\n");
    sb.append("    backupPolicyName: ").append(toIndentedString(backupPolicyName)).append("\n");
    sb.append("    deletionPolicy: ").append(toIndentedString(deletionPolicy)).append("\n");
    sb.append("    parentBackupName: ").append(toIndentedString(parentBackupName)).append("\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupMethod");
    openapiFields.add("backupPolicyName");
    openapiFields.add("deletionPolicy");
    openapiFields.add("parentBackupName");
    openapiFields.add("retentionPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backupMethod");
    openapiRequiredFields.add("backupPolicyName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1BackupSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1BackupSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1BackupSpec is not found in the empty JSON string", V1alpha1BackupSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1BackupSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1BackupSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1BackupSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("backupMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupMethod").toString()));
      }
      if (!jsonObj.get("backupPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupPolicyName").toString()));
      }
      if ((jsonObj.get("deletionPolicy") != null && !jsonObj.get("deletionPolicy").isJsonNull()) && !jsonObj.get("deletionPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletionPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletionPolicy").toString()));
      }
      if ((jsonObj.get("parentBackupName") != null && !jsonObj.get("parentBackupName").isJsonNull()) && !jsonObj.get("parentBackupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentBackupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentBackupName").toString()));
      }
      if ((jsonObj.get("retentionPeriod") != null && !jsonObj.get("retentionPeriod").isJsonNull()) && !jsonObj.get("retentionPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionPeriod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1BackupSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1BackupSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1BackupSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1BackupSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1BackupSpec>() {
           @Override
           public void write(JsonWriter out, V1alpha1BackupSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1BackupSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1BackupSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1BackupSpec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1BackupSpec
  */
  public static V1alpha1BackupSpec fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1BackupSpec.class);
  }

 /**
  * Convert an instance of V1alpha1BackupSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

