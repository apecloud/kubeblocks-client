/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.dataprotection.models.V1alpha1BackupRepoSpecCredential;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * BackupRepoSpec defines the desired state of &#x60;BackupRepo&#x60;.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:01:33.782064Z[Etc/UTC]")
public class V1alpha1BackupRepoSpec {
  /**
   * Specifies the access method of the backup repository.
   */
  @JsonAdapter(AccessMethodEnum.Adapter.class)
  public enum AccessMethodEnum {
    MOUNT("Mount"),
    
    TOOL("Tool");

    private String value;

    AccessMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessMethodEnum fromValue(String value) {
      for (AccessMethodEnum b : AccessMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_METHOD = "accessMethod";
  @SerializedName(SERIALIZED_NAME_ACCESS_METHOD)
  private AccessMethodEnum accessMethod;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Map<String, String> config = new HashMap<>();

  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  private V1alpha1BackupRepoSpecCredential credential;

  public static final String SERIALIZED_NAME_PATH_PREFIX = "pathPrefix";
  @SerializedName(SERIALIZED_NAME_PATH_PREFIX)
  private String pathPrefix;

  /**
   * Specifies reclaim policy of the PV created by this backup repository.
   */
  @JsonAdapter(PvReclaimPolicyEnum.Adapter.class)
  public enum PvReclaimPolicyEnum {
    DELETE("Delete"),
    
    RETAIN("Retain");

    private String value;

    PvReclaimPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PvReclaimPolicyEnum fromValue(String value) {
      for (PvReclaimPolicyEnum b : PvReclaimPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PvReclaimPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PvReclaimPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PvReclaimPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PvReclaimPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PV_RECLAIM_POLICY = "pvReclaimPolicy";
  @SerializedName(SERIALIZED_NAME_PV_RECLAIM_POLICY)
  private PvReclaimPolicyEnum pvReclaimPolicy;

  public static final String SERIALIZED_NAME_STORAGE_PROVIDER_REF = "storageProviderRef";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROVIDER_REF)
  private String storageProviderRef;

  public static final String SERIALIZED_NAME_VOLUME_CAPACITY = "volumeCapacity";
  @SerializedName(SERIALIZED_NAME_VOLUME_CAPACITY)
  private Object volumeCapacity;

  public V1alpha1BackupRepoSpec() {
  }

  public V1alpha1BackupRepoSpec accessMethod(AccessMethodEnum accessMethod) {
    
    this.accessMethod = accessMethod;
    return this;
  }

   /**
   * Specifies the access method of the backup repository.
   * @return accessMethod
  **/
  @jakarta.annotation.Nullable
  public AccessMethodEnum getAccessMethod() {
    return accessMethod;
  }


  public void setAccessMethod(AccessMethodEnum accessMethod) {
    this.accessMethod = accessMethod;
  }


  public V1alpha1BackupRepoSpec config(Map<String, String> config) {
    
    this.config = config;
    return this;
  }

  public V1alpha1BackupRepoSpec putConfigItem(String key, String configItem) {
    if (this.config == null) {
      this.config = new HashMap<>();
    }
    this.config.put(key, configItem);
    return this;
  }

   /**
   * Stores the non-secret configuration parameters for the &#x60;StorageProvider&#x60;.
   * @return config
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getConfig() {
    return config;
  }


  public void setConfig(Map<String, String> config) {
    this.config = config;
  }


  public V1alpha1BackupRepoSpec credential(V1alpha1BackupRepoSpecCredential credential) {
    
    this.credential = credential;
    return this;
  }

   /**
   * Get credential
   * @return credential
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupRepoSpecCredential getCredential() {
    return credential;
  }


  public void setCredential(V1alpha1BackupRepoSpecCredential credential) {
    this.credential = credential;
  }


  public V1alpha1BackupRepoSpec pathPrefix(String pathPrefix) {
    
    this.pathPrefix = pathPrefix;
    return this;
  }

   /**
   * Specifies the prefix of the path for storing backup data.
   * @return pathPrefix
  **/
  @jakarta.annotation.Nullable
  public String getPathPrefix() {
    return pathPrefix;
  }


  public void setPathPrefix(String pathPrefix) {
    this.pathPrefix = pathPrefix;
  }


  public V1alpha1BackupRepoSpec pvReclaimPolicy(PvReclaimPolicyEnum pvReclaimPolicy) {
    
    this.pvReclaimPolicy = pvReclaimPolicy;
    return this;
  }

   /**
   * Specifies reclaim policy of the PV created by this backup repository.
   * @return pvReclaimPolicy
  **/
  @jakarta.annotation.Nonnull
  public PvReclaimPolicyEnum getPvReclaimPolicy() {
    return pvReclaimPolicy;
  }


  public void setPvReclaimPolicy(PvReclaimPolicyEnum pvReclaimPolicy) {
    this.pvReclaimPolicy = pvReclaimPolicy;
  }


  public V1alpha1BackupRepoSpec storageProviderRef(String storageProviderRef) {
    
    this.storageProviderRef = storageProviderRef;
    return this;
  }

   /**
   * Specifies the name of the &#x60;StorageProvider&#x60; used by this backup repository.
   * @return storageProviderRef
  **/
  @jakarta.annotation.Nonnull
  public String getStorageProviderRef() {
    return storageProviderRef;
  }


  public void setStorageProviderRef(String storageProviderRef) {
    this.storageProviderRef = storageProviderRef;
  }


  public V1alpha1BackupRepoSpec volumeCapacity(Object volumeCapacity) {
    
    this.volumeCapacity = volumeCapacity;
    return this;
  }

   /**
   * Specifies the capacity of the PVC created by this backup repository.
   * @return volumeCapacity
  **/
  @jakarta.annotation.Nullable
  public Object getVolumeCapacity() {
    return volumeCapacity;
  }


  public void setVolumeCapacity(Object volumeCapacity) {
    this.volumeCapacity = volumeCapacity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1BackupRepoSpec v1alpha1BackupRepoSpec = (V1alpha1BackupRepoSpec) o;
    return Objects.equals(this.accessMethod, v1alpha1BackupRepoSpec.accessMethod) &&
        Objects.equals(this.config, v1alpha1BackupRepoSpec.config) &&
        Objects.equals(this.credential, v1alpha1BackupRepoSpec.credential) &&
        Objects.equals(this.pathPrefix, v1alpha1BackupRepoSpec.pathPrefix) &&
        Objects.equals(this.pvReclaimPolicy, v1alpha1BackupRepoSpec.pvReclaimPolicy) &&
        Objects.equals(this.storageProviderRef, v1alpha1BackupRepoSpec.storageProviderRef) &&
        Objects.equals(this.volumeCapacity, v1alpha1BackupRepoSpec.volumeCapacity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessMethod, config, credential, pathPrefix, pvReclaimPolicy, storageProviderRef, volumeCapacity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1BackupRepoSpec {\n");
    sb.append("    accessMethod: ").append(toIndentedString(accessMethod)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    pathPrefix: ").append(toIndentedString(pathPrefix)).append("\n");
    sb.append("    pvReclaimPolicy: ").append(toIndentedString(pvReclaimPolicy)).append("\n");
    sb.append("    storageProviderRef: ").append(toIndentedString(storageProviderRef)).append("\n");
    sb.append("    volumeCapacity: ").append(toIndentedString(volumeCapacity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessMethod");
    openapiFields.add("config");
    openapiFields.add("credential");
    openapiFields.add("pathPrefix");
    openapiFields.add("pvReclaimPolicy");
    openapiFields.add("storageProviderRef");
    openapiFields.add("volumeCapacity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pvReclaimPolicy");
    openapiRequiredFields.add("storageProviderRef");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1BackupRepoSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1BackupRepoSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1BackupRepoSpec is not found in the empty JSON string", V1alpha1BackupRepoSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1BackupRepoSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1BackupRepoSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1BackupRepoSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accessMethod") != null && !jsonObj.get("accessMethod").isJsonNull()) && !jsonObj.get("accessMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessMethod").toString()));
      }
      // validate the optional field `credential`
      if (jsonObj.get("credential") != null && !jsonObj.get("credential").isJsonNull()) {
        V1alpha1BackupRepoSpecCredential.validateJsonObject(jsonObj.getAsJsonObject("credential"));
      }
      if ((jsonObj.get("pathPrefix") != null && !jsonObj.get("pathPrefix").isJsonNull()) && !jsonObj.get("pathPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathPrefix").toString()));
      }
      if (!jsonObj.get("pvReclaimPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pvReclaimPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pvReclaimPolicy").toString()));
      }
      if (!jsonObj.get("storageProviderRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageProviderRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageProviderRef").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1BackupRepoSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1BackupRepoSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1BackupRepoSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1BackupRepoSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1BackupRepoSpec>() {
           @Override
           public void write(JsonWriter out, V1alpha1BackupRepoSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1BackupRepoSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1BackupRepoSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1BackupRepoSpec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1BackupRepoSpec
  */
  public static V1alpha1BackupRepoSpec fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1BackupRepoSpec.class);
  }

 /**
  * Convert an instance of V1alpha1BackupRepoSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

