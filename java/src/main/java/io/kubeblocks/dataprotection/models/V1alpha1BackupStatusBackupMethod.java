/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodEnvInner;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodRuntimeSettings;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodTarget;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodTargetVolumes;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethodTargetsInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Records the backup method information for this backup. Refer to BackupMethod for more details.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:00:30.430950Z[Etc/UTC]")
public class V1alpha1BackupStatusBackupMethod {
  public static final String SERIALIZED_NAME_ACTION_SET_NAME = "actionSetName";
  @SerializedName(SERIALIZED_NAME_ACTION_SET_NAME)
  private String actionSetName;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<V1alpha1BackupStatusBackupMethodEnvInner> env;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNTIME_SETTINGS = "runtimeSettings";
  @SerializedName(SERIALIZED_NAME_RUNTIME_SETTINGS)
  private V1alpha1BackupStatusBackupMethodRuntimeSettings runtimeSettings;

  public static final String SERIALIZED_NAME_SNAPSHOT_VOLUMES = "snapshotVolumes";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_VOLUMES)
  private Boolean snapshotVolumes;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private V1alpha1BackupStatusBackupMethodTarget target;

  public static final String SERIALIZED_NAME_TARGET_VOLUMES = "targetVolumes";
  @SerializedName(SERIALIZED_NAME_TARGET_VOLUMES)
  private V1alpha1BackupStatusBackupMethodTargetVolumes targetVolumes;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<V1alpha1BackupStatusBackupMethodTargetsInner> targets;

  public V1alpha1BackupStatusBackupMethod() {
  }

  public V1alpha1BackupStatusBackupMethod actionSetName(String actionSetName) {
    
    this.actionSetName = actionSetName;
    return this;
  }

   /**
   * Refers to the ActionSet object that defines the backup actions. For volume snapshot backup, the actionSet is not required, the controller will use the CSI volume snapshotter to create the snapshot.
   * @return actionSetName
  **/
  @jakarta.annotation.Nullable
  public String getActionSetName() {
    return actionSetName;
  }


  public void setActionSetName(String actionSetName) {
    this.actionSetName = actionSetName;
  }


  public V1alpha1BackupStatusBackupMethod env(List<V1alpha1BackupStatusBackupMethodEnvInner> env) {
    
    this.env = env;
    return this;
  }

  public V1alpha1BackupStatusBackupMethod addEnvItem(V1alpha1BackupStatusBackupMethodEnvInner envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Specifies the environment variables for the backup workload.
   * @return env
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1BackupStatusBackupMethodEnvInner> getEnv() {
    return env;
  }


  public void setEnv(List<V1alpha1BackupStatusBackupMethodEnvInner> env) {
    this.env = env;
  }


  public V1alpha1BackupStatusBackupMethod name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of backup method.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1BackupStatusBackupMethod runtimeSettings(V1alpha1BackupStatusBackupMethodRuntimeSettings runtimeSettings) {
    
    this.runtimeSettings = runtimeSettings;
    return this;
  }

   /**
   * Get runtimeSettings
   * @return runtimeSettings
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusBackupMethodRuntimeSettings getRuntimeSettings() {
    return runtimeSettings;
  }


  public void setRuntimeSettings(V1alpha1BackupStatusBackupMethodRuntimeSettings runtimeSettings) {
    this.runtimeSettings = runtimeSettings;
  }


  public V1alpha1BackupStatusBackupMethod snapshotVolumes(Boolean snapshotVolumes) {
    
    this.snapshotVolumes = snapshotVolumes;
    return this;
  }

   /**
   * Specifies whether to take snapshots of persistent volumes. If true, the ActionSetName is not required, the controller will use the CSI volume snapshotter to create the snapshot.
   * @return snapshotVolumes
  **/
  @jakarta.annotation.Nullable
  public Boolean getSnapshotVolumes() {
    return snapshotVolumes;
  }


  public void setSnapshotVolumes(Boolean snapshotVolumes) {
    this.snapshotVolumes = snapshotVolumes;
  }


  public V1alpha1BackupStatusBackupMethod target(V1alpha1BackupStatusBackupMethodTarget target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusBackupMethodTarget getTarget() {
    return target;
  }


  public void setTarget(V1alpha1BackupStatusBackupMethodTarget target) {
    this.target = target;
  }


  public V1alpha1BackupStatusBackupMethod targetVolumes(V1alpha1BackupStatusBackupMethodTargetVolumes targetVolumes) {
    
    this.targetVolumes = targetVolumes;
    return this;
  }

   /**
   * Get targetVolumes
   * @return targetVolumes
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusBackupMethodTargetVolumes getTargetVolumes() {
    return targetVolumes;
  }


  public void setTargetVolumes(V1alpha1BackupStatusBackupMethodTargetVolumes targetVolumes) {
    this.targetVolumes = targetVolumes;
  }


  public V1alpha1BackupStatusBackupMethod targets(List<V1alpha1BackupStatusBackupMethodTargetsInner> targets) {
    
    this.targets = targets;
    return this;
  }

  public V1alpha1BackupStatusBackupMethod addTargetsItem(V1alpha1BackupStatusBackupMethodTargetsInner targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Specifies multiple target information for backup operations. This includes details such as the target pod and cluster connection credentials. All specified targets will be backed up collectively.
   * @return targets
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1BackupStatusBackupMethodTargetsInner> getTargets() {
    return targets;
  }


  public void setTargets(List<V1alpha1BackupStatusBackupMethodTargetsInner> targets) {
    this.targets = targets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1BackupStatusBackupMethod v1alpha1BackupStatusBackupMethod = (V1alpha1BackupStatusBackupMethod) o;
    return Objects.equals(this.actionSetName, v1alpha1BackupStatusBackupMethod.actionSetName) &&
        Objects.equals(this.env, v1alpha1BackupStatusBackupMethod.env) &&
        Objects.equals(this.name, v1alpha1BackupStatusBackupMethod.name) &&
        Objects.equals(this.runtimeSettings, v1alpha1BackupStatusBackupMethod.runtimeSettings) &&
        Objects.equals(this.snapshotVolumes, v1alpha1BackupStatusBackupMethod.snapshotVolumes) &&
        Objects.equals(this.target, v1alpha1BackupStatusBackupMethod.target) &&
        Objects.equals(this.targetVolumes, v1alpha1BackupStatusBackupMethod.targetVolumes) &&
        Objects.equals(this.targets, v1alpha1BackupStatusBackupMethod.targets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionSetName, env, name, runtimeSettings, snapshotVolumes, target, targetVolumes, targets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1BackupStatusBackupMethod {\n");
    sb.append("    actionSetName: ").append(toIndentedString(actionSetName)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runtimeSettings: ").append(toIndentedString(runtimeSettings)).append("\n");
    sb.append("    snapshotVolumes: ").append(toIndentedString(snapshotVolumes)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targetVolumes: ").append(toIndentedString(targetVolumes)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionSetName");
    openapiFields.add("env");
    openapiFields.add("name");
    openapiFields.add("runtimeSettings");
    openapiFields.add("snapshotVolumes");
    openapiFields.add("target");
    openapiFields.add("targetVolumes");
    openapiFields.add("targets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1BackupStatusBackupMethod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1BackupStatusBackupMethod.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1BackupStatusBackupMethod is not found in the empty JSON string", V1alpha1BackupStatusBackupMethod.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1BackupStatusBackupMethod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1BackupStatusBackupMethod` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1BackupStatusBackupMethod.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("actionSetName") != null && !jsonObj.get("actionSetName").isJsonNull()) && !jsonObj.get("actionSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionSetName").toString()));
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            V1alpha1BackupStatusBackupMethodEnvInner.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `runtimeSettings`
      if (jsonObj.get("runtimeSettings") != null && !jsonObj.get("runtimeSettings").isJsonNull()) {
        V1alpha1BackupStatusBackupMethodRuntimeSettings.validateJsonObject(jsonObj.getAsJsonObject("runtimeSettings"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        V1alpha1BackupStatusBackupMethodTarget.validateJsonObject(jsonObj.getAsJsonObject("target"));
      }
      // validate the optional field `targetVolumes`
      if (jsonObj.get("targetVolumes") != null && !jsonObj.get("targetVolumes").isJsonNull()) {
        V1alpha1BackupStatusBackupMethodTargetVolumes.validateJsonObject(jsonObj.getAsJsonObject("targetVolumes"));
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            V1alpha1BackupStatusBackupMethodTargetsInner.validateJsonObject(jsonArraytargets.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1BackupStatusBackupMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1BackupStatusBackupMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1BackupStatusBackupMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1BackupStatusBackupMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1BackupStatusBackupMethod>() {
           @Override
           public void write(JsonWriter out, V1alpha1BackupStatusBackupMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1BackupStatusBackupMethod read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1BackupStatusBackupMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1BackupStatusBackupMethod
  * @throws IOException if the JSON string is invalid with respect to V1alpha1BackupStatusBackupMethod
  */
  public static V1alpha1BackupStatusBackupMethod fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1BackupStatusBackupMethod.class);
  }

 /**
  * Convert an instance of V1alpha1BackupStatusBackupMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

