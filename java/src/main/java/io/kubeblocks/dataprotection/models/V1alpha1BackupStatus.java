/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusActionsInner;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusActionsInnerVolumeSnapshotsInner;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusBackupMethod;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusEncryptionConfig;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusTarget;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusTargetsInner;
import io.kubeblocks.dataprotection.models.V1alpha1BackupStatusTimeRange;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * BackupStatus defines the observed state of Backup.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:00:30.430950Z[Etc/UTC]")
public class V1alpha1BackupStatus {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<V1alpha1BackupStatusActionsInner> actions;

  public static final String SERIALIZED_NAME_BACKUP_METHOD = "backupMethod";
  @SerializedName(SERIALIZED_NAME_BACKUP_METHOD)
  private V1alpha1BackupStatusBackupMethod backupMethod;

  public static final String SERIALIZED_NAME_BACKUP_REPO_NAME = "backupRepoName";
  @SerializedName(SERIALIZED_NAME_BACKUP_REPO_NAME)
  private String backupRepoName;

  public static final String SERIALIZED_NAME_COMPLETION_TIMESTAMP = "completionTimestamp";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIMESTAMP)
  private OffsetDateTime completionTimestamp;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private V1alpha1BackupStatusEncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private List<Map<String, String>> extras;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_FORMAT_VERSION = "formatVersion";
  @SerializedName(SERIALIZED_NAME_FORMAT_VERSION)
  private String formatVersion;

  public static final String SERIALIZED_NAME_KOPIA_REPO_PATH = "kopiaRepoPath";
  @SerializedName(SERIALIZED_NAME_KOPIA_REPO_PATH)
  private String kopiaRepoPath;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM_NAME = "persistentVolumeClaimName";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM_NAME)
  private String persistentVolumeClaimName;

  /**
   * Indicates the current state of the backup operation.
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    NEW("New"),
    
    INPROGRESS("InProgress"),
    
    RUNNING("Running"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed"),
    
    DELETING("Deleting");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "startTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private OffsetDateTime startTimestamp;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private V1alpha1BackupStatusTarget target;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<V1alpha1BackupStatusTargetsInner> targets;

  public static final String SERIALIZED_NAME_TIME_RANGE = "timeRange";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private V1alpha1BackupStatusTimeRange timeRange;

  public static final String SERIALIZED_NAME_TOTAL_SIZE = "totalSize";
  @SerializedName(SERIALIZED_NAME_TOTAL_SIZE)
  private String totalSize;

  public static final String SERIALIZED_NAME_VOLUME_SNAPSHOTS = "volumeSnapshots";
  @SerializedName(SERIALIZED_NAME_VOLUME_SNAPSHOTS)
  private List<V1alpha1BackupStatusActionsInnerVolumeSnapshotsInner> volumeSnapshots;

  public V1alpha1BackupStatus() {
  }

  public V1alpha1BackupStatus actions(List<V1alpha1BackupStatusActionsInner> actions) {
    
    this.actions = actions;
    return this;
  }

  public V1alpha1BackupStatus addActionsItem(V1alpha1BackupStatusActionsInner actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Records the actions status for this backup.
   * @return actions
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1BackupStatusActionsInner> getActions() {
    return actions;
  }


  public void setActions(List<V1alpha1BackupStatusActionsInner> actions) {
    this.actions = actions;
  }


  public V1alpha1BackupStatus backupMethod(V1alpha1BackupStatusBackupMethod backupMethod) {
    
    this.backupMethod = backupMethod;
    return this;
  }

   /**
   * Get backupMethod
   * @return backupMethod
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusBackupMethod getBackupMethod() {
    return backupMethod;
  }


  public void setBackupMethod(V1alpha1BackupStatusBackupMethod backupMethod) {
    this.backupMethod = backupMethod;
  }


  public V1alpha1BackupStatus backupRepoName(String backupRepoName) {
    
    this.backupRepoName = backupRepoName;
    return this;
  }

   /**
   * The name of the backup repository.
   * @return backupRepoName
  **/
  @jakarta.annotation.Nullable
  public String getBackupRepoName() {
    return backupRepoName;
  }


  public void setBackupRepoName(String backupRepoName) {
    this.backupRepoName = backupRepoName;
  }


  public V1alpha1BackupStatus completionTimestamp(OffsetDateTime completionTimestamp) {
    
    this.completionTimestamp = completionTimestamp;
    return this;
  }

   /**
   * Records the time when the backup operation was completed. This timestamp is recorded even if the backup operation fails. The server&#39;s time is used for this timestamp.
   * @return completionTimestamp
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getCompletionTimestamp() {
    return completionTimestamp;
  }


  public void setCompletionTimestamp(OffsetDateTime completionTimestamp) {
    this.completionTimestamp = completionTimestamp;
  }


  public V1alpha1BackupStatus duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Records the duration of the backup operation. When converted to a string, the format is \&quot;1h2m0.5s\&quot;.
   * @return duration
  **/
  @jakarta.annotation.Nullable
  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public V1alpha1BackupStatus encryptionConfig(V1alpha1BackupStatusEncryptionConfig encryptionConfig) {
    
    this.encryptionConfig = encryptionConfig;
    return this;
  }

   /**
   * Get encryptionConfig
   * @return encryptionConfig
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusEncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }


  public void setEncryptionConfig(V1alpha1BackupStatusEncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public V1alpha1BackupStatus expiration(OffsetDateTime expiration) {
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Indicates when this backup becomes eligible for garbage collection. A &#39;null&#39; value implies that the backup will not be cleaned up unless manually deleted.
   * @return expiration
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getExpiration() {
    return expiration;
  }


  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public V1alpha1BackupStatus extras(List<Map<String, String>> extras) {
    
    this.extras = extras;
    return this;
  }

  public V1alpha1BackupStatus addExtrasItem(Map<String, String> extrasItem) {
    if (this.extras == null) {
      this.extras = new ArrayList<>();
    }
    this.extras.add(extrasItem);
    return this;
  }

   /**
   * Records any additional information for the backup.
   * @return extras
  **/
  @jakarta.annotation.Nullable
  public List<Map<String, String>> getExtras() {
    return extras;
  }


  public void setExtras(List<Map<String, String>> extras) {
    this.extras = extras;
  }


  public V1alpha1BackupStatus failureReason(String failureReason) {
    
    this.failureReason = failureReason;
    return this;
  }

   /**
   * Any error that caused the backup operation to fail.
   * @return failureReason
  **/
  @jakarta.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }


  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public V1alpha1BackupStatus formatVersion(String formatVersion) {
    
    this.formatVersion = formatVersion;
    return this;
  }

   /**
   * Specifies the backup format version, which includes major, minor, and patch versions.
   * @return formatVersion
  **/
  @jakarta.annotation.Nullable
  public String getFormatVersion() {
    return formatVersion;
  }


  public void setFormatVersion(String formatVersion) {
    this.formatVersion = formatVersion;
  }


  public V1alpha1BackupStatus kopiaRepoPath(String kopiaRepoPath) {
    
    this.kopiaRepoPath = kopiaRepoPath;
    return this;
  }

   /**
   * Records the path of the Kopia repository.
   * @return kopiaRepoPath
  **/
  @jakarta.annotation.Nullable
  public String getKopiaRepoPath() {
    return kopiaRepoPath;
  }


  public void setKopiaRepoPath(String kopiaRepoPath) {
    this.kopiaRepoPath = kopiaRepoPath;
  }


  public V1alpha1BackupStatus path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * The directory within the backup repository where the backup data is stored. This is an absolute path within the backup repository.
   * @return path
  **/
  @jakarta.annotation.Nullable
  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public V1alpha1BackupStatus persistentVolumeClaimName(String persistentVolumeClaimName) {
    
    this.persistentVolumeClaimName = persistentVolumeClaimName;
    return this;
  }

   /**
   * Records the name of the persistent volume claim used to store the backup data.
   * @return persistentVolumeClaimName
  **/
  @jakarta.annotation.Nullable
  public String getPersistentVolumeClaimName() {
    return persistentVolumeClaimName;
  }


  public void setPersistentVolumeClaimName(String persistentVolumeClaimName) {
    this.persistentVolumeClaimName = persistentVolumeClaimName;
  }


  public V1alpha1BackupStatus phase(PhaseEnum phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * Indicates the current state of the backup operation.
   * @return phase
  **/
  @jakarta.annotation.Nullable
  public PhaseEnum getPhase() {
    return phase;
  }


  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  public V1alpha1BackupStatus startTimestamp(OffsetDateTime startTimestamp) {
    
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * Records the time when the backup operation was started. The server&#39;s time is used for this timestamp.
   * @return startTimestamp
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getStartTimestamp() {
    return startTimestamp;
  }


  public void setStartTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public V1alpha1BackupStatus target(V1alpha1BackupStatusTarget target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusTarget getTarget() {
    return target;
  }


  public void setTarget(V1alpha1BackupStatusTarget target) {
    this.target = target;
  }


  public V1alpha1BackupStatus targets(List<V1alpha1BackupStatusTargetsInner> targets) {
    
    this.targets = targets;
    return this;
  }

  public V1alpha1BackupStatus addTargetsItem(V1alpha1BackupStatusTargetsInner targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Records the targets information for this backup.
   * @return targets
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1BackupStatusTargetsInner> getTargets() {
    return targets;
  }


  public void setTargets(List<V1alpha1BackupStatusTargetsInner> targets) {
    this.targets = targets;
  }


  public V1alpha1BackupStatus timeRange(V1alpha1BackupStatusTimeRange timeRange) {
    
    this.timeRange = timeRange;
    return this;
  }

   /**
   * Get timeRange
   * @return timeRange
  **/
  @jakarta.annotation.Nullable
  public V1alpha1BackupStatusTimeRange getTimeRange() {
    return timeRange;
  }


  public void setTimeRange(V1alpha1BackupStatusTimeRange timeRange) {
    this.timeRange = timeRange;
  }


  public V1alpha1BackupStatus totalSize(String totalSize) {
    
    this.totalSize = totalSize;
    return this;
  }

   /**
   * Records the total size of the data backed up. The size is represented as a string with capacity units in the format of \&quot;1Gi\&quot;, \&quot;1Mi\&quot;, \&quot;1Ki\&quot;. If no capacity unit is specified, it is assumed to be in bytes.
   * @return totalSize
  **/
  @jakarta.annotation.Nullable
  public String getTotalSize() {
    return totalSize;
  }


  public void setTotalSize(String totalSize) {
    this.totalSize = totalSize;
  }


  public V1alpha1BackupStatus volumeSnapshots(List<V1alpha1BackupStatusActionsInnerVolumeSnapshotsInner> volumeSnapshots) {
    
    this.volumeSnapshots = volumeSnapshots;
    return this;
  }

  public V1alpha1BackupStatus addVolumeSnapshotsItem(V1alpha1BackupStatusActionsInnerVolumeSnapshotsInner volumeSnapshotsItem) {
    if (this.volumeSnapshots == null) {
      this.volumeSnapshots = new ArrayList<>();
    }
    this.volumeSnapshots.add(volumeSnapshotsItem);
    return this;
  }

   /**
   * Records the volume snapshot status for the action.
   * @return volumeSnapshots
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1BackupStatusActionsInnerVolumeSnapshotsInner> getVolumeSnapshots() {
    return volumeSnapshots;
  }


  public void setVolumeSnapshots(List<V1alpha1BackupStatusActionsInnerVolumeSnapshotsInner> volumeSnapshots) {
    this.volumeSnapshots = volumeSnapshots;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1BackupStatus v1alpha1BackupStatus = (V1alpha1BackupStatus) o;
    return Objects.equals(this.actions, v1alpha1BackupStatus.actions) &&
        Objects.equals(this.backupMethod, v1alpha1BackupStatus.backupMethod) &&
        Objects.equals(this.backupRepoName, v1alpha1BackupStatus.backupRepoName) &&
        Objects.equals(this.completionTimestamp, v1alpha1BackupStatus.completionTimestamp) &&
        Objects.equals(this.duration, v1alpha1BackupStatus.duration) &&
        Objects.equals(this.encryptionConfig, v1alpha1BackupStatus.encryptionConfig) &&
        Objects.equals(this.expiration, v1alpha1BackupStatus.expiration) &&
        Objects.equals(this.extras, v1alpha1BackupStatus.extras) &&
        Objects.equals(this.failureReason, v1alpha1BackupStatus.failureReason) &&
        Objects.equals(this.formatVersion, v1alpha1BackupStatus.formatVersion) &&
        Objects.equals(this.kopiaRepoPath, v1alpha1BackupStatus.kopiaRepoPath) &&
        Objects.equals(this.path, v1alpha1BackupStatus.path) &&
        Objects.equals(this.persistentVolumeClaimName, v1alpha1BackupStatus.persistentVolumeClaimName) &&
        Objects.equals(this.phase, v1alpha1BackupStatus.phase) &&
        Objects.equals(this.startTimestamp, v1alpha1BackupStatus.startTimestamp) &&
        Objects.equals(this.target, v1alpha1BackupStatus.target) &&
        Objects.equals(this.targets, v1alpha1BackupStatus.targets) &&
        Objects.equals(this.timeRange, v1alpha1BackupStatus.timeRange) &&
        Objects.equals(this.totalSize, v1alpha1BackupStatus.totalSize) &&
        Objects.equals(this.volumeSnapshots, v1alpha1BackupStatus.volumeSnapshots);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, backupMethod, backupRepoName, completionTimestamp, duration, encryptionConfig, expiration, extras, failureReason, formatVersion, kopiaRepoPath, path, persistentVolumeClaimName, phase, startTimestamp, target, targets, timeRange, totalSize, volumeSnapshots);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1BackupStatus {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    backupMethod: ").append(toIndentedString(backupMethod)).append("\n");
    sb.append("    backupRepoName: ").append(toIndentedString(backupRepoName)).append("\n");
    sb.append("    completionTimestamp: ").append(toIndentedString(completionTimestamp)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    formatVersion: ").append(toIndentedString(formatVersion)).append("\n");
    sb.append("    kopiaRepoPath: ").append(toIndentedString(kopiaRepoPath)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    persistentVolumeClaimName: ").append(toIndentedString(persistentVolumeClaimName)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("    volumeSnapshots: ").append(toIndentedString(volumeSnapshots)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("backupMethod");
    openapiFields.add("backupRepoName");
    openapiFields.add("completionTimestamp");
    openapiFields.add("duration");
    openapiFields.add("encryptionConfig");
    openapiFields.add("expiration");
    openapiFields.add("extras");
    openapiFields.add("failureReason");
    openapiFields.add("formatVersion");
    openapiFields.add("kopiaRepoPath");
    openapiFields.add("path");
    openapiFields.add("persistentVolumeClaimName");
    openapiFields.add("phase");
    openapiFields.add("startTimestamp");
    openapiFields.add("target");
    openapiFields.add("targets");
    openapiFields.add("timeRange");
    openapiFields.add("totalSize");
    openapiFields.add("volumeSnapshots");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1BackupStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1BackupStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1BackupStatus is not found in the empty JSON string", V1alpha1BackupStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1BackupStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1BackupStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            V1alpha1BackupStatusActionsInner.validateJsonObject(jsonArrayactions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `backupMethod`
      if (jsonObj.get("backupMethod") != null && !jsonObj.get("backupMethod").isJsonNull()) {
        V1alpha1BackupStatusBackupMethod.validateJsonObject(jsonObj.getAsJsonObject("backupMethod"));
      }
      if ((jsonObj.get("backupRepoName") != null && !jsonObj.get("backupRepoName").isJsonNull()) && !jsonObj.get("backupRepoName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupRepoName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupRepoName").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        V1alpha1BackupStatusEncryptionConfig.validateJsonObject(jsonObj.getAsJsonObject("encryptionConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("extras") != null && !jsonObj.get("extras").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extras` to be an array in the JSON string but got `%s`", jsonObj.get("extras").toString()));
      }
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      if ((jsonObj.get("formatVersion") != null && !jsonObj.get("formatVersion").isJsonNull()) && !jsonObj.get("formatVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatVersion").toString()));
      }
      if ((jsonObj.get("kopiaRepoPath") != null && !jsonObj.get("kopiaRepoPath").isJsonNull()) && !jsonObj.get("kopiaRepoPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kopiaRepoPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kopiaRepoPath").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("persistentVolumeClaimName") != null && !jsonObj.get("persistentVolumeClaimName").isJsonNull()) && !jsonObj.get("persistentVolumeClaimName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistentVolumeClaimName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistentVolumeClaimName").toString()));
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        V1alpha1BackupStatusTarget.validateJsonObject(jsonObj.getAsJsonObject("target"));
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            V1alpha1BackupStatusTargetsInner.validateJsonObject(jsonArraytargets.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `timeRange`
      if (jsonObj.get("timeRange") != null && !jsonObj.get("timeRange").isJsonNull()) {
        V1alpha1BackupStatusTimeRange.validateJsonObject(jsonObj.getAsJsonObject("timeRange"));
      }
      if ((jsonObj.get("totalSize") != null && !jsonObj.get("totalSize").isJsonNull()) && !jsonObj.get("totalSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSize").toString()));
      }
      if (jsonObj.get("volumeSnapshots") != null && !jsonObj.get("volumeSnapshots").isJsonNull()) {
        JsonArray jsonArrayvolumeSnapshots = jsonObj.getAsJsonArray("volumeSnapshots");
        if (jsonArrayvolumeSnapshots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeSnapshots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeSnapshots` to be an array in the JSON string but got `%s`", jsonObj.get("volumeSnapshots").toString()));
          }

          // validate the optional field `volumeSnapshots` (array)
          for (int i = 0; i < jsonArrayvolumeSnapshots.size(); i++) {
            V1alpha1BackupStatusActionsInnerVolumeSnapshotsInner.validateJsonObject(jsonArrayvolumeSnapshots.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1BackupStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1BackupStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1BackupStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1BackupStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1BackupStatus>() {
           @Override
           public void write(JsonWriter out, V1alpha1BackupStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1BackupStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1BackupStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1BackupStatus
  * @throws IOException if the JSON string is invalid with respect to V1alpha1BackupStatus
  */
  public static V1alpha1BackupStatus fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1BackupStatus.class);
  }

 /**
  * Convert an instance of V1alpha1BackupStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

