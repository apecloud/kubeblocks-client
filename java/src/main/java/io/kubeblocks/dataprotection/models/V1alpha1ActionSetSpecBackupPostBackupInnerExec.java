/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specifies that the action should be executed using the pod&#39;s exec API within a container.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:02:15.095121Z[Etc/UTC]")
public class V1alpha1ActionSetSpecBackupPostBackupInnerExec {
  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List<String> command = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  /**
   * Indicates how to behave if an error is encountered during the execution of this action.
   */
  @JsonAdapter(OnErrorEnum.Adapter.class)
  public enum OnErrorEnum {
    CONTINUE("Continue"),
    
    FAIL("Fail");

    private String value;

    OnErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnErrorEnum fromValue(String value) {
      for (OnErrorEnum b : OnErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OnErrorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ON_ERROR = "onError";
  @SerializedName(SERIALIZED_NAME_ON_ERROR)
  private OnErrorEnum onError;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public V1alpha1ActionSetSpecBackupPostBackupInnerExec() {
  }

  public V1alpha1ActionSetSpecBackupPostBackupInnerExec command(List<String> command) {
    
    this.command = command;
    return this;
  }

  public V1alpha1ActionSetSpecBackupPostBackupInnerExec addCommandItem(String commandItem) {
    if (this.command == null) {
      this.command = new ArrayList<>();
    }
    this.command.add(commandItem);
    return this;
  }

   /**
   * Defines the command and arguments to be executed.
   * @return command
  **/
  @jakarta.annotation.Nonnull
  public List<String> getCommand() {
    return command;
  }


  public void setCommand(List<String> command) {
    this.command = command;
  }


  public V1alpha1ActionSetSpecBackupPostBackupInnerExec container(String container) {
    
    this.container = container;
    return this;
  }

   /**
   * Specifies the container within the pod where the command should be executed. If not specified, the first container in the pod is used by default.
   * @return container
  **/
  @jakarta.annotation.Nullable
  public String getContainer() {
    return container;
  }


  public void setContainer(String container) {
    this.container = container;
  }


  public V1alpha1ActionSetSpecBackupPostBackupInnerExec onError(OnErrorEnum onError) {
    
    this.onError = onError;
    return this;
  }

   /**
   * Indicates how to behave if an error is encountered during the execution of this action.
   * @return onError
  **/
  @jakarta.annotation.Nullable
  public OnErrorEnum getOnError() {
    return onError;
  }


  public void setOnError(OnErrorEnum onError) {
    this.onError = onError;
  }


  public V1alpha1ActionSetSpecBackupPostBackupInnerExec timeout(String timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Specifies the maximum duration to wait for the hook to complete before considering the execution a failure.
   * @return timeout
  **/
  @jakarta.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }


  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ActionSetSpecBackupPostBackupInnerExec v1alpha1ActionSetSpecBackupPostBackupInnerExec = (V1alpha1ActionSetSpecBackupPostBackupInnerExec) o;
    return Objects.equals(this.command, v1alpha1ActionSetSpecBackupPostBackupInnerExec.command) &&
        Objects.equals(this.container, v1alpha1ActionSetSpecBackupPostBackupInnerExec.container) &&
        Objects.equals(this.onError, v1alpha1ActionSetSpecBackupPostBackupInnerExec.onError) &&
        Objects.equals(this.timeout, v1alpha1ActionSetSpecBackupPostBackupInnerExec.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, container, onError, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ActionSetSpecBackupPostBackupInnerExec {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    onError: ").append(toIndentedString(onError)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("command");
    openapiFields.add("container");
    openapiFields.add("onError");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("command");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ActionSetSpecBackupPostBackupInnerExec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ActionSetSpecBackupPostBackupInnerExec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ActionSetSpecBackupPostBackupInnerExec is not found in the empty JSON string", V1alpha1ActionSetSpecBackupPostBackupInnerExec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ActionSetSpecBackupPostBackupInnerExec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ActionSetSpecBackupPostBackupInnerExec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1ActionSetSpecBackupPostBackupInnerExec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("command") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("command").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be an array in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if ((jsonObj.get("onError") != null && !jsonObj.get("onError").isJsonNull()) && !jsonObj.get("onError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onError").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ActionSetSpecBackupPostBackupInnerExec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ActionSetSpecBackupPostBackupInnerExec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ActionSetSpecBackupPostBackupInnerExec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ActionSetSpecBackupPostBackupInnerExec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ActionSetSpecBackupPostBackupInnerExec>() {
           @Override
           public void write(JsonWriter out, V1alpha1ActionSetSpecBackupPostBackupInnerExec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ActionSetSpecBackupPostBackupInnerExec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ActionSetSpecBackupPostBackupInnerExec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ActionSetSpecBackupPostBackupInnerExec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ActionSetSpecBackupPostBackupInnerExec
  */
  public static V1alpha1ActionSetSpecBackupPostBackupInnerExec fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ActionSetSpecBackupPostBackupInnerExec.class);
  }

 /**
  * Convert an instance of V1alpha1ActionSetSpecBackupPostBackupInnerExec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

