/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.dataprotection.models.V1alpha1ActionSetSpecBackupBackupData;
import io.kubeblocks.dataprotection.models.V1alpha1ActionSetSpecBackupPostBackupInner;
import io.kubeblocks.dataprotection.models.V1alpha1ActionSetSpecBackupPreDelete;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specifies the backup action.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:02:15.095121Z[Etc/UTC]")
public class V1alpha1ActionSetSpecBackup {
  public static final String SERIALIZED_NAME_BACKUP_DATA = "backupData";
  @SerializedName(SERIALIZED_NAME_BACKUP_DATA)
  private V1alpha1ActionSetSpecBackupBackupData backupData;

  public static final String SERIALIZED_NAME_POST_BACKUP = "postBackup";
  @SerializedName(SERIALIZED_NAME_POST_BACKUP)
  private List<V1alpha1ActionSetSpecBackupPostBackupInner> postBackup;

  public static final String SERIALIZED_NAME_PRE_BACKUP = "preBackup";
  @SerializedName(SERIALIZED_NAME_PRE_BACKUP)
  private List<V1alpha1ActionSetSpecBackupPostBackupInner> preBackup;

  public static final String SERIALIZED_NAME_PRE_DELETE = "preDelete";
  @SerializedName(SERIALIZED_NAME_PRE_DELETE)
  private V1alpha1ActionSetSpecBackupPreDelete preDelete;

  public V1alpha1ActionSetSpecBackup() {
  }

  public V1alpha1ActionSetSpecBackup backupData(V1alpha1ActionSetSpecBackupBackupData backupData) {
    
    this.backupData = backupData;
    return this;
  }

   /**
   * Get backupData
   * @return backupData
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ActionSetSpecBackupBackupData getBackupData() {
    return backupData;
  }


  public void setBackupData(V1alpha1ActionSetSpecBackupBackupData backupData) {
    this.backupData = backupData;
  }


  public V1alpha1ActionSetSpecBackup postBackup(List<V1alpha1ActionSetSpecBackupPostBackupInner> postBackup) {
    
    this.postBackup = postBackup;
    return this;
  }

  public V1alpha1ActionSetSpecBackup addPostBackupItem(V1alpha1ActionSetSpecBackupPostBackupInner postBackupItem) {
    if (this.postBackup == null) {
      this.postBackup = new ArrayList<>();
    }
    this.postBackup.add(postBackupItem);
    return this;
  }

   /**
   * Represents a set of actions that should be executed after the backup process has completed.
   * @return postBackup
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ActionSetSpecBackupPostBackupInner> getPostBackup() {
    return postBackup;
  }


  public void setPostBackup(List<V1alpha1ActionSetSpecBackupPostBackupInner> postBackup) {
    this.postBackup = postBackup;
  }


  public V1alpha1ActionSetSpecBackup preBackup(List<V1alpha1ActionSetSpecBackupPostBackupInner> preBackup) {
    
    this.preBackup = preBackup;
    return this;
  }

  public V1alpha1ActionSetSpecBackup addPreBackupItem(V1alpha1ActionSetSpecBackupPostBackupInner preBackupItem) {
    if (this.preBackup == null) {
      this.preBackup = new ArrayList<>();
    }
    this.preBackup.add(preBackupItem);
    return this;
  }

   /**
   * Represents a set of actions that should be executed before the backup process begins.
   * @return preBackup
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ActionSetSpecBackupPostBackupInner> getPreBackup() {
    return preBackup;
  }


  public void setPreBackup(List<V1alpha1ActionSetSpecBackupPostBackupInner> preBackup) {
    this.preBackup = preBackup;
  }


  public V1alpha1ActionSetSpecBackup preDelete(V1alpha1ActionSetSpecBackupPreDelete preDelete) {
    
    this.preDelete = preDelete;
    return this;
  }

   /**
   * Get preDelete
   * @return preDelete
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ActionSetSpecBackupPreDelete getPreDelete() {
    return preDelete;
  }


  public void setPreDelete(V1alpha1ActionSetSpecBackupPreDelete preDelete) {
    this.preDelete = preDelete;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ActionSetSpecBackup v1alpha1ActionSetSpecBackup = (V1alpha1ActionSetSpecBackup) o;
    return Objects.equals(this.backupData, v1alpha1ActionSetSpecBackup.backupData) &&
        Objects.equals(this.postBackup, v1alpha1ActionSetSpecBackup.postBackup) &&
        Objects.equals(this.preBackup, v1alpha1ActionSetSpecBackup.preBackup) &&
        Objects.equals(this.preDelete, v1alpha1ActionSetSpecBackup.preDelete);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupData, postBackup, preBackup, preDelete);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ActionSetSpecBackup {\n");
    sb.append("    backupData: ").append(toIndentedString(backupData)).append("\n");
    sb.append("    postBackup: ").append(toIndentedString(postBackup)).append("\n");
    sb.append("    preBackup: ").append(toIndentedString(preBackup)).append("\n");
    sb.append("    preDelete: ").append(toIndentedString(preDelete)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupData");
    openapiFields.add("postBackup");
    openapiFields.add("preBackup");
    openapiFields.add("preDelete");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ActionSetSpecBackup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ActionSetSpecBackup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ActionSetSpecBackup is not found in the empty JSON string", V1alpha1ActionSetSpecBackup.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ActionSetSpecBackup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ActionSetSpecBackup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `backupData`
      if (jsonObj.get("backupData") != null && !jsonObj.get("backupData").isJsonNull()) {
        V1alpha1ActionSetSpecBackupBackupData.validateJsonObject(jsonObj.getAsJsonObject("backupData"));
      }
      if (jsonObj.get("postBackup") != null && !jsonObj.get("postBackup").isJsonNull()) {
        JsonArray jsonArraypostBackup = jsonObj.getAsJsonArray("postBackup");
        if (jsonArraypostBackup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("postBackup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `postBackup` to be an array in the JSON string but got `%s`", jsonObj.get("postBackup").toString()));
          }

          // validate the optional field `postBackup` (array)
          for (int i = 0; i < jsonArraypostBackup.size(); i++) {
            V1alpha1ActionSetSpecBackupPostBackupInner.validateJsonObject(jsonArraypostBackup.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("preBackup") != null && !jsonObj.get("preBackup").isJsonNull()) {
        JsonArray jsonArraypreBackup = jsonObj.getAsJsonArray("preBackup");
        if (jsonArraypreBackup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preBackup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preBackup` to be an array in the JSON string but got `%s`", jsonObj.get("preBackup").toString()));
          }

          // validate the optional field `preBackup` (array)
          for (int i = 0; i < jsonArraypreBackup.size(); i++) {
            V1alpha1ActionSetSpecBackupPostBackupInner.validateJsonObject(jsonArraypreBackup.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `preDelete`
      if (jsonObj.get("preDelete") != null && !jsonObj.get("preDelete").isJsonNull()) {
        V1alpha1ActionSetSpecBackupPreDelete.validateJsonObject(jsonObj.getAsJsonObject("preDelete"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ActionSetSpecBackup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ActionSetSpecBackup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ActionSetSpecBackup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ActionSetSpecBackup.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ActionSetSpecBackup>() {
           @Override
           public void write(JsonWriter out, V1alpha1ActionSetSpecBackup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ActionSetSpecBackup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ActionSetSpecBackup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ActionSetSpecBackup
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ActionSetSpecBackup
  */
  public static V1alpha1ActionSetSpecBackup fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ActionSetSpecBackup.class);
  }

 /**
  * Convert an instance of V1alpha1ActionSetSpecBackup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

