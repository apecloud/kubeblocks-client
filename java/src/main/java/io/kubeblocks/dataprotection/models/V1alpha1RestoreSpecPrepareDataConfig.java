/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.dataprotection.models.V1alpha1RestoreSpecPrepareDataConfigDataSourceRef;
import io.kubeblocks.dataprotection.models.V1alpha1RestoreSpecPrepareDataConfigRequiredPolicyForAllPodSelection;
import io.kubeblocks.dataprotection.models.V1alpha1RestoreSpecPrepareDataConfigSchedulingSpec;
import io.kubeblocks.dataprotection.models.V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsInner;
import io.kubeblocks.dataprotection.models.V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsTemplate;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Configuration for the action of \&quot;prepareData\&quot; phase, including the persistent volume claims that need to be restored and scheduling strategy of temporary recovery pod.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:00:51.636603Z[Etc/UTC]")
public class V1alpha1RestoreSpecPrepareDataConfig {
  public static final String SERIALIZED_NAME_DATA_SOURCE_REF = "dataSourceRef";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_REF)
  private V1alpha1RestoreSpecPrepareDataConfigDataSourceRef dataSourceRef;

  public static final String SERIALIZED_NAME_REQUIRED_POLICY_FOR_ALL_POD_SELECTION = "requiredPolicyForAllPodSelection";
  @SerializedName(SERIALIZED_NAME_REQUIRED_POLICY_FOR_ALL_POD_SELECTION)
  private V1alpha1RestoreSpecPrepareDataConfigRequiredPolicyForAllPodSelection requiredPolicyForAllPodSelection;

  public static final String SERIALIZED_NAME_SCHEDULING_SPEC = "schedulingSpec";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_SPEC)
  private V1alpha1RestoreSpecPrepareDataConfigSchedulingSpec schedulingSpec;

  /**
   * Defines restore policy for persistent volume claim. Supported policies are as follows:   - &#x60;Parallel&#x60;: parallel recovery of persistent volume claim. - &#x60;Serial&#x60;: restore the persistent volume claim in sequence, and wait until the previous persistent volume claim is restored before restoring a new one.
   */
  @JsonAdapter(VolumeClaimRestorePolicyEnum.Adapter.class)
  public enum VolumeClaimRestorePolicyEnum {
    PARALLEL("Parallel"),
    
    SERIAL("Serial");

    private String value;

    VolumeClaimRestorePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VolumeClaimRestorePolicyEnum fromValue(String value) {
      for (VolumeClaimRestorePolicyEnum b : VolumeClaimRestorePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VolumeClaimRestorePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VolumeClaimRestorePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VolumeClaimRestorePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VolumeClaimRestorePolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VOLUME_CLAIM_RESTORE_POLICY = "volumeClaimRestorePolicy";
  @SerializedName(SERIALIZED_NAME_VOLUME_CLAIM_RESTORE_POLICY)
  private VolumeClaimRestorePolicyEnum volumeClaimRestorePolicy;

  public static final String SERIALIZED_NAME_VOLUME_CLAIMS = "volumeClaims";
  @SerializedName(SERIALIZED_NAME_VOLUME_CLAIMS)
  private List<V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsInner> volumeClaims;

  public static final String SERIALIZED_NAME_VOLUME_CLAIMS_TEMPLATE = "volumeClaimsTemplate";
  @SerializedName(SERIALIZED_NAME_VOLUME_CLAIMS_TEMPLATE)
  private V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsTemplate volumeClaimsTemplate;

  public V1alpha1RestoreSpecPrepareDataConfig() {
  }

  public V1alpha1RestoreSpecPrepareDataConfig dataSourceRef(V1alpha1RestoreSpecPrepareDataConfigDataSourceRef dataSourceRef) {
    
    this.dataSourceRef = dataSourceRef;
    return this;
  }

   /**
   * Get dataSourceRef
   * @return dataSourceRef
  **/
  @jakarta.annotation.Nullable
  public V1alpha1RestoreSpecPrepareDataConfigDataSourceRef getDataSourceRef() {
    return dataSourceRef;
  }


  public void setDataSourceRef(V1alpha1RestoreSpecPrepareDataConfigDataSourceRef dataSourceRef) {
    this.dataSourceRef = dataSourceRef;
  }


  public V1alpha1RestoreSpecPrepareDataConfig requiredPolicyForAllPodSelection(V1alpha1RestoreSpecPrepareDataConfigRequiredPolicyForAllPodSelection requiredPolicyForAllPodSelection) {
    
    this.requiredPolicyForAllPodSelection = requiredPolicyForAllPodSelection;
    return this;
  }

   /**
   * Get requiredPolicyForAllPodSelection
   * @return requiredPolicyForAllPodSelection
  **/
  @jakarta.annotation.Nullable
  public V1alpha1RestoreSpecPrepareDataConfigRequiredPolicyForAllPodSelection getRequiredPolicyForAllPodSelection() {
    return requiredPolicyForAllPodSelection;
  }


  public void setRequiredPolicyForAllPodSelection(V1alpha1RestoreSpecPrepareDataConfigRequiredPolicyForAllPodSelection requiredPolicyForAllPodSelection) {
    this.requiredPolicyForAllPodSelection = requiredPolicyForAllPodSelection;
  }


  public V1alpha1RestoreSpecPrepareDataConfig schedulingSpec(V1alpha1RestoreSpecPrepareDataConfigSchedulingSpec schedulingSpec) {
    
    this.schedulingSpec = schedulingSpec;
    return this;
  }

   /**
   * Get schedulingSpec
   * @return schedulingSpec
  **/
  @jakarta.annotation.Nullable
  public V1alpha1RestoreSpecPrepareDataConfigSchedulingSpec getSchedulingSpec() {
    return schedulingSpec;
  }


  public void setSchedulingSpec(V1alpha1RestoreSpecPrepareDataConfigSchedulingSpec schedulingSpec) {
    this.schedulingSpec = schedulingSpec;
  }


  public V1alpha1RestoreSpecPrepareDataConfig volumeClaimRestorePolicy(VolumeClaimRestorePolicyEnum volumeClaimRestorePolicy) {
    
    this.volumeClaimRestorePolicy = volumeClaimRestorePolicy;
    return this;
  }

   /**
   * Defines restore policy for persistent volume claim. Supported policies are as follows:   - &#x60;Parallel&#x60;: parallel recovery of persistent volume claim. - &#x60;Serial&#x60;: restore the persistent volume claim in sequence, and wait until the previous persistent volume claim is restored before restoring a new one.
   * @return volumeClaimRestorePolicy
  **/
  @jakarta.annotation.Nonnull
  public VolumeClaimRestorePolicyEnum getVolumeClaimRestorePolicy() {
    return volumeClaimRestorePolicy;
  }


  public void setVolumeClaimRestorePolicy(VolumeClaimRestorePolicyEnum volumeClaimRestorePolicy) {
    this.volumeClaimRestorePolicy = volumeClaimRestorePolicy;
  }


  public V1alpha1RestoreSpecPrepareDataConfig volumeClaims(List<V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsInner> volumeClaims) {
    
    this.volumeClaims = volumeClaims;
    return this;
  }

  public V1alpha1RestoreSpecPrepareDataConfig addVolumeClaimsItem(V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsInner volumeClaimsItem) {
    if (this.volumeClaims == null) {
      this.volumeClaims = new ArrayList<>();
    }
    this.volumeClaims.add(volumeClaimsItem);
    return this;
  }

   /**
   * Defines the persistent Volume claims that need to be restored and mounted together into the restore job. These persistent Volume claims will be created if they do not exist.
   * @return volumeClaims
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsInner> getVolumeClaims() {
    return volumeClaims;
  }


  public void setVolumeClaims(List<V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsInner> volumeClaims) {
    this.volumeClaims = volumeClaims;
  }


  public V1alpha1RestoreSpecPrepareDataConfig volumeClaimsTemplate(V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsTemplate volumeClaimsTemplate) {
    
    this.volumeClaimsTemplate = volumeClaimsTemplate;
    return this;
  }

   /**
   * Get volumeClaimsTemplate
   * @return volumeClaimsTemplate
  **/
  @jakarta.annotation.Nullable
  public V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsTemplate getVolumeClaimsTemplate() {
    return volumeClaimsTemplate;
  }


  public void setVolumeClaimsTemplate(V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsTemplate volumeClaimsTemplate) {
    this.volumeClaimsTemplate = volumeClaimsTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1RestoreSpecPrepareDataConfig v1alpha1RestoreSpecPrepareDataConfig = (V1alpha1RestoreSpecPrepareDataConfig) o;
    return Objects.equals(this.dataSourceRef, v1alpha1RestoreSpecPrepareDataConfig.dataSourceRef) &&
        Objects.equals(this.requiredPolicyForAllPodSelection, v1alpha1RestoreSpecPrepareDataConfig.requiredPolicyForAllPodSelection) &&
        Objects.equals(this.schedulingSpec, v1alpha1RestoreSpecPrepareDataConfig.schedulingSpec) &&
        Objects.equals(this.volumeClaimRestorePolicy, v1alpha1RestoreSpecPrepareDataConfig.volumeClaimRestorePolicy) &&
        Objects.equals(this.volumeClaims, v1alpha1RestoreSpecPrepareDataConfig.volumeClaims) &&
        Objects.equals(this.volumeClaimsTemplate, v1alpha1RestoreSpecPrepareDataConfig.volumeClaimsTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceRef, requiredPolicyForAllPodSelection, schedulingSpec, volumeClaimRestorePolicy, volumeClaims, volumeClaimsTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1RestoreSpecPrepareDataConfig {\n");
    sb.append("    dataSourceRef: ").append(toIndentedString(dataSourceRef)).append("\n");
    sb.append("    requiredPolicyForAllPodSelection: ").append(toIndentedString(requiredPolicyForAllPodSelection)).append("\n");
    sb.append("    schedulingSpec: ").append(toIndentedString(schedulingSpec)).append("\n");
    sb.append("    volumeClaimRestorePolicy: ").append(toIndentedString(volumeClaimRestorePolicy)).append("\n");
    sb.append("    volumeClaims: ").append(toIndentedString(volumeClaims)).append("\n");
    sb.append("    volumeClaimsTemplate: ").append(toIndentedString(volumeClaimsTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceRef");
    openapiFields.add("requiredPolicyForAllPodSelection");
    openapiFields.add("schedulingSpec");
    openapiFields.add("volumeClaimRestorePolicy");
    openapiFields.add("volumeClaims");
    openapiFields.add("volumeClaimsTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("volumeClaimRestorePolicy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1RestoreSpecPrepareDataConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1RestoreSpecPrepareDataConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1RestoreSpecPrepareDataConfig is not found in the empty JSON string", V1alpha1RestoreSpecPrepareDataConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1RestoreSpecPrepareDataConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1RestoreSpecPrepareDataConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1RestoreSpecPrepareDataConfig.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `dataSourceRef`
      if (jsonObj.get("dataSourceRef") != null && !jsonObj.get("dataSourceRef").isJsonNull()) {
        V1alpha1RestoreSpecPrepareDataConfigDataSourceRef.validateJsonObject(jsonObj.getAsJsonObject("dataSourceRef"));
      }
      // validate the optional field `requiredPolicyForAllPodSelection`
      if (jsonObj.get("requiredPolicyForAllPodSelection") != null && !jsonObj.get("requiredPolicyForAllPodSelection").isJsonNull()) {
        V1alpha1RestoreSpecPrepareDataConfigRequiredPolicyForAllPodSelection.validateJsonObject(jsonObj.getAsJsonObject("requiredPolicyForAllPodSelection"));
      }
      // validate the optional field `schedulingSpec`
      if (jsonObj.get("schedulingSpec") != null && !jsonObj.get("schedulingSpec").isJsonNull()) {
        V1alpha1RestoreSpecPrepareDataConfigSchedulingSpec.validateJsonObject(jsonObj.getAsJsonObject("schedulingSpec"));
      }
      if (!jsonObj.get("volumeClaimRestorePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeClaimRestorePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeClaimRestorePolicy").toString()));
      }
      if (jsonObj.get("volumeClaims") != null && !jsonObj.get("volumeClaims").isJsonNull()) {
        JsonArray jsonArrayvolumeClaims = jsonObj.getAsJsonArray("volumeClaims");
        if (jsonArrayvolumeClaims != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeClaims").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeClaims` to be an array in the JSON string but got `%s`", jsonObj.get("volumeClaims").toString()));
          }

          // validate the optional field `volumeClaims` (array)
          for (int i = 0; i < jsonArrayvolumeClaims.size(); i++) {
            V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsInner.validateJsonObject(jsonArrayvolumeClaims.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `volumeClaimsTemplate`
      if (jsonObj.get("volumeClaimsTemplate") != null && !jsonObj.get("volumeClaimsTemplate").isJsonNull()) {
        V1alpha1RestoreSpecPrepareDataConfigVolumeClaimsTemplate.validateJsonObject(jsonObj.getAsJsonObject("volumeClaimsTemplate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1RestoreSpecPrepareDataConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1RestoreSpecPrepareDataConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1RestoreSpecPrepareDataConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1RestoreSpecPrepareDataConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1RestoreSpecPrepareDataConfig>() {
           @Override
           public void write(JsonWriter out, V1alpha1RestoreSpecPrepareDataConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1RestoreSpecPrepareDataConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1RestoreSpecPrepareDataConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1RestoreSpecPrepareDataConfig
  * @throws IOException if the JSON string is invalid with respect to V1alpha1RestoreSpecPrepareDataConfig
  */
  public static V1alpha1RestoreSpecPrepareDataConfig fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1RestoreSpecPrepareDataConfig.class);
  }

 /**
  * Convert an instance of V1alpha1RestoreSpecPrepareDataConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

