/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.dataprotection.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.dataprotection.models.V1alpha1RestoreStatusActions;
import io.kubeblocks.dataprotection.models.V1alpha1RestoreStatusConditionsInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * RestoreStatus defines the observed state of Restore
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:00:51.636603Z[Etc/UTC]")
public class V1alpha1RestoreStatus {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private V1alpha1RestoreStatusActions actions;

  public static final String SERIALIZED_NAME_COMPLETION_TIMESTAMP = "completionTimestamp";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIMESTAMP)
  private OffsetDateTime completionTimestamp;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<V1alpha1RestoreStatusConditionsInner> conditions;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  /**
   * Represents the current phase of the restore.
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    RUNNING("Running"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed"),
    
    ASDATASOURCE("AsDataSource");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "startTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private OffsetDateTime startTimestamp;

  public V1alpha1RestoreStatus() {
  }

  public V1alpha1RestoreStatus actions(V1alpha1RestoreStatusActions actions) {
    
    this.actions = actions;
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @jakarta.annotation.Nullable
  public V1alpha1RestoreStatusActions getActions() {
    return actions;
  }


  public void setActions(V1alpha1RestoreStatusActions actions) {
    this.actions = actions;
  }


  public V1alpha1RestoreStatus completionTimestamp(OffsetDateTime completionTimestamp) {
    
    this.completionTimestamp = completionTimestamp;
    return this;
  }

   /**
   * Records the date/time when the restore finished being processed.
   * @return completionTimestamp
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getCompletionTimestamp() {
    return completionTimestamp;
  }


  public void setCompletionTimestamp(OffsetDateTime completionTimestamp) {
    this.completionTimestamp = completionTimestamp;
  }


  public V1alpha1RestoreStatus conditions(List<V1alpha1RestoreStatusConditionsInner> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public V1alpha1RestoreStatus addConditionsItem(V1alpha1RestoreStatusConditionsInner conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Describes the current state of the restore API Resource, like warning.
   * @return conditions
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1RestoreStatusConditionsInner> getConditions() {
    return conditions;
  }


  public void setConditions(List<V1alpha1RestoreStatusConditionsInner> conditions) {
    this.conditions = conditions;
  }


  public V1alpha1RestoreStatus duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Records the duration of the restore execution. When converted to a string, the form is \&quot;1h2m0.5s\&quot;.
   * @return duration
  **/
  @jakarta.annotation.Nullable
  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public V1alpha1RestoreStatus phase(PhaseEnum phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * Represents the current phase of the restore.
   * @return phase
  **/
  @jakarta.annotation.Nullable
  public PhaseEnum getPhase() {
    return phase;
  }


  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  public V1alpha1RestoreStatus startTimestamp(OffsetDateTime startTimestamp) {
    
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * Records the date/time when the restore started being processed.
   * @return startTimestamp
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getStartTimestamp() {
    return startTimestamp;
  }


  public void setStartTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1RestoreStatus v1alpha1RestoreStatus = (V1alpha1RestoreStatus) o;
    return Objects.equals(this.actions, v1alpha1RestoreStatus.actions) &&
        Objects.equals(this.completionTimestamp, v1alpha1RestoreStatus.completionTimestamp) &&
        Objects.equals(this.conditions, v1alpha1RestoreStatus.conditions) &&
        Objects.equals(this.duration, v1alpha1RestoreStatus.duration) &&
        Objects.equals(this.phase, v1alpha1RestoreStatus.phase) &&
        Objects.equals(this.startTimestamp, v1alpha1RestoreStatus.startTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, completionTimestamp, conditions, duration, phase, startTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1RestoreStatus {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    completionTimestamp: ").append(toIndentedString(completionTimestamp)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("completionTimestamp");
    openapiFields.add("conditions");
    openapiFields.add("duration");
    openapiFields.add("phase");
    openapiFields.add("startTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1RestoreStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1RestoreStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1RestoreStatus is not found in the empty JSON string", V1alpha1RestoreStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1RestoreStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1RestoreStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `actions`
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        V1alpha1RestoreStatusActions.validateJsonObject(jsonObj.getAsJsonObject("actions"));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            V1alpha1RestoreStatusConditionsInner.validateJsonObject(jsonArrayconditions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1RestoreStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1RestoreStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1RestoreStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1RestoreStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1RestoreStatus>() {
           @Override
           public void write(JsonWriter out, V1alpha1RestoreStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1RestoreStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1RestoreStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1RestoreStatus
  * @throws IOException if the JSON string is invalid with respect to V1alpha1RestoreStatus
  */
  public static V1alpha1RestoreStatus fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1RestoreStatus.class);
  }

 /**
  * Convert an instance of V1alpha1RestoreStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

