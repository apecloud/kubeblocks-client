/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Used to trigger a reload by sending a specific Unix signal to the process.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T14:34:07.299798Z[Etc/UTC]")
public class V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger {
  public static final String SERIALIZED_NAME_PROCESS_NAME = "processName";
  @SerializedName(SERIALIZED_NAME_PROCESS_NAME)
  private String processName;

  /**
   * Represents a valid Unix signal. Refer to the following URL for a list of all Unix signals: ../../pkg/configuration/configmap/handler.go:allUnixSignals
   */
  @JsonAdapter(SignalEnum.Adapter.class)
  public enum SignalEnum {
    SIGHUP("SIGHUP"),
    
    SIGINT("SIGINT"),
    
    SIGQUIT("SIGQUIT"),
    
    SIGILL("SIGILL"),
    
    SIGTRAP("SIGTRAP"),
    
    SIGABRT("SIGABRT"),
    
    SIGBUS("SIGBUS"),
    
    SIGFPE("SIGFPE"),
    
    SIGKILL("SIGKILL"),
    
    SIGUSR1("SIGUSR1"),
    
    SIGSEGV("SIGSEGV"),
    
    SIGUSR2("SIGUSR2"),
    
    SIGPIPE("SIGPIPE"),
    
    SIGALRM("SIGALRM"),
    
    SIGTERM("SIGTERM"),
    
    SIGSTKFLT("SIGSTKFLT"),
    
    SIGCHLD("SIGCHLD"),
    
    SIGCONT("SIGCONT"),
    
    SIGSTOP("SIGSTOP"),
    
    SIGTSTP("SIGTSTP"),
    
    SIGTTIN("SIGTTIN"),
    
    SIGTTOU("SIGTTOU"),
    
    SIGURG("SIGURG"),
    
    SIGXCPU("SIGXCPU"),
    
    SIGXFSZ("SIGXFSZ"),
    
    SIGVTALRM("SIGVTALRM"),
    
    SIGPROF("SIGPROF"),
    
    SIGWINCH("SIGWINCH"),
    
    SIGIO("SIGIO"),
    
    SIGPWR("SIGPWR"),
    
    SIGSYS("SIGSYS");

    private String value;

    SignalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignalEnum fromValue(String value) {
      for (SignalEnum b : SignalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIGNAL = "signal";
  @SerializedName(SERIALIZED_NAME_SIGNAL)
  private SignalEnum signal;

  public V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger() {
  }

  public V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger processName(String processName) {
    
    this.processName = processName;
    return this;
  }

   /**
   * Represents the name of the process to which the Unix signal is sent.
   * @return processName
  **/
  @jakarta.annotation.Nonnull
  public String getProcessName() {
    return processName;
  }


  public void setProcessName(String processName) {
    this.processName = processName;
  }


  public V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger signal(SignalEnum signal) {
    
    this.signal = signal;
    return this;
  }

   /**
   * Represents a valid Unix signal. Refer to the following URL for a list of all Unix signals: ../../pkg/configuration/configmap/handler.go:allUnixSignals
   * @return signal
  **/
  @jakarta.annotation.Nonnull
  public SignalEnum getSignal() {
    return signal;
  }


  public void setSignal(SignalEnum signal) {
    this.signal = signal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger v1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger = (V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger) o;
    return Objects.equals(this.processName, v1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.processName) &&
        Objects.equals(this.signal, v1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.signal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processName, signal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger {\n");
    sb.append("    processName: ").append(toIndentedString(processName)).append("\n");
    sb.append("    signal: ").append(toIndentedString(signal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("processName");
    openapiFields.add("signal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("processName");
    openapiRequiredFields.add("signal");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger is not found in the empty JSON string", V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("processName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processName").toString()));
      }
      if (!jsonObj.get("signal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger>() {
           @Override
           public void write(JsonWriter out, V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger
  */
  public static V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger.class);
  }

 /**
  * Convert an instance of V1alpha1ConfigConstraintSpecReloadOptionsUnixSignalTrigger to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

