/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRefVarsInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * varsRef defines the envs that need to be referenced from the target component pod, and will inject to job&#39;s containers. if it is set, will ignore the global \&quot;varsRef\&quot;.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T10:01:20.252122Z[Etc/UTC]")
public class V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef {
  /**
   * podSelectionStrategy how to select the target component pod for variable references based on the strategy. - PreferredAvailable: prioritize the selection of available pod. - Available: only select available pod. if not found, terminating the operation.
   */
  @JsonAdapter(PodSelectionStrategyEnum.Adapter.class)
  public enum PodSelectionStrategyEnum {
    AVAILABLE("Available"),
    
    PREFERREDAVAILABLE("PreferredAvailable");

    private String value;

    PodSelectionStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PodSelectionStrategyEnum fromValue(String value) {
      for (PodSelectionStrategyEnum b : PodSelectionStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PodSelectionStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PodSelectionStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PodSelectionStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PodSelectionStrategyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POD_SELECTION_STRATEGY = "podSelectionStrategy";
  @SerializedName(SERIALIZED_NAME_POD_SELECTION_STRATEGY)
  private PodSelectionStrategyEnum podSelectionStrategy;

  public static final String SERIALIZED_NAME_VARS = "vars";
  @SerializedName(SERIALIZED_NAME_VARS)
  private List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRefVarsInner> vars;

  public V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef() {
  }

  public V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef podSelectionStrategy(PodSelectionStrategyEnum podSelectionStrategy) {
    
    this.podSelectionStrategy = podSelectionStrategy;
    return this;
  }

   /**
   * podSelectionStrategy how to select the target component pod for variable references based on the strategy. - PreferredAvailable: prioritize the selection of available pod. - Available: only select available pod. if not found, terminating the operation.
   * @return podSelectionStrategy
  **/
  @jakarta.annotation.Nonnull
  public PodSelectionStrategyEnum getPodSelectionStrategy() {
    return podSelectionStrategy;
  }


  public void setPodSelectionStrategy(PodSelectionStrategyEnum podSelectionStrategy) {
    this.podSelectionStrategy = podSelectionStrategy;
  }


  public V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef vars(List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRefVarsInner> vars) {
    
    this.vars = vars;
    return this;
  }

  public V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef addVarsItem(V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRefVarsInner varsItem) {
    if (this.vars == null) {
      this.vars = new ArrayList<>();
    }
    this.vars.add(varsItem);
    return this;
  }

   /**
   * List of environment variables to set in the job&#39;s container.
   * @return vars
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRefVarsInner> getVars() {
    return vars;
  }


  public void setVars(List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRefVarsInner> vars) {
    this.vars = vars;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef v1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef = (V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef) o;
    return Objects.equals(this.podSelectionStrategy, v1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.podSelectionStrategy) &&
        Objects.equals(this.vars, v1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.vars);
  }

  @Override
  public int hashCode() {
    return Objects.hash(podSelectionStrategy, vars);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef {\n");
    sb.append("    podSelectionStrategy: ").append(toIndentedString(podSelectionStrategy)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("podSelectionStrategy");
    openapiFields.add("vars");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("podSelectionStrategy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef is not found in the empty JSON string", V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("podSelectionStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podSelectionStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podSelectionStrategy").toString()));
      }
      if (jsonObj.get("vars") != null && !jsonObj.get("vars").isJsonNull()) {
        JsonArray jsonArrayvars = jsonObj.getAsJsonArray("vars");
        if (jsonArrayvars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vars` to be an array in the JSON string but got `%s`", jsonObj.get("vars").toString()));
          }

          // validate the optional field `vars` (array)
          for (int i = 0; i < jsonArrayvars.size(); i++) {
            V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRefVarsInner.validateJsonObject(jsonArrayvars.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef>() {
           @Override
           public void write(JsonWriter out, V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef
  * @throws IOException if the JSON string is invalid with respect to V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef
  */
  public static V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef.class);
  }

 /**
  * Convert an instance of V1alpha1OpsDefinitionSpecComponentDefinitionRefsInnerVarsRef to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

