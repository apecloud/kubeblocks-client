/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V1alpha1BackupPolicyTemplateSpecSchedules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T07:53:54.854Z[Etc/UTC]")
public class V1alpha1BackupPolicyTemplateSpecSchedules {
  public static final String SERIALIZED_NAME_BACKUP_METHOD = "backupMethod";
  @SerializedName(SERIALIZED_NAME_BACKUP_METHOD)
  private String backupMethod;

  public static final String SERIALIZED_NAME_CRON_EXPRESSION = "cronExpression";
  @SerializedName(SERIALIZED_NAME_CRON_EXPRESSION)
  private String cronExpression;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "retentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private String retentionPeriod;


  public V1alpha1BackupPolicyTemplateSpecSchedules backupMethod(String backupMethod) {
    
    this.backupMethod = backupMethod;
    return this;
  }

   /**
   * backupMethod specifies the backup method name that is defined in backupPolicy.
   * @return backupMethod
  **/
  @ApiModelProperty(required = true, value = "backupMethod specifies the backup method name that is defined in backupPolicy.")

  public String getBackupMethod() {
    return backupMethod;
  }


  public void setBackupMethod(String backupMethod) {
    this.backupMethod = backupMethod;
  }


  public V1alpha1BackupPolicyTemplateSpecSchedules cronExpression(String cronExpression) {
    
    this.cronExpression = cronExpression;
    return this;
  }

   /**
   * the cron expression for schedule, the timezone is in UTC. see https://en.wikipedia.org/wiki/Cron.
   * @return cronExpression
  **/
  @ApiModelProperty(required = true, value = "the cron expression for schedule, the timezone is in UTC. see https://en.wikipedia.org/wiki/Cron.")

  public String getCronExpression() {
    return cronExpression;
  }


  public void setCronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
  }


  public V1alpha1BackupPolicyTemplateSpecSchedules enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * enabled specifies whether the backup schedule is enabled or not.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "enabled specifies whether the backup schedule is enabled or not.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public V1alpha1BackupPolicyTemplateSpecSchedules retentionPeriod(String retentionPeriod) {
    
    this.retentionPeriod = retentionPeriod;
    return this;
  }

   /**
   * retentionPeriod determines a duration up to which the backup should be kept. controller will remove all backups that are older than the RetentionPeriod. For example, RetentionPeriod of &#x60;30d&#x60; will keep only the backups of last 30 days. Sample duration format: - years:  2y - months:  6mo - days:   30d - hours:  12h - minutes:  30m You can also combine the above durations. For example: 30d12h30m
   * @return retentionPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "retentionPeriod determines a duration up to which the backup should be kept. controller will remove all backups that are older than the RetentionPeriod. For example, RetentionPeriod of `30d` will keep only the backups of last 30 days. Sample duration format: - years:  2y - months:  6mo - days:   30d - hours:  12h - minutes:  30m You can also combine the above durations. For example: 30d12h30m")

  public String getRetentionPeriod() {
    return retentionPeriod;
  }


  public void setRetentionPeriod(String retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1BackupPolicyTemplateSpecSchedules v1alpha1BackupPolicyTemplateSpecSchedules = (V1alpha1BackupPolicyTemplateSpecSchedules) o;
    return Objects.equals(this.backupMethod, v1alpha1BackupPolicyTemplateSpecSchedules.backupMethod) &&
        Objects.equals(this.cronExpression, v1alpha1BackupPolicyTemplateSpecSchedules.cronExpression) &&
        Objects.equals(this.enabled, v1alpha1BackupPolicyTemplateSpecSchedules.enabled) &&
        Objects.equals(this.retentionPeriod, v1alpha1BackupPolicyTemplateSpecSchedules.retentionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupMethod, cronExpression, enabled, retentionPeriod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1BackupPolicyTemplateSpecSchedules {\n");
    sb.append("    backupMethod: ").append(toIndentedString(backupMethod)).append("\n");
    sb.append("    cronExpression: ").append(toIndentedString(cronExpression)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

