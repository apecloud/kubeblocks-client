/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.27.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecComponentDefinitionRefsInner;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecJobSpec;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecParametersSchema;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecPreConditionsInner;
import io.kubeblocks.apps.models.V1alpha1OpsDefinitionSpecVarsRef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * OpsDefinitionSpec defines the desired state of OpsDefinition
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T14:34:07.299798Z[Etc/UTC]")
public class V1alpha1OpsDefinitionSpec {
  public static final String SERIALIZED_NAME_COMPONENT_DEFINITION_REFS = "componentDefinitionRefs";
  @SerializedName(SERIALIZED_NAME_COMPONENT_DEFINITION_REFS)
  private List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInner> componentDefinitionRefs;

  public static final String SERIALIZED_NAME_JOB_SPEC = "jobSpec";
  @SerializedName(SERIALIZED_NAME_JOB_SPEC)
  private V1alpha1OpsDefinitionSpecJobSpec jobSpec;

  public static final String SERIALIZED_NAME_PARAMETERS_SCHEMA = "parametersSchema";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_SCHEMA)
  private V1alpha1OpsDefinitionSpecParametersSchema parametersSchema;

  public static final String SERIALIZED_NAME_PRE_CONDITIONS = "preConditions";
  @SerializedName(SERIALIZED_NAME_PRE_CONDITIONS)
  private List<V1alpha1OpsDefinitionSpecPreConditionsInner> preConditions;

  public static final String SERIALIZED_NAME_VARS_REF = "varsRef";
  @SerializedName(SERIALIZED_NAME_VARS_REF)
  private V1alpha1OpsDefinitionSpecVarsRef varsRef;

  public V1alpha1OpsDefinitionSpec() {
  }

  public V1alpha1OpsDefinitionSpec componentDefinitionRefs(List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInner> componentDefinitionRefs) {
    
    this.componentDefinitionRefs = componentDefinitionRefs;
    return this;
  }

  public V1alpha1OpsDefinitionSpec addComponentDefinitionRefsItem(V1alpha1OpsDefinitionSpecComponentDefinitionRefsInner componentDefinitionRefsItem) {
    if (this.componentDefinitionRefs == null) {
      this.componentDefinitionRefs = new ArrayList<>();
    }
    this.componentDefinitionRefs.add(componentDefinitionRefsItem);
    return this;
  }

   /**
   * Specifies the types of componentDefinitions that are supported by the operation. It can refer to some variables of the componentDefinition. If set, any component that does not meet the conditions will be intercepted.
   * @return componentDefinitionRefs
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInner> getComponentDefinitionRefs() {
    return componentDefinitionRefs;
  }


  public void setComponentDefinitionRefs(List<V1alpha1OpsDefinitionSpecComponentDefinitionRefsInner> componentDefinitionRefs) {
    this.componentDefinitionRefs = componentDefinitionRefs;
  }


  public V1alpha1OpsDefinitionSpec jobSpec(V1alpha1OpsDefinitionSpecJobSpec jobSpec) {
    
    this.jobSpec = jobSpec;
    return this;
  }

   /**
   * Get jobSpec
   * @return jobSpec
  **/
  @jakarta.annotation.Nonnull
  public V1alpha1OpsDefinitionSpecJobSpec getJobSpec() {
    return jobSpec;
  }


  public void setJobSpec(V1alpha1OpsDefinitionSpecJobSpec jobSpec) {
    this.jobSpec = jobSpec;
  }


  public V1alpha1OpsDefinitionSpec parametersSchema(V1alpha1OpsDefinitionSpecParametersSchema parametersSchema) {
    
    this.parametersSchema = parametersSchema;
    return this;
  }

   /**
   * Get parametersSchema
   * @return parametersSchema
  **/
  @jakarta.annotation.Nullable
  public V1alpha1OpsDefinitionSpecParametersSchema getParametersSchema() {
    return parametersSchema;
  }


  public void setParametersSchema(V1alpha1OpsDefinitionSpecParametersSchema parametersSchema) {
    this.parametersSchema = parametersSchema;
  }


  public V1alpha1OpsDefinitionSpec preConditions(List<V1alpha1OpsDefinitionSpecPreConditionsInner> preConditions) {
    
    this.preConditions = preConditions;
    return this;
  }

  public V1alpha1OpsDefinitionSpec addPreConditionsItem(V1alpha1OpsDefinitionSpecPreConditionsInner preConditionsItem) {
    if (this.preConditions == null) {
      this.preConditions = new ArrayList<>();
    }
    this.preConditions.add(preConditionsItem);
    return this;
  }

   /**
   * Specifies the preconditions that must be met to run the job for the operation.
   * @return preConditions
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1OpsDefinitionSpecPreConditionsInner> getPreConditions() {
    return preConditions;
  }


  public void setPreConditions(List<V1alpha1OpsDefinitionSpecPreConditionsInner> preConditions) {
    this.preConditions = preConditions;
  }


  public V1alpha1OpsDefinitionSpec varsRef(V1alpha1OpsDefinitionSpecVarsRef varsRef) {
    
    this.varsRef = varsRef;
    return this;
  }

   /**
   * Get varsRef
   * @return varsRef
  **/
  @jakarta.annotation.Nullable
  public V1alpha1OpsDefinitionSpecVarsRef getVarsRef() {
    return varsRef;
  }


  public void setVarsRef(V1alpha1OpsDefinitionSpecVarsRef varsRef) {
    this.varsRef = varsRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1OpsDefinitionSpec v1alpha1OpsDefinitionSpec = (V1alpha1OpsDefinitionSpec) o;
    return Objects.equals(this.componentDefinitionRefs, v1alpha1OpsDefinitionSpec.componentDefinitionRefs) &&
        Objects.equals(this.jobSpec, v1alpha1OpsDefinitionSpec.jobSpec) &&
        Objects.equals(this.parametersSchema, v1alpha1OpsDefinitionSpec.parametersSchema) &&
        Objects.equals(this.preConditions, v1alpha1OpsDefinitionSpec.preConditions) &&
        Objects.equals(this.varsRef, v1alpha1OpsDefinitionSpec.varsRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentDefinitionRefs, jobSpec, parametersSchema, preConditions, varsRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1OpsDefinitionSpec {\n");
    sb.append("    componentDefinitionRefs: ").append(toIndentedString(componentDefinitionRefs)).append("\n");
    sb.append("    jobSpec: ").append(toIndentedString(jobSpec)).append("\n");
    sb.append("    parametersSchema: ").append(toIndentedString(parametersSchema)).append("\n");
    sb.append("    preConditions: ").append(toIndentedString(preConditions)).append("\n");
    sb.append("    varsRef: ").append(toIndentedString(varsRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("componentDefinitionRefs");
    openapiFields.add("jobSpec");
    openapiFields.add("parametersSchema");
    openapiFields.add("preConditions");
    openapiFields.add("varsRef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobSpec");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1OpsDefinitionSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1OpsDefinitionSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1OpsDefinitionSpec is not found in the empty JSON string", V1alpha1OpsDefinitionSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1OpsDefinitionSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1OpsDefinitionSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1OpsDefinitionSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("componentDefinitionRefs") != null && !jsonObj.get("componentDefinitionRefs").isJsonNull()) {
        JsonArray jsonArraycomponentDefinitionRefs = jsonObj.getAsJsonArray("componentDefinitionRefs");
        if (jsonArraycomponentDefinitionRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("componentDefinitionRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `componentDefinitionRefs` to be an array in the JSON string but got `%s`", jsonObj.get("componentDefinitionRefs").toString()));
          }

          // validate the optional field `componentDefinitionRefs` (array)
          for (int i = 0; i < jsonArraycomponentDefinitionRefs.size(); i++) {
            V1alpha1OpsDefinitionSpecComponentDefinitionRefsInner.validateJsonObject(jsonArraycomponentDefinitionRefs.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `jobSpec`
      V1alpha1OpsDefinitionSpecJobSpec.validateJsonObject(jsonObj.getAsJsonObject("jobSpec"));
      // validate the optional field `parametersSchema`
      if (jsonObj.get("parametersSchema") != null && !jsonObj.get("parametersSchema").isJsonNull()) {
        V1alpha1OpsDefinitionSpecParametersSchema.validateJsonObject(jsonObj.getAsJsonObject("parametersSchema"));
      }
      if (jsonObj.get("preConditions") != null && !jsonObj.get("preConditions").isJsonNull()) {
        JsonArray jsonArraypreConditions = jsonObj.getAsJsonArray("preConditions");
        if (jsonArraypreConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preConditions` to be an array in the JSON string but got `%s`", jsonObj.get("preConditions").toString()));
          }

          // validate the optional field `preConditions` (array)
          for (int i = 0; i < jsonArraypreConditions.size(); i++) {
            V1alpha1OpsDefinitionSpecPreConditionsInner.validateJsonObject(jsonArraypreConditions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `varsRef`
      if (jsonObj.get("varsRef") != null && !jsonObj.get("varsRef").isJsonNull()) {
        V1alpha1OpsDefinitionSpecVarsRef.validateJsonObject(jsonObj.getAsJsonObject("varsRef"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1OpsDefinitionSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1OpsDefinitionSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1OpsDefinitionSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1OpsDefinitionSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1OpsDefinitionSpec>() {
           @Override
           public void write(JsonWriter out, V1alpha1OpsDefinitionSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1OpsDefinitionSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1OpsDefinitionSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1OpsDefinitionSpec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1OpsDefinitionSpec
  */
  public static V1alpha1OpsDefinitionSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1alpha1OpsDefinitionSpec.class);
  }

 /**
  * Convert an instance of V1alpha1OpsDefinitionSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

