/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * affinity describes affinities specified by users.
 */
@ApiModel(description = "affinity describes affinities specified by users.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T07:24:37.743Z[Etc/UTC]")
public class V1alpha1ClusterSpecAffinity1 {
  public static final String SERIALIZED_NAME_NODE_LABELS = "nodeLabels";
  @SerializedName(SERIALIZED_NAME_NODE_LABELS)
  private Map<String, String> nodeLabels = null;

  /**
   * podAntiAffinity describes the anti-affinity level of pods within a component. Preferred means try spread pods by &#x60;TopologyKeys&#x60;. Required means must spread pods by &#x60;TopologyKeys&#x60;.
   */
  @JsonAdapter(PodAntiAffinityEnum.Adapter.class)
  public enum PodAntiAffinityEnum {
    PREFERRED("Preferred"),
    
    REQUIRED("Required");

    private String value;

    PodAntiAffinityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PodAntiAffinityEnum fromValue(String value) {
      for (PodAntiAffinityEnum b : PodAntiAffinityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PodAntiAffinityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PodAntiAffinityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PodAntiAffinityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PodAntiAffinityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POD_ANTI_AFFINITY = "podAntiAffinity";
  @SerializedName(SERIALIZED_NAME_POD_ANTI_AFFINITY)
  private PodAntiAffinityEnum podAntiAffinity;

  /**
   * tenancy describes how pods are distributed across node. SharedNode means multiple pods may share the same node. DedicatedNode means each pod runs on their own dedicated node.
   */
  @JsonAdapter(TenancyEnum.Adapter.class)
  public enum TenancyEnum {
    SHAREDNODE("SharedNode"),
    
    DEDICATEDNODE("DedicatedNode");

    private String value;

    TenancyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TenancyEnum fromValue(String value) {
      for (TenancyEnum b : TenancyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TenancyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TenancyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TenancyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TenancyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TENANCY = "tenancy";
  @SerializedName(SERIALIZED_NAME_TENANCY)
  private TenancyEnum tenancy;

  public static final String SERIALIZED_NAME_TOPOLOGY_KEYS = "topologyKeys";
  @SerializedName(SERIALIZED_NAME_TOPOLOGY_KEYS)
  private List<String> topologyKeys = null;


  public V1alpha1ClusterSpecAffinity1 nodeLabels(Map<String, String> nodeLabels) {
    
    this.nodeLabels = nodeLabels;
    return this;
  }

  public V1alpha1ClusterSpecAffinity1 putNodeLabelsItem(String key, String nodeLabelsItem) {
    if (this.nodeLabels == null) {
      this.nodeLabels = new HashMap<>();
    }
    this.nodeLabels.put(key, nodeLabelsItem);
    return this;
  }

   /**
   * nodeLabels describes that pods must be scheduled to the nodes with the specified node labels.
   * @return nodeLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "nodeLabels describes that pods must be scheduled to the nodes with the specified node labels.")

  public Map<String, String> getNodeLabels() {
    return nodeLabels;
  }


  public void setNodeLabels(Map<String, String> nodeLabels) {
    this.nodeLabels = nodeLabels;
  }


  public V1alpha1ClusterSpecAffinity1 podAntiAffinity(PodAntiAffinityEnum podAntiAffinity) {
    
    this.podAntiAffinity = podAntiAffinity;
    return this;
  }

   /**
   * podAntiAffinity describes the anti-affinity level of pods within a component. Preferred means try spread pods by &#x60;TopologyKeys&#x60;. Required means must spread pods by &#x60;TopologyKeys&#x60;.
   * @return podAntiAffinity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "podAntiAffinity describes the anti-affinity level of pods within a component. Preferred means try spread pods by `TopologyKeys`. Required means must spread pods by `TopologyKeys`.")

  public PodAntiAffinityEnum getPodAntiAffinity() {
    return podAntiAffinity;
  }


  public void setPodAntiAffinity(PodAntiAffinityEnum podAntiAffinity) {
    this.podAntiAffinity = podAntiAffinity;
  }


  public V1alpha1ClusterSpecAffinity1 tenancy(TenancyEnum tenancy) {
    
    this.tenancy = tenancy;
    return this;
  }

   /**
   * tenancy describes how pods are distributed across node. SharedNode means multiple pods may share the same node. DedicatedNode means each pod runs on their own dedicated node.
   * @return tenancy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tenancy describes how pods are distributed across node. SharedNode means multiple pods may share the same node. DedicatedNode means each pod runs on their own dedicated node.")

  public TenancyEnum getTenancy() {
    return tenancy;
  }


  public void setTenancy(TenancyEnum tenancy) {
    this.tenancy = tenancy;
  }


  public V1alpha1ClusterSpecAffinity1 topologyKeys(List<String> topologyKeys) {
    
    this.topologyKeys = topologyKeys;
    return this;
  }

  public V1alpha1ClusterSpecAffinity1 addTopologyKeysItem(String topologyKeysItem) {
    if (this.topologyKeys == null) {
      this.topologyKeys = new ArrayList<>();
    }
    this.topologyKeys.add(topologyKeysItem);
    return this;
  }

   /**
   * topologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. It&#39;s used as the topology domain for pod anti-affinity and pod spread constraint. Some well-known label keys, such as \&quot;kubernetes.io/hostname\&quot; and \&quot;topology.kubernetes.io/zone\&quot; are often used as TopologyKey, as well as any other custom label key.
   * @return topologyKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "topologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. It's used as the topology domain for pod anti-affinity and pod spread constraint. Some well-known label keys, such as \"kubernetes.io/hostname\" and \"topology.kubernetes.io/zone\" are often used as TopologyKey, as well as any other custom label key.")

  public List<String> getTopologyKeys() {
    return topologyKeys;
  }


  public void setTopologyKeys(List<String> topologyKeys) {
    this.topologyKeys = topologyKeys;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterSpecAffinity1 v1alpha1ClusterSpecAffinity1 = (V1alpha1ClusterSpecAffinity1) o;
    return Objects.equals(this.nodeLabels, v1alpha1ClusterSpecAffinity1.nodeLabels) &&
        Objects.equals(this.podAntiAffinity, v1alpha1ClusterSpecAffinity1.podAntiAffinity) &&
        Objects.equals(this.tenancy, v1alpha1ClusterSpecAffinity1.tenancy) &&
        Objects.equals(this.topologyKeys, v1alpha1ClusterSpecAffinity1.topologyKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeLabels, podAntiAffinity, tenancy, topologyKeys);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterSpecAffinity1 {\n");
    sb.append("    nodeLabels: ").append(toIndentedString(nodeLabels)).append("\n");
    sb.append("    podAntiAffinity: ").append(toIndentedString(podAntiAffinity)).append("\n");
    sb.append("    tenancy: ").append(toIndentedString(tenancy)).append("\n");
    sb.append("    topologyKeys: ").append(toIndentedString(topologyKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

