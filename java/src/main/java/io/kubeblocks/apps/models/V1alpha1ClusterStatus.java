/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ClusterStatusComponents;
import io.kubeblocks.apps.models.V1alpha1ClusterStatusConditions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ClusterStatus defines the observed state of Cluster.
 */
@ApiModel(description = "ClusterStatus defines the observed state of Cluster.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T07:24:37.743Z[Etc/UTC]")
public class V1alpha1ClusterStatus {
  public static final String SERIALIZED_NAME_CLUSTER_DEF_GENERATION = "clusterDefGeneration";
  @SerializedName(SERIALIZED_NAME_CLUSTER_DEF_GENERATION)
  private Long clusterDefGeneration;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private Map<String, V1alpha1ClusterStatusComponents> components = null;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<V1alpha1ClusterStatusConditions> conditions = null;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Long observedGeneration;

  /**
   * phase describes the phase of the Cluster, the detail information of the phases are as following: Creating: all components are in &#x60;Creating&#x60; phase. Running: all components are in &#x60;Running&#x60; phase, means the cluster is working well. Updating: all components are in &#x60;Creating&#x60;, &#x60;Running&#x60; or &#x60;Updating&#x60; phase, and at least one component is in &#x60;Creating&#x60; or &#x60;Updating&#x60; phase, means the cluster is doing an update. Stopping: at least one component is in &#x60;Stopping&#x60; phase, means the cluster is in a stop progress. Stopped: all components are in &#39;Stopped&#x60; phase, means the cluster has stopped and didn&#39;t provide any function anymore. Failed: all components are in &#x60;Failed&#x60; phase, means the cluster is unavailable. Abnormal: some components are in &#x60;Failed&#x60; or &#x60;Abnormal&#x60; phase, means the cluster in a fragile state. troubleshoot need to be done. Deleting: the cluster is being deleted.
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    CREATING("Creating"),
    
    RUNNING("Running"),
    
    UPDATING("Updating"),
    
    STOPPING("Stopping"),
    
    STOPPED("Stopped"),
    
    DELETING("Deleting"),
    
    FAILED("Failed"),
    
    ABNORMAL("Abnormal");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;


  public V1alpha1ClusterStatus clusterDefGeneration(Long clusterDefGeneration) {
    
    this.clusterDefGeneration = clusterDefGeneration;
    return this;
  }

   /**
   * clusterDefGeneration represents the generation number of ClusterDefinition referenced.
   * @return clusterDefGeneration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "clusterDefGeneration represents the generation number of ClusterDefinition referenced.")

  public Long getClusterDefGeneration() {
    return clusterDefGeneration;
  }


  public void setClusterDefGeneration(Long clusterDefGeneration) {
    this.clusterDefGeneration = clusterDefGeneration;
  }


  public V1alpha1ClusterStatus components(Map<String, V1alpha1ClusterStatusComponents> components) {
    
    this.components = components;
    return this;
  }

  public V1alpha1ClusterStatus putComponentsItem(String key, V1alpha1ClusterStatusComponents componentsItem) {
    if (this.components == null) {
      this.components = new HashMap<>();
    }
    this.components.put(key, componentsItem);
    return this;
  }

   /**
   * components record the current status information of all components of the cluster.
   * @return components
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "components record the current status information of all components of the cluster.")

  public Map<String, V1alpha1ClusterStatusComponents> getComponents() {
    return components;
  }


  public void setComponents(Map<String, V1alpha1ClusterStatusComponents> components) {
    this.components = components;
  }


  public V1alpha1ClusterStatus conditions(List<V1alpha1ClusterStatusConditions> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public V1alpha1ClusterStatus addConditionsItem(V1alpha1ClusterStatusConditions conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Describe current state of cluster API Resource, like warning.
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describe current state of cluster API Resource, like warning.")

  public List<V1alpha1ClusterStatusConditions> getConditions() {
    return conditions;
  }


  public void setConditions(List<V1alpha1ClusterStatusConditions> conditions) {
    this.conditions = conditions;
  }


  public V1alpha1ClusterStatus message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * message describes cluster details message in current phase.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "message describes cluster details message in current phase.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public V1alpha1ClusterStatus observedGeneration(Long observedGeneration) {
    
    this.observedGeneration = observedGeneration;
    return this;
  }

   /**
   * observedGeneration is the most recent generation observed for this Cluster. It corresponds to the Cluster&#39;s generation, which is updated on mutation by the API Server.
   * @return observedGeneration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "observedGeneration is the most recent generation observed for this Cluster. It corresponds to the Cluster's generation, which is updated on mutation by the API Server.")

  public Long getObservedGeneration() {
    return observedGeneration;
  }


  public void setObservedGeneration(Long observedGeneration) {
    this.observedGeneration = observedGeneration;
  }


  public V1alpha1ClusterStatus phase(PhaseEnum phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * phase describes the phase of the Cluster, the detail information of the phases are as following: Creating: all components are in &#x60;Creating&#x60; phase. Running: all components are in &#x60;Running&#x60; phase, means the cluster is working well. Updating: all components are in &#x60;Creating&#x60;, &#x60;Running&#x60; or &#x60;Updating&#x60; phase, and at least one component is in &#x60;Creating&#x60; or &#x60;Updating&#x60; phase, means the cluster is doing an update. Stopping: at least one component is in &#x60;Stopping&#x60; phase, means the cluster is in a stop progress. Stopped: all components are in &#39;Stopped&#x60; phase, means the cluster has stopped and didn&#39;t provide any function anymore. Failed: all components are in &#x60;Failed&#x60; phase, means the cluster is unavailable. Abnormal: some components are in &#x60;Failed&#x60; or &#x60;Abnormal&#x60; phase, means the cluster in a fragile state. troubleshoot need to be done. Deleting: the cluster is being deleted.
   * @return phase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "phase describes the phase of the Cluster, the detail information of the phases are as following: Creating: all components are in `Creating` phase. Running: all components are in `Running` phase, means the cluster is working well. Updating: all components are in `Creating`, `Running` or `Updating` phase, and at least one component is in `Creating` or `Updating` phase, means the cluster is doing an update. Stopping: at least one component is in `Stopping` phase, means the cluster is in a stop progress. Stopped: all components are in 'Stopped` phase, means the cluster has stopped and didn't provide any function anymore. Failed: all components are in `Failed` phase, means the cluster is unavailable. Abnormal: some components are in `Failed` or `Abnormal` phase, means the cluster in a fragile state. troubleshoot need to be done. Deleting: the cluster is being deleted.")

  public PhaseEnum getPhase() {
    return phase;
  }


  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterStatus v1alpha1ClusterStatus = (V1alpha1ClusterStatus) o;
    return Objects.equals(this.clusterDefGeneration, v1alpha1ClusterStatus.clusterDefGeneration) &&
        Objects.equals(this.components, v1alpha1ClusterStatus.components) &&
        Objects.equals(this.conditions, v1alpha1ClusterStatus.conditions) &&
        Objects.equals(this.message, v1alpha1ClusterStatus.message) &&
        Objects.equals(this.observedGeneration, v1alpha1ClusterStatus.observedGeneration) &&
        Objects.equals(this.phase, v1alpha1ClusterStatus.phase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterDefGeneration, components, conditions, message, observedGeneration, phase);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterStatus {\n");
    sb.append("    clusterDefGeneration: ").append(toIndentedString(clusterDefGeneration)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

