/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInnerServiceRefDeclarationSpecsInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-05T08:46:22.931435Z[Etc/UTC]")
public class V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_REF_DECLARATION_SPECS = "serviceRefDeclarationSpecs";
  @SerializedName(SERIALIZED_NAME_SERVICE_REF_DECLARATION_SPECS)
  private List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInnerServiceRefDeclarationSpecsInner> serviceRefDeclarationSpecs = new ArrayList<>();

  public V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner() {
  }

  public V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specifies the name of the service reference declaration.   The service reference may originate from an external service that is not part of KubeBlocks, or from services provided by other KubeBlocks Cluster objects. The specific type of service reference is determined by the binding declaration when a Cluster is created.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner serviceRefDeclarationSpecs(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInnerServiceRefDeclarationSpecsInner> serviceRefDeclarationSpecs) {
    
    this.serviceRefDeclarationSpecs = serviceRefDeclarationSpecs;
    return this;
  }

  public V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner addServiceRefDeclarationSpecsItem(V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInnerServiceRefDeclarationSpecsInner serviceRefDeclarationSpecsItem) {
    if (this.serviceRefDeclarationSpecs == null) {
      this.serviceRefDeclarationSpecs = new ArrayList<>();
    }
    this.serviceRefDeclarationSpecs.add(serviceRefDeclarationSpecsItem);
    return this;
  }

   /**
   * Represents a collection of service descriptions for a service reference declaration.   Each ServiceRefDeclarationSpec defines a service Kind and Version. When multiple ServiceRefDeclarationSpecs are defined, it implies that the ServiceRefDeclaration can be any one of the specified ServiceRefDeclarationSpecs.   For instance, when the ServiceRefDeclaration is declared to require an OLTP database, which can be either MySQL or PostgreSQL, a ServiceRefDeclarationSpec for MySQL and another for PostgreSQL can be defined. When referencing the service within the cluster, as long as the serviceKind and serviceVersion match either MySQL or PostgreSQL, it can be used.
   * @return serviceRefDeclarationSpecs
  **/
  @jakarta.annotation.Nonnull
  public List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInnerServiceRefDeclarationSpecsInner> getServiceRefDeclarationSpecs() {
    return serviceRefDeclarationSpecs;
  }


  public void setServiceRefDeclarationSpecs(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInnerServiceRefDeclarationSpecsInner> serviceRefDeclarationSpecs) {
    this.serviceRefDeclarationSpecs = serviceRefDeclarationSpecs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner v1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner = (V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner) o;
    return Objects.equals(this.name, v1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.name) &&
        Objects.equals(this.serviceRefDeclarationSpecs, v1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.serviceRefDeclarationSpecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, serviceRefDeclarationSpecs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceRefDeclarationSpecs: ").append(toIndentedString(serviceRefDeclarationSpecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("serviceRefDeclarationSpecs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("serviceRefDeclarationSpecs");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner is not found in the empty JSON string", V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("serviceRefDeclarationSpecs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceRefDeclarationSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("serviceRefDeclarationSpecs").toString()));
      }

      JsonArray jsonArrayserviceRefDeclarationSpecs = jsonObj.getAsJsonArray("serviceRefDeclarationSpecs");
      // validate the required field `serviceRefDeclarationSpecs` (array)
      for (int i = 0; i < jsonArrayserviceRefDeclarationSpecs.size(); i++) {
        V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInnerServiceRefDeclarationSpecsInner.validateJsonObject(jsonArrayserviceRefDeclarationSpecs.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner
  */
  public static V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.class);
  }

 /**
  * Convert an instance of V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

