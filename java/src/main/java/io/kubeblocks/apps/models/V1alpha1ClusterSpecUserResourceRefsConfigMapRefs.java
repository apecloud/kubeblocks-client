/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ClusterSpecUserResourceRefsConfigMap;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * V1alpha1ClusterSpecUserResourceRefsConfigMapRefs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T07:24:37.743Z[Etc/UTC]")
public class V1alpha1ClusterSpecUserResourceRefsConfigMapRefs {
  public static final String SERIALIZED_NAME_AS_VOLUME_FROM = "asVolumeFrom";
  @SerializedName(SERIALIZED_NAME_AS_VOLUME_FROM)
  private List<String> asVolumeFrom = null;

  public static final String SERIALIZED_NAME_CONFIG_MAP = "configMap";
  @SerializedName(SERIALIZED_NAME_CONFIG_MAP)
  private V1alpha1ClusterSpecUserResourceRefsConfigMap configMap;

  public static final String SERIALIZED_NAME_MOUNT_POINT = "mountPoint";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINT)
  private String mountPoint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUB_PATH = "subPath";
  @SerializedName(SERIALIZED_NAME_SUB_PATH)
  private String subPath;


  public V1alpha1ClusterSpecUserResourceRefsConfigMapRefs asVolumeFrom(List<String> asVolumeFrom) {
    
    this.asVolumeFrom = asVolumeFrom;
    return this;
  }

  public V1alpha1ClusterSpecUserResourceRefsConfigMapRefs addAsVolumeFromItem(String asVolumeFromItem) {
    if (this.asVolumeFrom == null) {
      this.asVolumeFrom = new ArrayList<>();
    }
    this.asVolumeFrom.add(asVolumeFromItem);
    return this;
  }

   /**
   * asVolumeFrom defines the list of containers where volumeMounts will be injected into.
   * @return asVolumeFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "asVolumeFrom defines the list of containers where volumeMounts will be injected into.")

  public List<String> getAsVolumeFrom() {
    return asVolumeFrom;
  }


  public void setAsVolumeFrom(List<String> asVolumeFrom) {
    this.asVolumeFrom = asVolumeFrom;
  }


  public V1alpha1ClusterSpecUserResourceRefsConfigMapRefs configMap(V1alpha1ClusterSpecUserResourceRefsConfigMap configMap) {
    
    this.configMap = configMap;
    return this;
  }

   /**
   * Get configMap
   * @return configMap
  **/
  @ApiModelProperty(required = true, value = "")

  public V1alpha1ClusterSpecUserResourceRefsConfigMap getConfigMap() {
    return configMap;
  }


  public void setConfigMap(V1alpha1ClusterSpecUserResourceRefsConfigMap configMap) {
    this.configMap = configMap;
  }


  public V1alpha1ClusterSpecUserResourceRefsConfigMapRefs mountPoint(String mountPoint) {
    
    this.mountPoint = mountPoint;
    return this;
  }

   /**
   * mountPath is the path at which to mount the volume.
   * @return mountPoint
  **/
  @ApiModelProperty(required = true, value = "mountPath is the path at which to mount the volume.")

  public String getMountPoint() {
    return mountPoint;
  }


  public void setMountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
  }


  public V1alpha1ClusterSpecUserResourceRefsConfigMapRefs name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * name is the name of the referenced the Configmap/Secret object.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "name is the name of the referenced the Configmap/Secret object.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1ClusterSpecUserResourceRefsConfigMapRefs subPath(String subPath) {
    
    this.subPath = subPath;
    return this;
  }

   /**
   * subPath is a relative file path within the volume to mount.
   * @return subPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "subPath is a relative file path within the volume to mount.")

  public String getSubPath() {
    return subPath;
  }


  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ClusterSpecUserResourceRefsConfigMapRefs v1alpha1ClusterSpecUserResourceRefsConfigMapRefs = (V1alpha1ClusterSpecUserResourceRefsConfigMapRefs) o;
    return Objects.equals(this.asVolumeFrom, v1alpha1ClusterSpecUserResourceRefsConfigMapRefs.asVolumeFrom) &&
        Objects.equals(this.configMap, v1alpha1ClusterSpecUserResourceRefsConfigMapRefs.configMap) &&
        Objects.equals(this.mountPoint, v1alpha1ClusterSpecUserResourceRefsConfigMapRefs.mountPoint) &&
        Objects.equals(this.name, v1alpha1ClusterSpecUserResourceRefsConfigMapRefs.name) &&
        Objects.equals(this.subPath, v1alpha1ClusterSpecUserResourceRefsConfigMapRefs.subPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asVolumeFrom, configMap, mountPoint, name, subPath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ClusterSpecUserResourceRefsConfigMapRefs {\n");
    sb.append("    asVolumeFrom: ").append(toIndentedString(asVolumeFrom)).append("\n");
    sb.append("    configMap: ").append(toIndentedString(configMap)).append("\n");
    sb.append("    mountPoint: ").append(toIndentedString(mountPoint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

