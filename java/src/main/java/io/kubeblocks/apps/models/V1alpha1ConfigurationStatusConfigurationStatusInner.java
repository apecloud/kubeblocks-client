/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ConfigurationStatusConfigurationStatusInnerReconcileDetail;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1alpha1ConfigurationStatusConfigurationStatusInner
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T13:57:39.807735Z[Etc/UTC]")
public class V1alpha1ConfigurationStatusConfigurationStatusInner {
  public static final String SERIALIZED_NAME_LAST_DONE_REVISION = "lastDoneRevision";
  @SerializedName(SERIALIZED_NAME_LAST_DONE_REVISION)
  private String lastDoneRevision;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Indicates the current status of the configuration item.   Possible values include \&quot;Creating\&quot;, \&quot;Init\&quot;, \&quot;Running\&quot;, \&quot;Pending\&quot;, \&quot;Merged\&quot;, \&quot;MergeFailed\&quot;, \&quot;FailedAndPause\&quot;, \&quot;Upgrading\&quot;, \&quot;Deleting\&quot;, \&quot;FailedAndRetry\&quot;, \&quot;Finished\&quot;.
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    CREATING("Creating"),
    
    INIT("Init"),
    
    RUNNING("Running"),
    
    PENDING("Pending"),
    
    MERGED("Merged"),
    
    MERGEFAILED("MergeFailed"),
    
    FAILEDANDPAUSE("FailedAndPause"),
    
    UPGRADING("Upgrading"),
    
    DELETING("Deleting"),
    
    FAILEDANDRETRY("FailedAndRetry"),
    
    FINISHED("Finished");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public static final String SERIALIZED_NAME_RECONCILE_DETAIL = "reconcileDetail";
  @SerializedName(SERIALIZED_NAME_RECONCILE_DETAIL)
  private V1alpha1ConfigurationStatusConfigurationStatusInnerReconcileDetail reconcileDetail;

  public static final String SERIALIZED_NAME_UPDATE_REVISION = "updateRevision";
  @SerializedName(SERIALIZED_NAME_UPDATE_REVISION)
  private String updateRevision;

  public V1alpha1ConfigurationStatusConfigurationStatusInner() {
  }

  public V1alpha1ConfigurationStatusConfigurationStatusInner lastDoneRevision(String lastDoneRevision) {
    
    this.lastDoneRevision = lastDoneRevision;
    return this;
  }

   /**
   * Represents the last completed revision of the configuration item. This field is optional.
   * @return lastDoneRevision
  **/
  @jakarta.annotation.Nullable
  public String getLastDoneRevision() {
    return lastDoneRevision;
  }


  public void setLastDoneRevision(String lastDoneRevision) {
    this.lastDoneRevision = lastDoneRevision;
  }


  public V1alpha1ConfigurationStatusConfigurationStatusInner message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Provides a description of any abnormal status. This field is optional.
   * @return message
  **/
  @jakarta.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public V1alpha1ConfigurationStatusConfigurationStatusInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specifies the name of the configuration template. It is a required field and must be a string of maximum 63 characters. The name should only contain lowercase alphanumeric characters, hyphens, or periods. It should start and end with an alphanumeric character.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1ConfigurationStatusConfigurationStatusInner phase(PhaseEnum phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * Indicates the current status of the configuration item.   Possible values include \&quot;Creating\&quot;, \&quot;Init\&quot;, \&quot;Running\&quot;, \&quot;Pending\&quot;, \&quot;Merged\&quot;, \&quot;MergeFailed\&quot;, \&quot;FailedAndPause\&quot;, \&quot;Upgrading\&quot;, \&quot;Deleting\&quot;, \&quot;FailedAndRetry\&quot;, \&quot;Finished\&quot;.
   * @return phase
  **/
  @jakarta.annotation.Nullable
  public PhaseEnum getPhase() {
    return phase;
  }


  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  public V1alpha1ConfigurationStatusConfigurationStatusInner reconcileDetail(V1alpha1ConfigurationStatusConfigurationStatusInnerReconcileDetail reconcileDetail) {
    
    this.reconcileDetail = reconcileDetail;
    return this;
  }

   /**
   * Get reconcileDetail
   * @return reconcileDetail
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ConfigurationStatusConfigurationStatusInnerReconcileDetail getReconcileDetail() {
    return reconcileDetail;
  }


  public void setReconcileDetail(V1alpha1ConfigurationStatusConfigurationStatusInnerReconcileDetail reconcileDetail) {
    this.reconcileDetail = reconcileDetail;
  }


  public V1alpha1ConfigurationStatusConfigurationStatusInner updateRevision(String updateRevision) {
    
    this.updateRevision = updateRevision;
    return this;
  }

   /**
   * Represents the updated revision of the configuration item. This field is optional.
   * @return updateRevision
  **/
  @jakarta.annotation.Nullable
  public String getUpdateRevision() {
    return updateRevision;
  }


  public void setUpdateRevision(String updateRevision) {
    this.updateRevision = updateRevision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ConfigurationStatusConfigurationStatusInner v1alpha1ConfigurationStatusConfigurationStatusInner = (V1alpha1ConfigurationStatusConfigurationStatusInner) o;
    return Objects.equals(this.lastDoneRevision, v1alpha1ConfigurationStatusConfigurationStatusInner.lastDoneRevision) &&
        Objects.equals(this.message, v1alpha1ConfigurationStatusConfigurationStatusInner.message) &&
        Objects.equals(this.name, v1alpha1ConfigurationStatusConfigurationStatusInner.name) &&
        Objects.equals(this.phase, v1alpha1ConfigurationStatusConfigurationStatusInner.phase) &&
        Objects.equals(this.reconcileDetail, v1alpha1ConfigurationStatusConfigurationStatusInner.reconcileDetail) &&
        Objects.equals(this.updateRevision, v1alpha1ConfigurationStatusConfigurationStatusInner.updateRevision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastDoneRevision, message, name, phase, reconcileDetail, updateRevision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ConfigurationStatusConfigurationStatusInner {\n");
    sb.append("    lastDoneRevision: ").append(toIndentedString(lastDoneRevision)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    reconcileDetail: ").append(toIndentedString(reconcileDetail)).append("\n");
    sb.append("    updateRevision: ").append(toIndentedString(updateRevision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastDoneRevision");
    openapiFields.add("message");
    openapiFields.add("name");
    openapiFields.add("phase");
    openapiFields.add("reconcileDetail");
    openapiFields.add("updateRevision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ConfigurationStatusConfigurationStatusInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ConfigurationStatusConfigurationStatusInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ConfigurationStatusConfigurationStatusInner is not found in the empty JSON string", V1alpha1ConfigurationStatusConfigurationStatusInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ConfigurationStatusConfigurationStatusInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ConfigurationStatusConfigurationStatusInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1ConfigurationStatusConfigurationStatusInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("lastDoneRevision") != null && !jsonObj.get("lastDoneRevision").isJsonNull()) && !jsonObj.get("lastDoneRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastDoneRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastDoneRevision").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      // validate the optional field `reconcileDetail`
      if (jsonObj.get("reconcileDetail") != null && !jsonObj.get("reconcileDetail").isJsonNull()) {
        V1alpha1ConfigurationStatusConfigurationStatusInnerReconcileDetail.validateJsonObject(jsonObj.getAsJsonObject("reconcileDetail"));
      }
      if ((jsonObj.get("updateRevision") != null && !jsonObj.get("updateRevision").isJsonNull()) && !jsonObj.get("updateRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateRevision").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ConfigurationStatusConfigurationStatusInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ConfigurationStatusConfigurationStatusInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ConfigurationStatusConfigurationStatusInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ConfigurationStatusConfigurationStatusInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ConfigurationStatusConfigurationStatusInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1ConfigurationStatusConfigurationStatusInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ConfigurationStatusConfigurationStatusInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ConfigurationStatusConfigurationStatusInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ConfigurationStatusConfigurationStatusInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ConfigurationStatusConfigurationStatusInner
  */
  public static V1alpha1ConfigurationStatusConfigurationStatusInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ConfigurationStatusConfigurationStatusInner.class);
  }

 /**
  * Convert an instance of V1alpha1ConfigurationStatusConfigurationStatusInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

