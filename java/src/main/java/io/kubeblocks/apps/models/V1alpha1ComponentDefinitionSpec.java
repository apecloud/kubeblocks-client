/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ClusterDefinitionSpecComponentDefsInnerConfigSpecsInner;
import io.kubeblocks.apps.models.V1alpha1ClusterDefinitionSpecComponentDefsInnerLogConfigsInner;
import io.kubeblocks.apps.models.V1alpha1ClusterDefinitionSpecComponentDefsInnerScriptSpecsInner;
import io.kubeblocks.apps.models.V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecLifecycleActions;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecMonitor;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecPolicyRulesInner;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecReplicasLimit;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecRolesInner;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecServicesInner;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecSystemAccountsInner;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecVarsInner;
import io.kubeblocks.apps.models.V1alpha1ComponentDefinitionSpecVolumesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * ComponentDefinitionSpec provides a workload component specification with attributes that strongly work with stateful workloads and day-2 operation behaviors.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-05T08:46:22.931435Z[Etc/UTC]")
public class V1alpha1ComponentDefinitionSpec {
  public static final String SERIALIZED_NAME_CONFIGS = "configs";
  @SerializedName(SERIALIZED_NAME_CONFIGS)
  private List<V1alpha1ClusterDefinitionSpecComponentDefsInnerConfigSpecsInner> configs;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LIFECYCLE_ACTIONS = "lifecycleActions";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_ACTIONS)
  private V1alpha1ComponentDefinitionSpecLifecycleActions lifecycleActions;

  public static final String SERIALIZED_NAME_LOG_CONFIGS = "logConfigs";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIGS)
  private List<V1alpha1ClusterDefinitionSpecComponentDefsInnerLogConfigsInner> logConfigs;

  public static final String SERIALIZED_NAME_MIN_READY_SECONDS = "minReadySeconds";
  @SerializedName(SERIALIZED_NAME_MIN_READY_SECONDS)
  private Integer minReadySeconds;

  public static final String SERIALIZED_NAME_MONITOR = "monitor";
  @SerializedName(SERIALIZED_NAME_MONITOR)
  private V1alpha1ComponentDefinitionSpecMonitor monitor;

  public static final String SERIALIZED_NAME_POLICY_RULES = "policyRules";
  @SerializedName(SERIALIZED_NAME_POLICY_RULES)
  private List<V1alpha1ComponentDefinitionSpecPolicyRulesInner> policyRules;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_REPLICAS_LIMIT = "replicasLimit";
  @SerializedName(SERIALIZED_NAME_REPLICAS_LIMIT)
  private V1alpha1ComponentDefinitionSpecReplicasLimit replicasLimit;

  /**
   * Defines the strategy for electing the component&#39;s active role. This field is immutable.
   */
  @JsonAdapter(RoleArbitratorEnum.Adapter.class)
  public enum RoleArbitratorEnum {
    EXTERNAL("External"),
    
    LORRY("Lorry");

    private String value;

    RoleArbitratorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleArbitratorEnum fromValue(String value) {
      for (RoleArbitratorEnum b : RoleArbitratorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleArbitratorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleArbitratorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleArbitratorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleArbitratorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE_ARBITRATOR = "roleArbitrator";
  @SerializedName(SERIALIZED_NAME_ROLE_ARBITRATOR)
  private RoleArbitratorEnum roleArbitrator;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<V1alpha1ComponentDefinitionSpecRolesInner> roles;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private Object runtime;

  public static final String SERIALIZED_NAME_SCRIPTS = "scripts";
  @SerializedName(SERIALIZED_NAME_SCRIPTS)
  private List<V1alpha1ClusterDefinitionSpecComponentDefsInnerScriptSpecsInner> scripts;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "serviceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private String serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_REF_DECLARATIONS = "serviceRefDeclarations";
  @SerializedName(SERIALIZED_NAME_SERVICE_REF_DECLARATIONS)
  private List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner> serviceRefDeclarations;

  public static final String SERIALIZED_NAME_SERVICE_VERSION = "serviceVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_VERSION)
  private String serviceVersion;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<V1alpha1ComponentDefinitionSpecServicesInner> services;

  public static final String SERIALIZED_NAME_SYSTEM_ACCOUNTS = "systemAccounts";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ACCOUNTS)
  private List<V1alpha1ComponentDefinitionSpecSystemAccountsInner> systemAccounts;

  /**
   * Defines the strategy for updating the component instance. This field is immutable.
   */
  @JsonAdapter(UpdateStrategyEnum.Adapter.class)
  public enum UpdateStrategyEnum {
    SERIAL("Serial"),
    
    BESTEFFORTPARALLEL("BestEffortParallel"),
    
    PARALLEL("Parallel");

    private String value;

    UpdateStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateStrategyEnum fromValue(String value) {
      for (UpdateStrategyEnum b : UpdateStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateStrategyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_STRATEGY = "updateStrategy";
  @SerializedName(SERIALIZED_NAME_UPDATE_STRATEGY)
  private UpdateStrategyEnum updateStrategy;

  public static final String SERIALIZED_NAME_VARS = "vars";
  @SerializedName(SERIALIZED_NAME_VARS)
  private List<V1alpha1ComponentDefinitionSpecVarsInner> vars;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<V1alpha1ComponentDefinitionSpecVolumesInner> volumes;

  public V1alpha1ComponentDefinitionSpec() {
  }

  public V1alpha1ComponentDefinitionSpec configs(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerConfigSpecsInner> configs) {
    
    this.configs = configs;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addConfigsItem(V1alpha1ClusterDefinitionSpecComponentDefsInnerConfigSpecsInner configsItem) {
    if (this.configs == null) {
      this.configs = new ArrayList<>();
    }
    this.configs.add(configsItem);
    return this;
  }

   /**
   * The configs field is provided by the provider, and finally, these configTemplateRefs will be rendered into the user&#39;s own configuration file according to the user&#39;s cluster. This field is immutable.   TODO: support referencing configs from other components or clusters.
   * @return configs
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ClusterDefinitionSpecComponentDefsInnerConfigSpecsInner> getConfigs() {
    return configs;
  }


  public void setConfigs(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerConfigSpecsInner> configs) {
    this.configs = configs;
  }


  public V1alpha1ComponentDefinitionSpec description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Provides a brief description of the component.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public V1alpha1ComponentDefinitionSpec labels(Map<String, String> labels) {
    
    this.labels = labels;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Defines static labels that will be patched to all k8s resources created for the component. If a label key conflicts with any other system labels or user-specified labels, it will be silently ignored. This field is immutable.
   * @return labels
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public V1alpha1ComponentDefinitionSpec lifecycleActions(V1alpha1ComponentDefinitionSpecLifecycleActions lifecycleActions) {
    
    this.lifecycleActions = lifecycleActions;
    return this;
  }

   /**
   * Get lifecycleActions
   * @return lifecycleActions
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ComponentDefinitionSpecLifecycleActions getLifecycleActions() {
    return lifecycleActions;
  }


  public void setLifecycleActions(V1alpha1ComponentDefinitionSpecLifecycleActions lifecycleActions) {
    this.lifecycleActions = lifecycleActions;
  }


  public V1alpha1ComponentDefinitionSpec logConfigs(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerLogConfigsInner> logConfigs) {
    
    this.logConfigs = logConfigs;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addLogConfigsItem(V1alpha1ClusterDefinitionSpecComponentDefsInnerLogConfigsInner logConfigsItem) {
    if (this.logConfigs == null) {
      this.logConfigs = new ArrayList<>();
    }
    this.logConfigs.add(logConfigsItem);
    return this;
  }

   /**
   * LogConfigs is a detailed log file config provided by the provider. This field is immutable.
   * @return logConfigs
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ClusterDefinitionSpecComponentDefsInnerLogConfigsInner> getLogConfigs() {
    return logConfigs;
  }


  public void setLogConfigs(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerLogConfigsInner> logConfigs) {
    this.logConfigs = logConfigs;
  }


  public V1alpha1ComponentDefinitionSpec minReadySeconds(Integer minReadySeconds) {
    
    this.minReadySeconds = minReadySeconds;
    return this;
  }

   /**
   * Specifies the minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
   * minimum: 0
   * @return minReadySeconds
  **/
  @jakarta.annotation.Nullable
  public Integer getMinReadySeconds() {
    return minReadySeconds;
  }


  public void setMinReadySeconds(Integer minReadySeconds) {
    this.minReadySeconds = minReadySeconds;
  }


  public V1alpha1ComponentDefinitionSpec monitor(V1alpha1ComponentDefinitionSpecMonitor monitor) {
    
    this.monitor = monitor;
    return this;
  }

   /**
   * Get monitor
   * @return monitor
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ComponentDefinitionSpecMonitor getMonitor() {
    return monitor;
  }


  public void setMonitor(V1alpha1ComponentDefinitionSpecMonitor monitor) {
    this.monitor = monitor;
  }


  public V1alpha1ComponentDefinitionSpec policyRules(List<V1alpha1ComponentDefinitionSpecPolicyRulesInner> policyRules) {
    
    this.policyRules = policyRules;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addPolicyRulesItem(V1alpha1ComponentDefinitionSpecPolicyRulesInner policyRulesItem) {
    if (this.policyRules == null) {
      this.policyRules = new ArrayList<>();
    }
    this.policyRules.add(policyRulesItem);
    return this;
  }

   /**
   * Defines the namespaced policy rules required by the component. If any rule application fails (e.g., due to lack of permissions), the provisioning of the component instance will also fail. This field is immutable.
   * @return policyRules
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ComponentDefinitionSpecPolicyRulesInner> getPolicyRules() {
    return policyRules;
  }


  public void setPolicyRules(List<V1alpha1ComponentDefinitionSpecPolicyRulesInner> policyRules) {
    this.policyRules = policyRules;
  }


  public V1alpha1ComponentDefinitionSpec provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * Specifies the name of the component provider.
   * @return provider
  **/
  @jakarta.annotation.Nullable
  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    this.provider = provider;
  }


  public V1alpha1ComponentDefinitionSpec replicasLimit(V1alpha1ComponentDefinitionSpecReplicasLimit replicasLimit) {
    
    this.replicasLimit = replicasLimit;
    return this;
  }

   /**
   * Get replicasLimit
   * @return replicasLimit
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ComponentDefinitionSpecReplicasLimit getReplicasLimit() {
    return replicasLimit;
  }


  public void setReplicasLimit(V1alpha1ComponentDefinitionSpecReplicasLimit replicasLimit) {
    this.replicasLimit = replicasLimit;
  }


  public V1alpha1ComponentDefinitionSpec roleArbitrator(RoleArbitratorEnum roleArbitrator) {
    
    this.roleArbitrator = roleArbitrator;
    return this;
  }

   /**
   * Defines the strategy for electing the component&#39;s active role. This field is immutable.
   * @return roleArbitrator
  **/
  @jakarta.annotation.Nullable
  public RoleArbitratorEnum getRoleArbitrator() {
    return roleArbitrator;
  }


  public void setRoleArbitrator(RoleArbitratorEnum roleArbitrator) {
    this.roleArbitrator = roleArbitrator;
  }


  public V1alpha1ComponentDefinitionSpec roles(List<V1alpha1ComponentDefinitionSpecRolesInner> roles) {
    
    this.roles = roles;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addRolesItem(V1alpha1ComponentDefinitionSpecRolesInner rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Defines all the roles that the component can assume. This field is immutable.
   * @return roles
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ComponentDefinitionSpecRolesInner> getRoles() {
    return roles;
  }


  public void setRoles(List<V1alpha1ComponentDefinitionSpecRolesInner> roles) {
    this.roles = roles;
  }


  public V1alpha1ComponentDefinitionSpec runtime(Object runtime) {
    
    this.runtime = runtime;
    return this;
  }

   /**
   * Primarily defines runtime information for the component, including:   - Init containers - Containers - Image - Commands - Args - Envs - Mounts - Ports - Security context - Probes - Lifecycle - Volumes   CPU and memory resource limits, as well as scheduling settings (affinity, toleration, priority), should not be configured within this structure. This field is immutable.
   * @return runtime
  **/
  @jakarta.annotation.Nonnull
  public Object getRuntime() {
    return runtime;
  }


  public void setRuntime(Object runtime) {
    this.runtime = runtime;
  }


  public V1alpha1ComponentDefinitionSpec scripts(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerScriptSpecsInner> scripts) {
    
    this.scripts = scripts;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addScriptsItem(V1alpha1ClusterDefinitionSpecComponentDefsInnerScriptSpecsInner scriptsItem) {
    if (this.scripts == null) {
      this.scripts = new ArrayList<>();
    }
    this.scripts.add(scriptsItem);
    return this;
  }

   /**
   * The scripts field is provided by the provider, and finally, these configTemplateRefs will be rendered into the user&#39;s own configuration file according to the user&#39;s cluster. This field is immutable.
   * @return scripts
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ClusterDefinitionSpecComponentDefsInnerScriptSpecsInner> getScripts() {
    return scripts;
  }


  public void setScripts(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerScriptSpecsInner> scripts) {
    this.scripts = scripts;
  }


  public V1alpha1ComponentDefinitionSpec serviceKind(String serviceKind) {
    
    this.serviceKind = serviceKind;
    return this;
  }

   /**
   * Defines the type of well-known service that the component provides (e.g., MySQL, Redis, ETCD, case insensitive). This field is immutable.
   * @return serviceKind
  **/
  @jakarta.annotation.Nullable
  public String getServiceKind() {
    return serviceKind;
  }


  public void setServiceKind(String serviceKind) {
    this.serviceKind = serviceKind;
  }


  public V1alpha1ComponentDefinitionSpec serviceRefDeclarations(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner> serviceRefDeclarations) {
    
    this.serviceRefDeclarations = serviceRefDeclarations;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addServiceRefDeclarationsItem(V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner serviceRefDeclarationsItem) {
    if (this.serviceRefDeclarations == null) {
      this.serviceRefDeclarations = new ArrayList<>();
    }
    this.serviceRefDeclarations.add(serviceRefDeclarationsItem);
    return this;
  }

   /**
   * Used to declare the service reference of the current component. This field is immutable.
   * @return serviceRefDeclarations
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner> getServiceRefDeclarations() {
    return serviceRefDeclarations;
  }


  public void setServiceRefDeclarations(List<V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner> serviceRefDeclarations) {
    this.serviceRefDeclarations = serviceRefDeclarations;
  }


  public V1alpha1ComponentDefinitionSpec serviceVersion(String serviceVersion) {
    
    this.serviceVersion = serviceVersion;
    return this;
  }

   /**
   * Specifies the version of the well-known service that the component provides. This field is immutable.
   * @return serviceVersion
  **/
  @jakarta.annotation.Nullable
  public String getServiceVersion() {
    return serviceVersion;
  }


  public void setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
  }


  public V1alpha1ComponentDefinitionSpec services(List<V1alpha1ComponentDefinitionSpecServicesInner> services) {
    
    this.services = services;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addServicesItem(V1alpha1ComponentDefinitionSpecServicesInner servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * Defines endpoints that can be used to access the component service to manage the component.   In addition, a reserved headless service will be created by default, with the name pattern &#x60;{clusterName}-{componentName}-headless&#x60;. This field is immutable.
   * @return services
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ComponentDefinitionSpecServicesInner> getServices() {
    return services;
  }


  public void setServices(List<V1alpha1ComponentDefinitionSpecServicesInner> services) {
    this.services = services;
  }


  public V1alpha1ComponentDefinitionSpec systemAccounts(List<V1alpha1ComponentDefinitionSpecSystemAccountsInner> systemAccounts) {
    
    this.systemAccounts = systemAccounts;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addSystemAccountsItem(V1alpha1ComponentDefinitionSpecSystemAccountsInner systemAccountsItem) {
    if (this.systemAccounts == null) {
      this.systemAccounts = new ArrayList<>();
    }
    this.systemAccounts.add(systemAccountsItem);
    return this;
  }

   /**
   * Defines the pre-defined system accounts required to manage the component. TODO(component): accounts KB required This field is immutable.
   * @return systemAccounts
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ComponentDefinitionSpecSystemAccountsInner> getSystemAccounts() {
    return systemAccounts;
  }


  public void setSystemAccounts(List<V1alpha1ComponentDefinitionSpecSystemAccountsInner> systemAccounts) {
    this.systemAccounts = systemAccounts;
  }


  public V1alpha1ComponentDefinitionSpec updateStrategy(UpdateStrategyEnum updateStrategy) {
    
    this.updateStrategy = updateStrategy;
    return this;
  }

   /**
   * Defines the strategy for updating the component instance. This field is immutable.
   * @return updateStrategy
  **/
  @jakarta.annotation.Nullable
  public UpdateStrategyEnum getUpdateStrategy() {
    return updateStrategy;
  }


  public void setUpdateStrategy(UpdateStrategyEnum updateStrategy) {
    this.updateStrategy = updateStrategy;
  }


  public V1alpha1ComponentDefinitionSpec vars(List<V1alpha1ComponentDefinitionSpecVarsInner> vars) {
    
    this.vars = vars;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addVarsItem(V1alpha1ComponentDefinitionSpecVarsInner varsItem) {
    if (this.vars == null) {
      this.vars = new ArrayList<>();
    }
    this.vars.add(varsItem);
    return this;
  }

   /**
   * Represents user-defined variables.   These variables can be utilized as environment variables for Pods and Actions, or to render the templates of config and script. When used as environment variables, these variables are placed in front of the environment variables declared in the Pod. This field is immutable.
   * @return vars
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ComponentDefinitionSpecVarsInner> getVars() {
    return vars;
  }


  public void setVars(List<V1alpha1ComponentDefinitionSpecVarsInner> vars) {
    this.vars = vars;
  }


  public V1alpha1ComponentDefinitionSpec volumes(List<V1alpha1ComponentDefinitionSpecVolumesInner> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public V1alpha1ComponentDefinitionSpec addVolumesItem(V1alpha1ComponentDefinitionSpecVolumesInner volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Defines the persistent volumes needed by the component. Users are responsible for providing these volumes when creating a component instance. This field is immutable.
   * @return volumes
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1ComponentDefinitionSpecVolumesInner> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<V1alpha1ComponentDefinitionSpecVolumesInner> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ComponentDefinitionSpec v1alpha1ComponentDefinitionSpec = (V1alpha1ComponentDefinitionSpec) o;
    return Objects.equals(this.configs, v1alpha1ComponentDefinitionSpec.configs) &&
        Objects.equals(this.description, v1alpha1ComponentDefinitionSpec.description) &&
        Objects.equals(this.labels, v1alpha1ComponentDefinitionSpec.labels) &&
        Objects.equals(this.lifecycleActions, v1alpha1ComponentDefinitionSpec.lifecycleActions) &&
        Objects.equals(this.logConfigs, v1alpha1ComponentDefinitionSpec.logConfigs) &&
        Objects.equals(this.minReadySeconds, v1alpha1ComponentDefinitionSpec.minReadySeconds) &&
        Objects.equals(this.monitor, v1alpha1ComponentDefinitionSpec.monitor) &&
        Objects.equals(this.policyRules, v1alpha1ComponentDefinitionSpec.policyRules) &&
        Objects.equals(this.provider, v1alpha1ComponentDefinitionSpec.provider) &&
        Objects.equals(this.replicasLimit, v1alpha1ComponentDefinitionSpec.replicasLimit) &&
        Objects.equals(this.roleArbitrator, v1alpha1ComponentDefinitionSpec.roleArbitrator) &&
        Objects.equals(this.roles, v1alpha1ComponentDefinitionSpec.roles) &&
        Objects.equals(this.runtime, v1alpha1ComponentDefinitionSpec.runtime) &&
        Objects.equals(this.scripts, v1alpha1ComponentDefinitionSpec.scripts) &&
        Objects.equals(this.serviceKind, v1alpha1ComponentDefinitionSpec.serviceKind) &&
        Objects.equals(this.serviceRefDeclarations, v1alpha1ComponentDefinitionSpec.serviceRefDeclarations) &&
        Objects.equals(this.serviceVersion, v1alpha1ComponentDefinitionSpec.serviceVersion) &&
        Objects.equals(this.services, v1alpha1ComponentDefinitionSpec.services) &&
        Objects.equals(this.systemAccounts, v1alpha1ComponentDefinitionSpec.systemAccounts) &&
        Objects.equals(this.updateStrategy, v1alpha1ComponentDefinitionSpec.updateStrategy) &&
        Objects.equals(this.vars, v1alpha1ComponentDefinitionSpec.vars) &&
        Objects.equals(this.volumes, v1alpha1ComponentDefinitionSpec.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configs, description, labels, lifecycleActions, logConfigs, minReadySeconds, monitor, policyRules, provider, replicasLimit, roleArbitrator, roles, runtime, scripts, serviceKind, serviceRefDeclarations, serviceVersion, services, systemAccounts, updateStrategy, vars, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ComponentDefinitionSpec {\n");
    sb.append("    configs: ").append(toIndentedString(configs)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lifecycleActions: ").append(toIndentedString(lifecycleActions)).append("\n");
    sb.append("    logConfigs: ").append(toIndentedString(logConfigs)).append("\n");
    sb.append("    minReadySeconds: ").append(toIndentedString(minReadySeconds)).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    policyRules: ").append(toIndentedString(policyRules)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    replicasLimit: ").append(toIndentedString(replicasLimit)).append("\n");
    sb.append("    roleArbitrator: ").append(toIndentedString(roleArbitrator)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceRefDeclarations: ").append(toIndentedString(serviceRefDeclarations)).append("\n");
    sb.append("    serviceVersion: ").append(toIndentedString(serviceVersion)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    systemAccounts: ").append(toIndentedString(systemAccounts)).append("\n");
    sb.append("    updateStrategy: ").append(toIndentedString(updateStrategy)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configs");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("lifecycleActions");
    openapiFields.add("logConfigs");
    openapiFields.add("minReadySeconds");
    openapiFields.add("monitor");
    openapiFields.add("policyRules");
    openapiFields.add("provider");
    openapiFields.add("replicasLimit");
    openapiFields.add("roleArbitrator");
    openapiFields.add("roles");
    openapiFields.add("runtime");
    openapiFields.add("scripts");
    openapiFields.add("serviceKind");
    openapiFields.add("serviceRefDeclarations");
    openapiFields.add("serviceVersion");
    openapiFields.add("services");
    openapiFields.add("systemAccounts");
    openapiFields.add("updateStrategy");
    openapiFields.add("vars");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("runtime");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ComponentDefinitionSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ComponentDefinitionSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ComponentDefinitionSpec is not found in the empty JSON string", V1alpha1ComponentDefinitionSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ComponentDefinitionSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ComponentDefinitionSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1ComponentDefinitionSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("configs") != null && !jsonObj.get("configs").isJsonNull()) {
        JsonArray jsonArrayconfigs = jsonObj.getAsJsonArray("configs");
        if (jsonArrayconfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configs` to be an array in the JSON string but got `%s`", jsonObj.get("configs").toString()));
          }

          // validate the optional field `configs` (array)
          for (int i = 0; i < jsonArrayconfigs.size(); i++) {
            V1alpha1ClusterDefinitionSpecComponentDefsInnerConfigSpecsInner.validateJsonObject(jsonArrayconfigs.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `lifecycleActions`
      if (jsonObj.get("lifecycleActions") != null && !jsonObj.get("lifecycleActions").isJsonNull()) {
        V1alpha1ComponentDefinitionSpecLifecycleActions.validateJsonObject(jsonObj.getAsJsonObject("lifecycleActions"));
      }
      if (jsonObj.get("logConfigs") != null && !jsonObj.get("logConfigs").isJsonNull()) {
        JsonArray jsonArraylogConfigs = jsonObj.getAsJsonArray("logConfigs");
        if (jsonArraylogConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("logConfigs").toString()));
          }

          // validate the optional field `logConfigs` (array)
          for (int i = 0; i < jsonArraylogConfigs.size(); i++) {
            V1alpha1ClusterDefinitionSpecComponentDefsInnerLogConfigsInner.validateJsonObject(jsonArraylogConfigs.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `monitor`
      if (jsonObj.get("monitor") != null && !jsonObj.get("monitor").isJsonNull()) {
        V1alpha1ComponentDefinitionSpecMonitor.validateJsonObject(jsonObj.getAsJsonObject("monitor"));
      }
      if (jsonObj.get("policyRules") != null && !jsonObj.get("policyRules").isJsonNull()) {
        JsonArray jsonArraypolicyRules = jsonObj.getAsJsonArray("policyRules");
        if (jsonArraypolicyRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyRules` to be an array in the JSON string but got `%s`", jsonObj.get("policyRules").toString()));
          }

          // validate the optional field `policyRules` (array)
          for (int i = 0; i < jsonArraypolicyRules.size(); i++) {
            V1alpha1ComponentDefinitionSpecPolicyRulesInner.validateJsonObject(jsonArraypolicyRules.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      // validate the optional field `replicasLimit`
      if (jsonObj.get("replicasLimit") != null && !jsonObj.get("replicasLimit").isJsonNull()) {
        V1alpha1ComponentDefinitionSpecReplicasLimit.validateJsonObject(jsonObj.getAsJsonObject("replicasLimit"));
      }
      if ((jsonObj.get("roleArbitrator") != null && !jsonObj.get("roleArbitrator").isJsonNull()) && !jsonObj.get("roleArbitrator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArbitrator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArbitrator").toString()));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            V1alpha1ComponentDefinitionSpecRolesInner.validateJsonObject(jsonArrayroles.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("scripts") != null && !jsonObj.get("scripts").isJsonNull()) {
        JsonArray jsonArrayscripts = jsonObj.getAsJsonArray("scripts");
        if (jsonArrayscripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scripts` to be an array in the JSON string but got `%s`", jsonObj.get("scripts").toString()));
          }

          // validate the optional field `scripts` (array)
          for (int i = 0; i < jsonArrayscripts.size(); i++) {
            V1alpha1ClusterDefinitionSpecComponentDefsInnerScriptSpecsInner.validateJsonObject(jsonArrayscripts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("serviceKind") != null && !jsonObj.get("serviceKind").isJsonNull()) && !jsonObj.get("serviceKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceKind").toString()));
      }
      if (jsonObj.get("serviceRefDeclarations") != null && !jsonObj.get("serviceRefDeclarations").isJsonNull()) {
        JsonArray jsonArrayserviceRefDeclarations = jsonObj.getAsJsonArray("serviceRefDeclarations");
        if (jsonArrayserviceRefDeclarations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceRefDeclarations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceRefDeclarations` to be an array in the JSON string but got `%s`", jsonObj.get("serviceRefDeclarations").toString()));
          }

          // validate the optional field `serviceRefDeclarations` (array)
          for (int i = 0; i < jsonArrayserviceRefDeclarations.size(); i++) {
            V1alpha1ClusterDefinitionSpecComponentDefsInnerServiceRefDeclarationsInner.validateJsonObject(jsonArrayserviceRefDeclarations.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("serviceVersion") != null && !jsonObj.get("serviceVersion").isJsonNull()) && !jsonObj.get("serviceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceVersion").toString()));
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            V1alpha1ComponentDefinitionSpecServicesInner.validateJsonObject(jsonArrayservices.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("systemAccounts") != null && !jsonObj.get("systemAccounts").isJsonNull()) {
        JsonArray jsonArraysystemAccounts = jsonObj.getAsJsonArray("systemAccounts");
        if (jsonArraysystemAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("systemAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `systemAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("systemAccounts").toString()));
          }

          // validate the optional field `systemAccounts` (array)
          for (int i = 0; i < jsonArraysystemAccounts.size(); i++) {
            V1alpha1ComponentDefinitionSpecSystemAccountsInner.validateJsonObject(jsonArraysystemAccounts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("updateStrategy") != null && !jsonObj.get("updateStrategy").isJsonNull()) && !jsonObj.get("updateStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateStrategy").toString()));
      }
      if (jsonObj.get("vars") != null && !jsonObj.get("vars").isJsonNull()) {
        JsonArray jsonArrayvars = jsonObj.getAsJsonArray("vars");
        if (jsonArrayvars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vars` to be an array in the JSON string but got `%s`", jsonObj.get("vars").toString()));
          }

          // validate the optional field `vars` (array)
          for (int i = 0; i < jsonArrayvars.size(); i++) {
            V1alpha1ComponentDefinitionSpecVarsInner.validateJsonObject(jsonArrayvars.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            V1alpha1ComponentDefinitionSpecVolumesInner.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ComponentDefinitionSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ComponentDefinitionSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ComponentDefinitionSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ComponentDefinitionSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ComponentDefinitionSpec>() {
           @Override
           public void write(JsonWriter out, V1alpha1ComponentDefinitionSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ComponentDefinitionSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ComponentDefinitionSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ComponentDefinitionSpec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ComponentDefinitionSpec
  */
  public static V1alpha1ComponentDefinitionSpec fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ComponentDefinitionSpec.class);
  }

 /**
  * Convert an instance of V1alpha1ComponentDefinitionSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

