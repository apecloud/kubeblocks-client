/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * backupSpec defines how to backup the cluster.
 */
@ApiModel(description = "backupSpec defines how to backup the cluster.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-01T05:38:56.141Z[Etc/UTC]")
public class V1alpha1OpsRequestSpecBackupSpec {
  public static final String SERIALIZED_NAME_BACKUP_METHOD = "backupMethod";
  @SerializedName(SERIALIZED_NAME_BACKUP_METHOD)
  private String backupMethod;

  public static final String SERIALIZED_NAME_BACKUP_NAME = "backupName";
  @SerializedName(SERIALIZED_NAME_BACKUP_NAME)
  private String backupName;

  public static final String SERIALIZED_NAME_BACKUP_POLICY_NAME = "backupPolicyName";
  @SerializedName(SERIALIZED_NAME_BACKUP_POLICY_NAME)
  private String backupPolicyName;

  /**
   * deletionPolicy determines whether the backup contents stored in backup repository should be deleted when the backup custom resource is deleted. Supported values are \&quot;Retain\&quot; and \&quot;Delete\&quot;. \&quot;Retain\&quot; means that the backup content and its physical snapshot on backup repository are kept. \&quot;Delete\&quot; means that the backup content and its physical snapshot on backup repository are deleted.
   */
  @JsonAdapter(DeletionPolicyEnum.Adapter.class)
  public enum DeletionPolicyEnum {
    DELETE("Delete"),
    
    RETAIN("Retain");

    private String value;

    DeletionPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeletionPolicyEnum fromValue(String value) {
      for (DeletionPolicyEnum b : DeletionPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeletionPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeletionPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeletionPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeletionPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELETION_POLICY = "deletionPolicy";
  @SerializedName(SERIALIZED_NAME_DELETION_POLICY)
  private DeletionPolicyEnum deletionPolicy;

  public static final String SERIALIZED_NAME_PARENT_BACKUP_NAME = "parentBackupName";
  @SerializedName(SERIALIZED_NAME_PARENT_BACKUP_NAME)
  private String parentBackupName;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "retentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private String retentionPeriod;


  public V1alpha1OpsRequestSpecBackupSpec backupMethod(String backupMethod) {
    
    this.backupMethod = backupMethod;
    return this;
  }

   /**
   * Backup method name that is defined in backupPolicy.
   * @return backupMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Backup method name that is defined in backupPolicy.")

  public String getBackupMethod() {
    return backupMethod;
  }


  public void setBackupMethod(String backupMethod) {
    this.backupMethod = backupMethod;
  }


  public V1alpha1OpsRequestSpecBackupSpec backupName(String backupName) {
    
    this.backupName = backupName;
    return this;
  }

   /**
   * backupName is the name of the backup.
   * @return backupName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "backupName is the name of the backup.")

  public String getBackupName() {
    return backupName;
  }


  public void setBackupName(String backupName) {
    this.backupName = backupName;
  }


  public V1alpha1OpsRequestSpecBackupSpec backupPolicyName(String backupPolicyName) {
    
    this.backupPolicyName = backupPolicyName;
    return this;
  }

   /**
   * Which backupPolicy is applied to perform this backup
   * @return backupPolicyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Which backupPolicy is applied to perform this backup")

  public String getBackupPolicyName() {
    return backupPolicyName;
  }


  public void setBackupPolicyName(String backupPolicyName) {
    this.backupPolicyName = backupPolicyName;
  }


  public V1alpha1OpsRequestSpecBackupSpec deletionPolicy(DeletionPolicyEnum deletionPolicy) {
    
    this.deletionPolicy = deletionPolicy;
    return this;
  }

   /**
   * deletionPolicy determines whether the backup contents stored in backup repository should be deleted when the backup custom resource is deleted. Supported values are \&quot;Retain\&quot; and \&quot;Delete\&quot;. \&quot;Retain\&quot; means that the backup content and its physical snapshot on backup repository are kept. \&quot;Delete\&quot; means that the backup content and its physical snapshot on backup repository are deleted.
   * @return deletionPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "deletionPolicy determines whether the backup contents stored in backup repository should be deleted when the backup custom resource is deleted. Supported values are \"Retain\" and \"Delete\". \"Retain\" means that the backup content and its physical snapshot on backup repository are kept. \"Delete\" means that the backup content and its physical snapshot on backup repository are deleted.")

  public DeletionPolicyEnum getDeletionPolicy() {
    return deletionPolicy;
  }


  public void setDeletionPolicy(DeletionPolicyEnum deletionPolicy) {
    this.deletionPolicy = deletionPolicy;
  }


  public V1alpha1OpsRequestSpecBackupSpec parentBackupName(String parentBackupName) {
    
    this.parentBackupName = parentBackupName;
    return this;
  }

   /**
   * if backupType is incremental, parentBackupName is required.
   * @return parentBackupName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if backupType is incremental, parentBackupName is required.")

  public String getParentBackupName() {
    return parentBackupName;
  }


  public void setParentBackupName(String parentBackupName) {
    this.parentBackupName = parentBackupName;
  }


  public V1alpha1OpsRequestSpecBackupSpec retentionPeriod(String retentionPeriod) {
    
    this.retentionPeriod = retentionPeriod;
    return this;
  }

   /**
   * retentionPeriod determines a duration up to which the backup should be kept. Controller will remove all backups that are older than the RetentionPeriod. For example, RetentionPeriod of &#x60;30d&#x60; will keep only the backups of last 30 days. Sample duration format: - years:  2y - months:  6mo - days:   30d - hours:  12h - minutes:  30m You can also combine the above durations. For example: 30d12h30m. If not set, the backup will be kept forever.
   * @return retentionPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "retentionPeriod determines a duration up to which the backup should be kept. Controller will remove all backups that are older than the RetentionPeriod. For example, RetentionPeriod of `30d` will keep only the backups of last 30 days. Sample duration format: - years:  2y - months:  6mo - days:   30d - hours:  12h - minutes:  30m You can also combine the above durations. For example: 30d12h30m. If not set, the backup will be kept forever.")

  public String getRetentionPeriod() {
    return retentionPeriod;
  }


  public void setRetentionPeriod(String retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1OpsRequestSpecBackupSpec v1alpha1OpsRequestSpecBackupSpec = (V1alpha1OpsRequestSpecBackupSpec) o;
    return Objects.equals(this.backupMethod, v1alpha1OpsRequestSpecBackupSpec.backupMethod) &&
        Objects.equals(this.backupName, v1alpha1OpsRequestSpecBackupSpec.backupName) &&
        Objects.equals(this.backupPolicyName, v1alpha1OpsRequestSpecBackupSpec.backupPolicyName) &&
        Objects.equals(this.deletionPolicy, v1alpha1OpsRequestSpecBackupSpec.deletionPolicy) &&
        Objects.equals(this.parentBackupName, v1alpha1OpsRequestSpecBackupSpec.parentBackupName) &&
        Objects.equals(this.retentionPeriod, v1alpha1OpsRequestSpecBackupSpec.retentionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupMethod, backupName, backupPolicyName, deletionPolicy, parentBackupName, retentionPeriod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1OpsRequestSpecBackupSpec {\n");
    sb.append("    backupMethod: ").append(toIndentedString(backupMethod)).append("\n");
    sb.append("    backupName: ").append(toIndentedString(backupName)).append("\n");
    sb.append("    backupPolicyName: ").append(toIndentedString(backupPolicyName)).append("\n");
    sb.append("    deletionPolicy: ").append(toIndentedString(deletionPolicy)).append("\n");
    sb.append("    parentBackupName: ").append(toIndentedString(parentBackupName)).append("\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

