/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.apps.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.apps.models.V1alpha1ServiceDescriptorSpecAuth;
import io.kubeblocks.apps.models.V1alpha1ServiceDescriptorSpecEndpoint;
import io.kubeblocks.apps.models.V1alpha1ServiceDescriptorSpecHost;
import io.kubeblocks.apps.models.V1alpha1ServiceDescriptorSpecPort;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * ServiceDescriptorSpec defines the desired state of ServiceDescriptor.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T13:58:21.605056Z[Etc/UTC]")
public class V1alpha1ServiceDescriptorSpec {
  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private V1alpha1ServiceDescriptorSpecAuth auth;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private V1alpha1ServiceDescriptorSpecEndpoint endpoint;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private V1alpha1ServiceDescriptorSpecHost host;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private V1alpha1ServiceDescriptorSpecPort port;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "serviceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private String serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_VERSION = "serviceVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_VERSION)
  private String serviceVersion;

  public V1alpha1ServiceDescriptorSpec() {
  }

  public V1alpha1ServiceDescriptorSpec auth(V1alpha1ServiceDescriptorSpecAuth auth) {
    
    this.auth = auth;
    return this;
  }

   /**
   * Get auth
   * @return auth
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ServiceDescriptorSpecAuth getAuth() {
    return auth;
  }


  public void setAuth(V1alpha1ServiceDescriptorSpecAuth auth) {
    this.auth = auth;
  }


  public V1alpha1ServiceDescriptorSpec endpoint(V1alpha1ServiceDescriptorSpecEndpoint endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ServiceDescriptorSpecEndpoint getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(V1alpha1ServiceDescriptorSpecEndpoint endpoint) {
    this.endpoint = endpoint;
  }


  public V1alpha1ServiceDescriptorSpec host(V1alpha1ServiceDescriptorSpecHost host) {
    
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ServiceDescriptorSpecHost getHost() {
    return host;
  }


  public void setHost(V1alpha1ServiceDescriptorSpecHost host) {
    this.host = host;
  }


  public V1alpha1ServiceDescriptorSpec port(V1alpha1ServiceDescriptorSpecPort port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @jakarta.annotation.Nullable
  public V1alpha1ServiceDescriptorSpecPort getPort() {
    return port;
  }


  public void setPort(V1alpha1ServiceDescriptorSpecPort port) {
    this.port = port;
  }


  public V1alpha1ServiceDescriptorSpec serviceKind(String serviceKind) {
    
    this.serviceKind = serviceKind;
    return this;
  }

   /**
   * Describes the type of database service provided by the external service. For example, \&quot;mysql\&quot;, \&quot;redis\&quot;, \&quot;mongodb\&quot;. This field categorizes databases by their functionality, protocol and compatibility, facilitating appropriate service integration based on their unique capabilities.   This field is case-insensitive.   It also supports abbreviations for some well-known databases: - \&quot;pg\&quot;, \&quot;pgsql\&quot;, \&quot;postgres\&quot;, \&quot;postgresql\&quot;: PostgreSQL service - \&quot;zk\&quot;, \&quot;zookeeper\&quot;: ZooKeeper service - \&quot;es\&quot;, \&quot;elasticsearch\&quot;: Elasticsearch service - \&quot;mongo\&quot;, \&quot;mongodb\&quot;: MongoDB service - \&quot;ch\&quot;, \&quot;clickhouse\&quot;: ClickHouse service
   * @return serviceKind
  **/
  @jakarta.annotation.Nonnull
  public String getServiceKind() {
    return serviceKind;
  }


  public void setServiceKind(String serviceKind) {
    this.serviceKind = serviceKind;
  }


  public V1alpha1ServiceDescriptorSpec serviceVersion(String serviceVersion) {
    
    this.serviceVersion = serviceVersion;
    return this;
  }

   /**
   * Describes the version of the service provided by the external service. This is crucial for ensuring compatibility between different components of the system, as different versions of a service may have varying features.
   * @return serviceVersion
  **/
  @jakarta.annotation.Nonnull
  public String getServiceVersion() {
    return serviceVersion;
  }


  public void setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ServiceDescriptorSpec v1alpha1ServiceDescriptorSpec = (V1alpha1ServiceDescriptorSpec) o;
    return Objects.equals(this.auth, v1alpha1ServiceDescriptorSpec.auth) &&
        Objects.equals(this.endpoint, v1alpha1ServiceDescriptorSpec.endpoint) &&
        Objects.equals(this.host, v1alpha1ServiceDescriptorSpec.host) &&
        Objects.equals(this.port, v1alpha1ServiceDescriptorSpec.port) &&
        Objects.equals(this.serviceKind, v1alpha1ServiceDescriptorSpec.serviceKind) &&
        Objects.equals(this.serviceVersion, v1alpha1ServiceDescriptorSpec.serviceVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auth, endpoint, host, port, serviceKind, serviceVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ServiceDescriptorSpec {\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceVersion: ").append(toIndentedString(serviceVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth");
    openapiFields.add("endpoint");
    openapiFields.add("host");
    openapiFields.add("port");
    openapiFields.add("serviceKind");
    openapiFields.add("serviceVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serviceKind");
    openapiRequiredFields.add("serviceVersion");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1ServiceDescriptorSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1ServiceDescriptorSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1ServiceDescriptorSpec is not found in the empty JSON string", V1alpha1ServiceDescriptorSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1ServiceDescriptorSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1ServiceDescriptorSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1ServiceDescriptorSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `auth`
      if (jsonObj.get("auth") != null && !jsonObj.get("auth").isJsonNull()) {
        V1alpha1ServiceDescriptorSpecAuth.validateJsonObject(jsonObj.getAsJsonObject("auth"));
      }
      // validate the optional field `endpoint`
      if (jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) {
        V1alpha1ServiceDescriptorSpecEndpoint.validateJsonObject(jsonObj.getAsJsonObject("endpoint"));
      }
      // validate the optional field `host`
      if (jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) {
        V1alpha1ServiceDescriptorSpecHost.validateJsonObject(jsonObj.getAsJsonObject("host"));
      }
      // validate the optional field `port`
      if (jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) {
        V1alpha1ServiceDescriptorSpecPort.validateJsonObject(jsonObj.getAsJsonObject("port"));
      }
      if (!jsonObj.get("serviceKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceKind").toString()));
      }
      if (!jsonObj.get("serviceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1ServiceDescriptorSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1ServiceDescriptorSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1ServiceDescriptorSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1ServiceDescriptorSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1ServiceDescriptorSpec>() {
           @Override
           public void write(JsonWriter out, V1alpha1ServiceDescriptorSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1ServiceDescriptorSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1ServiceDescriptorSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1ServiceDescriptorSpec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1ServiceDescriptorSpec
  */
  public static V1alpha1ServiceDescriptorSpec fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1ServiceDescriptorSpec.class);
  }

 /**
  * Convert an instance of V1alpha1ServiceDescriptorSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

