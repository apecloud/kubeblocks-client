/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.storage.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.storage.models.V1alpha1StorageProviderSpecParametersSchema;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * StorageProviderSpec defines the desired state of &#x60;StorageProvider&#x60;.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:02:56.692030Z[Etc/UTC]")
public class V1alpha1StorageProviderSpec {
  public static final String SERIALIZED_NAME_CSI_DRIVER_NAME = "csiDriverName";
  @SerializedName(SERIALIZED_NAME_CSI_DRIVER_NAME)
  private String csiDriverName;

  public static final String SERIALIZED_NAME_CSI_DRIVER_SECRET_TEMPLATE = "csiDriverSecretTemplate";
  @SerializedName(SERIALIZED_NAME_CSI_DRIVER_SECRET_TEMPLATE)
  private String csiDriverSecretTemplate;

  public static final String SERIALIZED_NAME_DATASAFED_CONFIG_TEMPLATE = "datasafedConfigTemplate";
  @SerializedName(SERIALIZED_NAME_DATASAFED_CONFIG_TEMPLATE)
  private String datasafedConfigTemplate;

  public static final String SERIALIZED_NAME_PARAMETERS_SCHEMA = "parametersSchema";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_SCHEMA)
  private V1alpha1StorageProviderSpecParametersSchema parametersSchema;

  public static final String SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM_TEMPLATE = "persistentVolumeClaimTemplate";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM_TEMPLATE)
  private String persistentVolumeClaimTemplate;

  public static final String SERIALIZED_NAME_STORAGE_CLASS_TEMPLATE = "storageClassTemplate";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS_TEMPLATE)
  private String storageClassTemplate;

  public V1alpha1StorageProviderSpec() {
  }

  public V1alpha1StorageProviderSpec csiDriverName(String csiDriverName) {
    
    this.csiDriverName = csiDriverName;
    return this;
  }

   /**
   * Specifies the name of the CSI driver used to access remote storage. This field can be empty, it indicates that the storage is not accessible via CSI.
   * @return csiDriverName
  **/
  @jakarta.annotation.Nullable
  public String getCsiDriverName() {
    return csiDriverName;
  }


  public void setCsiDriverName(String csiDriverName) {
    this.csiDriverName = csiDriverName;
  }


  public V1alpha1StorageProviderSpec csiDriverSecretTemplate(String csiDriverSecretTemplate) {
    
    this.csiDriverSecretTemplate = csiDriverSecretTemplate;
    return this;
  }

   /**
   * A Go template that used to render and generate &#x60;k8s.io/api/core/v1.Secret&#x60; resources for a specific CSI driver. For example, &#x60;accessKey&#x60; and &#x60;secretKey&#x60; needed by CSI-S3 are stored in this &#x60;Secret&#x60; resource.
   * @return csiDriverSecretTemplate
  **/
  @jakarta.annotation.Nullable
  public String getCsiDriverSecretTemplate() {
    return csiDriverSecretTemplate;
  }


  public void setCsiDriverSecretTemplate(String csiDriverSecretTemplate) {
    this.csiDriverSecretTemplate = csiDriverSecretTemplate;
  }


  public V1alpha1StorageProviderSpec datasafedConfigTemplate(String datasafedConfigTemplate) {
    
    this.datasafedConfigTemplate = datasafedConfigTemplate;
    return this;
  }

   /**
   * A Go template used to render and generate &#x60;k8s.io/api/core/v1.Secret&#x60;. This &#x60;Secret&#x60; involves the configuration details required by the &#x60;datasafed&#x60; tool to access remote storage. For example, the &#x60;Secret&#x60; should contain &#x60;endpoint&#x60;, &#x60;bucket&#x60;, &#39;region&#39;, &#39;accessKey&#39;, &#39;secretKey&#39;, or something else for S3 storage. This field can be empty, it means this kind of storage is not accessible via the &#x60;datasafed&#x60; tool.
   * @return datasafedConfigTemplate
  **/
  @jakarta.annotation.Nullable
  public String getDatasafedConfigTemplate() {
    return datasafedConfigTemplate;
  }


  public void setDatasafedConfigTemplate(String datasafedConfigTemplate) {
    this.datasafedConfigTemplate = datasafedConfigTemplate;
  }


  public V1alpha1StorageProviderSpec parametersSchema(V1alpha1StorageProviderSpecParametersSchema parametersSchema) {
    
    this.parametersSchema = parametersSchema;
    return this;
  }

   /**
   * Get parametersSchema
   * @return parametersSchema
  **/
  @jakarta.annotation.Nullable
  public V1alpha1StorageProviderSpecParametersSchema getParametersSchema() {
    return parametersSchema;
  }


  public void setParametersSchema(V1alpha1StorageProviderSpecParametersSchema parametersSchema) {
    this.parametersSchema = parametersSchema;
  }


  public V1alpha1StorageProviderSpec persistentVolumeClaimTemplate(String persistentVolumeClaimTemplate) {
    
    this.persistentVolumeClaimTemplate = persistentVolumeClaimTemplate;
    return this;
  }

   /**
   * A Go template that renders and generates &#x60;k8s.io/api/core/v1.PersistentVolumeClaim&#x60; resources. This PVC can reference the &#x60;StorageClass&#x60; created from &#x60;storageClassTemplate&#x60;, allowing Pods to access remote storage by mounting the PVC.
   * @return persistentVolumeClaimTemplate
  **/
  @jakarta.annotation.Nullable
  public String getPersistentVolumeClaimTemplate() {
    return persistentVolumeClaimTemplate;
  }


  public void setPersistentVolumeClaimTemplate(String persistentVolumeClaimTemplate) {
    this.persistentVolumeClaimTemplate = persistentVolumeClaimTemplate;
  }


  public V1alpha1StorageProviderSpec storageClassTemplate(String storageClassTemplate) {
    
    this.storageClassTemplate = storageClassTemplate;
    return this;
  }

   /**
   * A Go template utilized to render and generate &#x60;kubernetes.storage.k8s.io.v1.StorageClass&#x60; resources. The &#x60;StorageClass&#39; created by this template is aimed at using the CSI driver.
   * @return storageClassTemplate
  **/
  @jakarta.annotation.Nullable
  public String getStorageClassTemplate() {
    return storageClassTemplate;
  }


  public void setStorageClassTemplate(String storageClassTemplate) {
    this.storageClassTemplate = storageClassTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1StorageProviderSpec v1alpha1StorageProviderSpec = (V1alpha1StorageProviderSpec) o;
    return Objects.equals(this.csiDriverName, v1alpha1StorageProviderSpec.csiDriverName) &&
        Objects.equals(this.csiDriverSecretTemplate, v1alpha1StorageProviderSpec.csiDriverSecretTemplate) &&
        Objects.equals(this.datasafedConfigTemplate, v1alpha1StorageProviderSpec.datasafedConfigTemplate) &&
        Objects.equals(this.parametersSchema, v1alpha1StorageProviderSpec.parametersSchema) &&
        Objects.equals(this.persistentVolumeClaimTemplate, v1alpha1StorageProviderSpec.persistentVolumeClaimTemplate) &&
        Objects.equals(this.storageClassTemplate, v1alpha1StorageProviderSpec.storageClassTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csiDriverName, csiDriverSecretTemplate, datasafedConfigTemplate, parametersSchema, persistentVolumeClaimTemplate, storageClassTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1StorageProviderSpec {\n");
    sb.append("    csiDriverName: ").append(toIndentedString(csiDriverName)).append("\n");
    sb.append("    csiDriverSecretTemplate: ").append(toIndentedString(csiDriverSecretTemplate)).append("\n");
    sb.append("    datasafedConfigTemplate: ").append(toIndentedString(datasafedConfigTemplate)).append("\n");
    sb.append("    parametersSchema: ").append(toIndentedString(parametersSchema)).append("\n");
    sb.append("    persistentVolumeClaimTemplate: ").append(toIndentedString(persistentVolumeClaimTemplate)).append("\n");
    sb.append("    storageClassTemplate: ").append(toIndentedString(storageClassTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("csiDriverName");
    openapiFields.add("csiDriverSecretTemplate");
    openapiFields.add("datasafedConfigTemplate");
    openapiFields.add("parametersSchema");
    openapiFields.add("persistentVolumeClaimTemplate");
    openapiFields.add("storageClassTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1StorageProviderSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1StorageProviderSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1StorageProviderSpec is not found in the empty JSON string", V1alpha1StorageProviderSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1StorageProviderSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1StorageProviderSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("csiDriverName") != null && !jsonObj.get("csiDriverName").isJsonNull()) && !jsonObj.get("csiDriverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csiDriverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csiDriverName").toString()));
      }
      if ((jsonObj.get("csiDriverSecretTemplate") != null && !jsonObj.get("csiDriverSecretTemplate").isJsonNull()) && !jsonObj.get("csiDriverSecretTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csiDriverSecretTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csiDriverSecretTemplate").toString()));
      }
      if ((jsonObj.get("datasafedConfigTemplate") != null && !jsonObj.get("datasafedConfigTemplate").isJsonNull()) && !jsonObj.get("datasafedConfigTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasafedConfigTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasafedConfigTemplate").toString()));
      }
      // validate the optional field `parametersSchema`
      if (jsonObj.get("parametersSchema") != null && !jsonObj.get("parametersSchema").isJsonNull()) {
        V1alpha1StorageProviderSpecParametersSchema.validateJsonObject(jsonObj.getAsJsonObject("parametersSchema"));
      }
      if ((jsonObj.get("persistentVolumeClaimTemplate") != null && !jsonObj.get("persistentVolumeClaimTemplate").isJsonNull()) && !jsonObj.get("persistentVolumeClaimTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistentVolumeClaimTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistentVolumeClaimTemplate").toString()));
      }
      if ((jsonObj.get("storageClassTemplate") != null && !jsonObj.get("storageClassTemplate").isJsonNull()) && !jsonObj.get("storageClassTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClassTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClassTemplate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1StorageProviderSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1StorageProviderSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1StorageProviderSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1StorageProviderSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1StorageProviderSpec>() {
           @Override
           public void write(JsonWriter out, V1alpha1StorageProviderSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1StorageProviderSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1StorageProviderSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1StorageProviderSpec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1StorageProviderSpec
  */
  public static V1alpha1StorageProviderSpec fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1StorageProviderSpec.class);
  }

 /**
  * Convert an instance of V1alpha1StorageProviderSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

