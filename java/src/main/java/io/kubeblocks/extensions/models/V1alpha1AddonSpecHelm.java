/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.extensions.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecHelmInstallValues;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecHelmValuesMapping;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Represents the Helm installation specifications. This is only processed when the type is set to &#39;helm&#39;.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:02:35.998799Z[Etc/UTC]")
public class V1alpha1AddonSpecHelm {
  public static final String SERIALIZED_NAME_CHART_LOCATION_U_R_L = "chartLocationURL";
  @SerializedName(SERIALIZED_NAME_CHART_LOCATION_U_R_L)
  private String chartLocationURL;

  public static final String SERIALIZED_NAME_CHARTS_IMAGE = "chartsImage";
  @SerializedName(SERIALIZED_NAME_CHARTS_IMAGE)
  private String chartsImage;

  public static final String SERIALIZED_NAME_CHARTS_PATH_IN_IMAGE = "chartsPathInImage";
  @SerializedName(SERIALIZED_NAME_CHARTS_PATH_IN_IMAGE)
  private String chartsPathInImage;

  public static final String SERIALIZED_NAME_INSTALL_OPTIONS = "installOptions";
  @SerializedName(SERIALIZED_NAME_INSTALL_OPTIONS)
  private Map<String, String> installOptions = new HashMap<>();

  public static final String SERIALIZED_NAME_INSTALL_VALUES = "installValues";
  @SerializedName(SERIALIZED_NAME_INSTALL_VALUES)
  private V1alpha1AddonSpecHelmInstallValues installValues;

  public static final String SERIALIZED_NAME_VALUES_MAPPING = "valuesMapping";
  @SerializedName(SERIALIZED_NAME_VALUES_MAPPING)
  private V1alpha1AddonSpecHelmValuesMapping valuesMapping;

  public V1alpha1AddonSpecHelm() {
  }

  public V1alpha1AddonSpecHelm chartLocationURL(String chartLocationURL) {
    
    this.chartLocationURL = chartLocationURL;
    return this;
  }

   /**
   * Specifies the URL location of the Helm Chart.
   * @return chartLocationURL
  **/
  @jakarta.annotation.Nonnull
  public String getChartLocationURL() {
    return chartLocationURL;
  }


  public void setChartLocationURL(String chartLocationURL) {
    this.chartLocationURL = chartLocationURL;
  }


  public V1alpha1AddonSpecHelm chartsImage(String chartsImage) {
    
    this.chartsImage = chartsImage;
    return this;
  }

   /**
   * Defines the image of Helm charts.
   * @return chartsImage
  **/
  @jakarta.annotation.Nullable
  public String getChartsImage() {
    return chartsImage;
  }


  public void setChartsImage(String chartsImage) {
    this.chartsImage = chartsImage;
  }


  public V1alpha1AddonSpecHelm chartsPathInImage(String chartsPathInImage) {
    
    this.chartsPathInImage = chartsPathInImage;
    return this;
  }

   /**
   * Defines the path of Helm charts in the image. This path is used to copy Helm charts from the image to the shared volume. The default path is \&quot;/charts\&quot;.
   * @return chartsPathInImage
  **/
  @jakarta.annotation.Nullable
  public String getChartsPathInImage() {
    return chartsPathInImage;
  }


  public void setChartsPathInImage(String chartsPathInImage) {
    this.chartsPathInImage = chartsPathInImage;
  }


  public V1alpha1AddonSpecHelm installOptions(Map<String, String> installOptions) {
    
    this.installOptions = installOptions;
    return this;
  }

  public V1alpha1AddonSpecHelm putInstallOptionsItem(String key, String installOptionsItem) {
    if (this.installOptions == null) {
      this.installOptions = new HashMap<>();
    }
    this.installOptions.put(key, installOptionsItem);
    return this;
  }

   /**
   * Defines the options for Helm release installation.
   * @return installOptions
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getInstallOptions() {
    return installOptions;
  }


  public void setInstallOptions(Map<String, String> installOptions) {
    this.installOptions = installOptions;
  }


  public V1alpha1AddonSpecHelm installValues(V1alpha1AddonSpecHelmInstallValues installValues) {
    
    this.installValues = installValues;
    return this;
  }

   /**
   * Get installValues
   * @return installValues
  **/
  @jakarta.annotation.Nullable
  public V1alpha1AddonSpecHelmInstallValues getInstallValues() {
    return installValues;
  }


  public void setInstallValues(V1alpha1AddonSpecHelmInstallValues installValues) {
    this.installValues = installValues;
  }


  public V1alpha1AddonSpecHelm valuesMapping(V1alpha1AddonSpecHelmValuesMapping valuesMapping) {
    
    this.valuesMapping = valuesMapping;
    return this;
  }

   /**
   * Get valuesMapping
   * @return valuesMapping
  **/
  @jakarta.annotation.Nullable
  public V1alpha1AddonSpecHelmValuesMapping getValuesMapping() {
    return valuesMapping;
  }


  public void setValuesMapping(V1alpha1AddonSpecHelmValuesMapping valuesMapping) {
    this.valuesMapping = valuesMapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1AddonSpecHelm v1alpha1AddonSpecHelm = (V1alpha1AddonSpecHelm) o;
    return Objects.equals(this.chartLocationURL, v1alpha1AddonSpecHelm.chartLocationURL) &&
        Objects.equals(this.chartsImage, v1alpha1AddonSpecHelm.chartsImage) &&
        Objects.equals(this.chartsPathInImage, v1alpha1AddonSpecHelm.chartsPathInImage) &&
        Objects.equals(this.installOptions, v1alpha1AddonSpecHelm.installOptions) &&
        Objects.equals(this.installValues, v1alpha1AddonSpecHelm.installValues) &&
        Objects.equals(this.valuesMapping, v1alpha1AddonSpecHelm.valuesMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartLocationURL, chartsImage, chartsPathInImage, installOptions, installValues, valuesMapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1AddonSpecHelm {\n");
    sb.append("    chartLocationURL: ").append(toIndentedString(chartLocationURL)).append("\n");
    sb.append("    chartsImage: ").append(toIndentedString(chartsImage)).append("\n");
    sb.append("    chartsPathInImage: ").append(toIndentedString(chartsPathInImage)).append("\n");
    sb.append("    installOptions: ").append(toIndentedString(installOptions)).append("\n");
    sb.append("    installValues: ").append(toIndentedString(installValues)).append("\n");
    sb.append("    valuesMapping: ").append(toIndentedString(valuesMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chartLocationURL");
    openapiFields.add("chartsImage");
    openapiFields.add("chartsPathInImage");
    openapiFields.add("installOptions");
    openapiFields.add("installValues");
    openapiFields.add("valuesMapping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chartLocationURL");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1AddonSpecHelm
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1AddonSpecHelm.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1AddonSpecHelm is not found in the empty JSON string", V1alpha1AddonSpecHelm.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1AddonSpecHelm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1AddonSpecHelm` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1AddonSpecHelm.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("chartLocationURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chartLocationURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chartLocationURL").toString()));
      }
      if ((jsonObj.get("chartsImage") != null && !jsonObj.get("chartsImage").isJsonNull()) && !jsonObj.get("chartsImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chartsImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chartsImage").toString()));
      }
      if ((jsonObj.get("chartsPathInImage") != null && !jsonObj.get("chartsPathInImage").isJsonNull()) && !jsonObj.get("chartsPathInImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chartsPathInImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chartsPathInImage").toString()));
      }
      // validate the optional field `installValues`
      if (jsonObj.get("installValues") != null && !jsonObj.get("installValues").isJsonNull()) {
        V1alpha1AddonSpecHelmInstallValues.validateJsonObject(jsonObj.getAsJsonObject("installValues"));
      }
      // validate the optional field `valuesMapping`
      if (jsonObj.get("valuesMapping") != null && !jsonObj.get("valuesMapping").isJsonNull()) {
        V1alpha1AddonSpecHelmValuesMapping.validateJsonObject(jsonObj.getAsJsonObject("valuesMapping"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1AddonSpecHelm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1AddonSpecHelm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1AddonSpecHelm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1AddonSpecHelm.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1AddonSpecHelm>() {
           @Override
           public void write(JsonWriter out, V1alpha1AddonSpecHelm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1AddonSpecHelm read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1AddonSpecHelm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1AddonSpecHelm
  * @throws IOException if the JSON string is invalid with respect to V1alpha1AddonSpecHelm
  */
  public static V1alpha1AddonSpecHelm fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1AddonSpecHelm.class);
  }

 /**
  * Convert an instance of V1alpha1AddonSpecHelm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

