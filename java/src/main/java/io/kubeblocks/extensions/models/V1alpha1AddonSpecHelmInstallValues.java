/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.extensions.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Defines the set values for Helm release installation.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:02:35.998799Z[Etc/UTC]")
public class V1alpha1AddonSpecHelmInstallValues {
  public static final String SERIALIZED_NAME_CONFIG_MAP_REFS = "configMapRefs";
  @SerializedName(SERIALIZED_NAME_CONFIG_MAP_REFS)
  private List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> configMapRefs;

  public static final String SERIALIZED_NAME_SECRET_REFS = "secretRefs";
  @SerializedName(SERIALIZED_NAME_SECRET_REFS)
  private List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> secretRefs;

  public static final String SERIALIZED_NAME_SET_J_S_O_N_VALUES = "setJSONValues";
  @SerializedName(SERIALIZED_NAME_SET_J_S_O_N_VALUES)
  private List<String> setJSONValues;

  public static final String SERIALIZED_NAME_SET_VALUES = "setValues";
  @SerializedName(SERIALIZED_NAME_SET_VALUES)
  private List<String> setValues;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<String> urls;

  public V1alpha1AddonSpecHelmInstallValues() {
  }

  public V1alpha1AddonSpecHelmInstallValues configMapRefs(List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> configMapRefs) {
    
    this.configMapRefs = configMapRefs;
    return this;
  }

  public V1alpha1AddonSpecHelmInstallValues addConfigMapRefsItem(V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner configMapRefsItem) {
    if (this.configMapRefs == null) {
      this.configMapRefs = new ArrayList<>();
    }
    this.configMapRefs.add(configMapRefsItem);
    return this;
  }

   /**
   * Selects a key from a ConfigMap item list. The value can be a JSON or YAML string content. Use a key name with \&quot;.json\&quot;, \&quot;.yaml\&quot;, or \&quot;.yml\&quot; extension to specify a content type.
   * @return configMapRefs
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> getConfigMapRefs() {
    return configMapRefs;
  }


  public void setConfigMapRefs(List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> configMapRefs) {
    this.configMapRefs = configMapRefs;
  }


  public V1alpha1AddonSpecHelmInstallValues secretRefs(List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> secretRefs) {
    
    this.secretRefs = secretRefs;
    return this;
  }

  public V1alpha1AddonSpecHelmInstallValues addSecretRefsItem(V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner secretRefsItem) {
    if (this.secretRefs == null) {
      this.secretRefs = new ArrayList<>();
    }
    this.secretRefs.add(secretRefsItem);
    return this;
  }

   /**
   * Selects a key from a Secrets item list. The value can be a JSON or YAML string content. Use a key name with \&quot;.json\&quot;, \&quot;.yaml\&quot;, or \&quot;.yml\&quot; extension to specify a content type.
   * @return secretRefs
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> getSecretRefs() {
    return secretRefs;
  }


  public void setSecretRefs(List<V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner> secretRefs) {
    this.secretRefs = secretRefs;
  }


  public V1alpha1AddonSpecHelmInstallValues setJSONValues(List<String> setJSONValues) {
    
    this.setJSONValues = setJSONValues;
    return this;
  }

  public V1alpha1AddonSpecHelmInstallValues addSetJSONValuesItem(String setJSONValuesItem) {
    if (this.setJSONValues == null) {
      this.setJSONValues = new ArrayList<>();
    }
    this.setJSONValues.add(setJSONValuesItem);
    return this;
  }

   /**
   * JSON values set during Helm installation. Multiple or separate values can be specified with commas (key1&#x3D;jsonval1,key2&#x3D;jsonval2).
   * @return setJSONValues
  **/
  @jakarta.annotation.Nullable
  public List<String> getSetJSONValues() {
    return setJSONValues;
  }


  public void setSetJSONValues(List<String> setJSONValues) {
    this.setJSONValues = setJSONValues;
  }


  public V1alpha1AddonSpecHelmInstallValues setValues(List<String> setValues) {
    
    this.setValues = setValues;
    return this;
  }

  public V1alpha1AddonSpecHelmInstallValues addSetValuesItem(String setValuesItem) {
    if (this.setValues == null) {
      this.setValues = new ArrayList<>();
    }
    this.setValues.add(setValuesItem);
    return this;
  }

   /**
   * Values set during Helm installation. Multiple or separate values can be specified with commas (key1&#x3D;val1,key2&#x3D;val2).
   * @return setValues
  **/
  @jakarta.annotation.Nullable
  public List<String> getSetValues() {
    return setValues;
  }


  public void setSetValues(List<String> setValues) {
    this.setValues = setValues;
  }


  public V1alpha1AddonSpecHelmInstallValues urls(List<String> urls) {
    
    this.urls = urls;
    return this;
  }

  public V1alpha1AddonSpecHelmInstallValues addUrlsItem(String urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

   /**
   * Specifies the URL location of the values file.
   * @return urls
  **/
  @jakarta.annotation.Nullable
  public List<String> getUrls() {
    return urls;
  }


  public void setUrls(List<String> urls) {
    this.urls = urls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1AddonSpecHelmInstallValues v1alpha1AddonSpecHelmInstallValues = (V1alpha1AddonSpecHelmInstallValues) o;
    return Objects.equals(this.configMapRefs, v1alpha1AddonSpecHelmInstallValues.configMapRefs) &&
        Objects.equals(this.secretRefs, v1alpha1AddonSpecHelmInstallValues.secretRefs) &&
        Objects.equals(this.setJSONValues, v1alpha1AddonSpecHelmInstallValues.setJSONValues) &&
        Objects.equals(this.setValues, v1alpha1AddonSpecHelmInstallValues.setValues) &&
        Objects.equals(this.urls, v1alpha1AddonSpecHelmInstallValues.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configMapRefs, secretRefs, setJSONValues, setValues, urls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1AddonSpecHelmInstallValues {\n");
    sb.append("    configMapRefs: ").append(toIndentedString(configMapRefs)).append("\n");
    sb.append("    secretRefs: ").append(toIndentedString(secretRefs)).append("\n");
    sb.append("    setJSONValues: ").append(toIndentedString(setJSONValues)).append("\n");
    sb.append("    setValues: ").append(toIndentedString(setValues)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configMapRefs");
    openapiFields.add("secretRefs");
    openapiFields.add("setJSONValues");
    openapiFields.add("setValues");
    openapiFields.add("urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1AddonSpecHelmInstallValues
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1AddonSpecHelmInstallValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1AddonSpecHelmInstallValues is not found in the empty JSON string", V1alpha1AddonSpecHelmInstallValues.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1AddonSpecHelmInstallValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1AddonSpecHelmInstallValues` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("configMapRefs") != null && !jsonObj.get("configMapRefs").isJsonNull()) {
        JsonArray jsonArrayconfigMapRefs = jsonObj.getAsJsonArray("configMapRefs");
        if (jsonArrayconfigMapRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configMapRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configMapRefs` to be an array in the JSON string but got `%s`", jsonObj.get("configMapRefs").toString()));
          }

          // validate the optional field `configMapRefs` (array)
          for (int i = 0; i < jsonArrayconfigMapRefs.size(); i++) {
            V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner.validateJsonObject(jsonArrayconfigMapRefs.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("secretRefs") != null && !jsonObj.get("secretRefs").isJsonNull()) {
        JsonArray jsonArraysecretRefs = jsonObj.getAsJsonArray("secretRefs");
        if (jsonArraysecretRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secretRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secretRefs` to be an array in the JSON string but got `%s`", jsonObj.get("secretRefs").toString()));
          }

          // validate the optional field `secretRefs` (array)
          for (int i = 0; i < jsonArraysecretRefs.size(); i++) {
            V1alpha1AddonSpecHelmInstallValuesConfigMapRefsInner.validateJsonObject(jsonArraysecretRefs.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setJSONValues") != null && !jsonObj.get("setJSONValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setJSONValues` to be an array in the JSON string but got `%s`", jsonObj.get("setJSONValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setValues") != null && !jsonObj.get("setValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setValues` to be an array in the JSON string but got `%s`", jsonObj.get("setValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1AddonSpecHelmInstallValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1AddonSpecHelmInstallValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1AddonSpecHelmInstallValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1AddonSpecHelmInstallValues.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1AddonSpecHelmInstallValues>() {
           @Override
           public void write(JsonWriter out, V1alpha1AddonSpecHelmInstallValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1AddonSpecHelmInstallValues read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1AddonSpecHelmInstallValues given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1AddonSpecHelmInstallValues
  * @throws IOException if the JSON string is invalid with respect to V1alpha1AddonSpecHelmInstallValues
  */
  public static V1alpha1AddonSpecHelmInstallValues fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1AddonSpecHelmInstallValues.class);
  }

 /**
  * Convert an instance of V1alpha1AddonSpecHelmInstallValues to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

