/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.extensions.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:02:35.998799Z[Etc/UTC]")
public class V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner {
  /**
   * The selector key. Valid values are KubeVersion, KubeGitVersion and KubeProvider.   - &#x60;KubeVersion&#x60; the semver expression of Kubernetes versions, i.e., v1.24. - &#x60;KubeGitVersion&#x60; may contain distro. info., i.e., v1.24.4+eks. - &#x60;KubeProvider&#x60; the Kubernetes provider, i.e., aws, gcp, azure, huaweiCloud, tencentCloud etc.
   */
  @JsonAdapter(KeyEnum.Adapter.class)
  public enum KeyEnum {
    KUBEGITVERSION("KubeGitVersion"),
    
    KUBEVERSION("KubeVersion"),
    
    KUBEPROVIDER("KubeProvider");

    private String value;

    KeyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyEnum fromValue(String value) {
      for (KeyEnum b : KeyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private KeyEnum key;

  /**
   * Represents a key&#39;s relationship to a set of values. Valid operators are Contains, NotIn, DoesNotContain, MatchRegex, and DoesNoteMatchRegex.   Possible enum values:   - &#x60;Contains&#x60; line contains a string. - &#x60;DoesNotContain&#x60; line does not contain a string. - &#x60;MatchRegex&#x60; line contains a match to the regular expression. - &#x60;DoesNotMatchRegex&#x60; line does not contain a match to the regular expression.
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    CONTAINS("Contains"),
    
    DOESNOTCONTAIN("DoesNotContain"),
    
    MATCHREGEX("MatchRegex"),
    
    DOESNOTMATCHREGEX("DoesNotMatchRegex");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values;

  public V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner() {
  }

  public V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner key(KeyEnum key) {
    
    this.key = key;
    return this;
  }

   /**
   * The selector key. Valid values are KubeVersion, KubeGitVersion and KubeProvider.   - &#x60;KubeVersion&#x60; the semver expression of Kubernetes versions, i.e., v1.24. - &#x60;KubeGitVersion&#x60; may contain distro. info., i.e., v1.24.4+eks. - &#x60;KubeProvider&#x60; the Kubernetes provider, i.e., aws, gcp, azure, huaweiCloud, tencentCloud etc.
   * @return key
  **/
  @jakarta.annotation.Nonnull
  public KeyEnum getKey() {
    return key;
  }


  public void setKey(KeyEnum key) {
    this.key = key;
  }


  public V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner operator(OperatorEnum operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * Represents a key&#39;s relationship to a set of values. Valid operators are Contains, NotIn, DoesNotContain, MatchRegex, and DoesNoteMatchRegex.   Possible enum values:   - &#x60;Contains&#x60; line contains a string. - &#x60;DoesNotContain&#x60; line does not contain a string. - &#x60;MatchRegex&#x60; line contains a match to the regular expression. - &#x60;DoesNotMatchRegex&#x60; line does not contain a match to the regular expression.
   * @return operator
  **/
  @jakarta.annotation.Nonnull
  public OperatorEnum getOperator() {
    return operator;
  }


  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner values(List<String> values) {
    
    this.values = values;
    return this;
  }

  public V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Represents an array of string values. This serves as an \&quot;OR\&quot; expression to the operator.
   * @return values
  **/
  @jakarta.annotation.Nullable
  public List<String> getValues() {
    return values;
  }


  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner v1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner = (V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner) o;
    return Objects.equals(this.key, v1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.key) &&
        Objects.equals(this.operator, v1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.operator) &&
        Objects.equals(this.values, v1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, operator, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key");
    openapiFields.add("operator");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("operator");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner is not found in the empty JSON string", V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner
  */
  public static V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner.class);
  }

 /**
  * Convert an instance of V1alpha1AddonSpecDefaultInstallValuesInnerSelectorsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

