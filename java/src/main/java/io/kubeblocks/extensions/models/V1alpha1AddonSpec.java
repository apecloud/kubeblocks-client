/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.extensions.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecCliPluginsInner;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecDefaultInstallValuesInner;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecHelm;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecInstall;
import io.kubeblocks.extensions.models.V1alpha1AddonSpecInstallable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * AddonSpec defines the desired state of an add-on.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:02:35.998799Z[Etc/UTC]")
public class V1alpha1AddonSpec {
  public static final String SERIALIZED_NAME_CLI_PLUGINS = "cliPlugins";
  @SerializedName(SERIALIZED_NAME_CLI_PLUGINS)
  private List<V1alpha1AddonSpecCliPluginsInner> cliPlugins;

  public static final String SERIALIZED_NAME_DEFAULT_INSTALL_VALUES = "defaultInstallValues";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INSTALL_VALUES)
  private List<V1alpha1AddonSpecDefaultInstallValuesInner> defaultInstallValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HELM = "helm";
  @SerializedName(SERIALIZED_NAME_HELM)
  private V1alpha1AddonSpecHelm helm;

  public static final String SERIALIZED_NAME_INSTALL = "install";
  @SerializedName(SERIALIZED_NAME_INSTALL)
  private V1alpha1AddonSpecInstall install;

  public static final String SERIALIZED_NAME_INSTALLABLE = "installable";
  @SerializedName(SERIALIZED_NAME_INSTALLABLE)
  private V1alpha1AddonSpecInstallable installable;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  /**
   * Defines the type of the add-on. The only valid value is &#39;helm&#39;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HELM("Helm");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public V1alpha1AddonSpec() {
  }

  public V1alpha1AddonSpec cliPlugins(List<V1alpha1AddonSpecCliPluginsInner> cliPlugins) {
    
    this.cliPlugins = cliPlugins;
    return this;
  }

  public V1alpha1AddonSpec addCliPluginsItem(V1alpha1AddonSpecCliPluginsInner cliPluginsItem) {
    if (this.cliPlugins == null) {
      this.cliPlugins = new ArrayList<>();
    }
    this.cliPlugins.add(cliPluginsItem);
    return this;
  }

   /**
   * Specifies the CLI plugin installation specifications.
   * @return cliPlugins
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1AddonSpecCliPluginsInner> getCliPlugins() {
    return cliPlugins;
  }


  public void setCliPlugins(List<V1alpha1AddonSpecCliPluginsInner> cliPlugins) {
    this.cliPlugins = cliPlugins;
  }


  public V1alpha1AddonSpec defaultInstallValues(List<V1alpha1AddonSpecDefaultInstallValuesInner> defaultInstallValues) {
    
    this.defaultInstallValues = defaultInstallValues;
    return this;
  }

  public V1alpha1AddonSpec addDefaultInstallValuesItem(V1alpha1AddonSpecDefaultInstallValuesInner defaultInstallValuesItem) {
    if (this.defaultInstallValues == null) {
      this.defaultInstallValues = new ArrayList<>();
    }
    this.defaultInstallValues.add(defaultInstallValuesItem);
    return this;
  }

   /**
   * Specifies the default installation parameters.
   * @return defaultInstallValues
  **/
  @jakarta.annotation.Nonnull
  public List<V1alpha1AddonSpecDefaultInstallValuesInner> getDefaultInstallValues() {
    return defaultInstallValues;
  }


  public void setDefaultInstallValues(List<V1alpha1AddonSpecDefaultInstallValuesInner> defaultInstallValues) {
    this.defaultInstallValues = defaultInstallValues;
  }


  public V1alpha1AddonSpec description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Specifies the description of the add-on.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public V1alpha1AddonSpec helm(V1alpha1AddonSpecHelm helm) {
    
    this.helm = helm;
    return this;
  }

   /**
   * Get helm
   * @return helm
  **/
  @jakarta.annotation.Nullable
  public V1alpha1AddonSpecHelm getHelm() {
    return helm;
  }


  public void setHelm(V1alpha1AddonSpecHelm helm) {
    this.helm = helm;
  }


  public V1alpha1AddonSpec install(V1alpha1AddonSpecInstall install) {
    
    this.install = install;
    return this;
  }

   /**
   * Get install
   * @return install
  **/
  @jakarta.annotation.Nullable
  public V1alpha1AddonSpecInstall getInstall() {
    return install;
  }


  public void setInstall(V1alpha1AddonSpecInstall install) {
    this.install = install;
  }


  public V1alpha1AddonSpec installable(V1alpha1AddonSpecInstallable installable) {
    
    this.installable = installable;
    return this;
  }

   /**
   * Get installable
   * @return installable
  **/
  @jakarta.annotation.Nullable
  public V1alpha1AddonSpecInstallable getInstallable() {
    return installable;
  }


  public void setInstallable(V1alpha1AddonSpecInstallable installable) {
    this.installable = installable;
  }


  public V1alpha1AddonSpec provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * Specifies the provider of the add-on.
   * @return provider
  **/
  @jakarta.annotation.Nullable
  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    this.provider = provider;
  }


  public V1alpha1AddonSpec type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines the type of the add-on. The only valid value is &#39;helm&#39;.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public V1alpha1AddonSpec version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Indicates the version of the add-on.
   * @return version
  **/
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1AddonSpec v1alpha1AddonSpec = (V1alpha1AddonSpec) o;
    return Objects.equals(this.cliPlugins, v1alpha1AddonSpec.cliPlugins) &&
        Objects.equals(this.defaultInstallValues, v1alpha1AddonSpec.defaultInstallValues) &&
        Objects.equals(this.description, v1alpha1AddonSpec.description) &&
        Objects.equals(this.helm, v1alpha1AddonSpec.helm) &&
        Objects.equals(this.install, v1alpha1AddonSpec.install) &&
        Objects.equals(this.installable, v1alpha1AddonSpec.installable) &&
        Objects.equals(this.provider, v1alpha1AddonSpec.provider) &&
        Objects.equals(this.type, v1alpha1AddonSpec.type) &&
        Objects.equals(this.version, v1alpha1AddonSpec.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cliPlugins, defaultInstallValues, description, helm, install, installable, provider, type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1AddonSpec {\n");
    sb.append("    cliPlugins: ").append(toIndentedString(cliPlugins)).append("\n");
    sb.append("    defaultInstallValues: ").append(toIndentedString(defaultInstallValues)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    helm: ").append(toIndentedString(helm)).append("\n");
    sb.append("    install: ").append(toIndentedString(install)).append("\n");
    sb.append("    installable: ").append(toIndentedString(installable)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cliPlugins");
    openapiFields.add("defaultInstallValues");
    openapiFields.add("description");
    openapiFields.add("helm");
    openapiFields.add("install");
    openapiFields.add("installable");
    openapiFields.add("provider");
    openapiFields.add("type");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultInstallValues");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1AddonSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1AddonSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1AddonSpec is not found in the empty JSON string", V1alpha1AddonSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1AddonSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1AddonSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1AddonSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("cliPlugins") != null && !jsonObj.get("cliPlugins").isJsonNull()) {
        JsonArray jsonArraycliPlugins = jsonObj.getAsJsonArray("cliPlugins");
        if (jsonArraycliPlugins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cliPlugins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cliPlugins` to be an array in the JSON string but got `%s`", jsonObj.get("cliPlugins").toString()));
          }

          // validate the optional field `cliPlugins` (array)
          for (int i = 0; i < jsonArraycliPlugins.size(); i++) {
            V1alpha1AddonSpecCliPluginsInner.validateJsonObject(jsonArraycliPlugins.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("defaultInstallValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultInstallValues` to be an array in the JSON string but got `%s`", jsonObj.get("defaultInstallValues").toString()));
      }

      JsonArray jsonArraydefaultInstallValues = jsonObj.getAsJsonArray("defaultInstallValues");
      // validate the required field `defaultInstallValues` (array)
      for (int i = 0; i < jsonArraydefaultInstallValues.size(); i++) {
        V1alpha1AddonSpecDefaultInstallValuesInner.validateJsonObject(jsonArraydefaultInstallValues.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `helm`
      if (jsonObj.get("helm") != null && !jsonObj.get("helm").isJsonNull()) {
        V1alpha1AddonSpecHelm.validateJsonObject(jsonObj.getAsJsonObject("helm"));
      }
      // validate the optional field `install`
      if (jsonObj.get("install") != null && !jsonObj.get("install").isJsonNull()) {
        V1alpha1AddonSpecInstall.validateJsonObject(jsonObj.getAsJsonObject("install"));
      }
      // validate the optional field `installable`
      if (jsonObj.get("installable") != null && !jsonObj.get("installable").isJsonNull()) {
        V1alpha1AddonSpecInstallable.validateJsonObject(jsonObj.getAsJsonObject("installable"));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1AddonSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1AddonSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1AddonSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1AddonSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1AddonSpec>() {
           @Override
           public void write(JsonWriter out, V1alpha1AddonSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1AddonSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1AddonSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1AddonSpec
  * @throws IOException if the JSON string is invalid with respect to V1alpha1AddonSpec
  */
  public static V1alpha1AddonSpec fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1AddonSpec.class);
  }

 /**
  * Convert an instance of V1alpha1AddonSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

