/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.workloads.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeLinuxOptions;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeccompProfile;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecTemplateSpecSecurityContextSysctlsInner;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecTemplateSpecSecurityContextWindowsOptions;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:03:17.809844Z[Etc/UTC]")
public class V1alpha1InstanceSetSpecTemplateSpecSecurityContext {
  public static final String SERIALIZED_NAME_FS_GROUP = "fsGroup";
  @SerializedName(SERIALIZED_NAME_FS_GROUP)
  private Long fsGroup;

  public static final String SERIALIZED_NAME_FS_GROUP_CHANGE_POLICY = "fsGroupChangePolicy";
  @SerializedName(SERIALIZED_NAME_FS_GROUP_CHANGE_POLICY)
  private String fsGroupChangePolicy;

  public static final String SERIALIZED_NAME_RUN_AS_GROUP = "runAsGroup";
  @SerializedName(SERIALIZED_NAME_RUN_AS_GROUP)
  private Long runAsGroup;

  public static final String SERIALIZED_NAME_RUN_AS_NON_ROOT = "runAsNonRoot";
  @SerializedName(SERIALIZED_NAME_RUN_AS_NON_ROOT)
  private Boolean runAsNonRoot;

  public static final String SERIALIZED_NAME_RUN_AS_USER = "runAsUser";
  @SerializedName(SERIALIZED_NAME_RUN_AS_USER)
  private Long runAsUser;

  public static final String SERIALIZED_NAME_SE_LINUX_OPTIONS = "seLinuxOptions";
  @SerializedName(SERIALIZED_NAME_SE_LINUX_OPTIONS)
  private V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeLinuxOptions seLinuxOptions;

  public static final String SERIALIZED_NAME_SECCOMP_PROFILE = "seccompProfile";
  @SerializedName(SERIALIZED_NAME_SECCOMP_PROFILE)
  private V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeccompProfile seccompProfile;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_GROUPS = "supplementalGroups";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_GROUPS)
  private List<Long> supplementalGroups;

  public static final String SERIALIZED_NAME_SYSCTLS = "sysctls";
  @SerializedName(SERIALIZED_NAME_SYSCTLS)
  private List<V1alpha1InstanceSetSpecTemplateSpecSecurityContextSysctlsInner> sysctls;

  public static final String SERIALIZED_NAME_WINDOWS_OPTIONS = "windowsOptions";
  @SerializedName(SERIALIZED_NAME_WINDOWS_OPTIONS)
  private V1alpha1InstanceSetSpecTemplateSpecSecurityContextWindowsOptions windowsOptions;

  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext() {
  }

  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext fsGroup(Long fsGroup) {
    
    this.fsGroup = fsGroup;
    return this;
  }

   /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:   1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw----   If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   * @return fsGroup
  **/
  @jakarta.annotation.Nullable
  public Long getFsGroup() {
    return fsGroup;
  }


  public void setFsGroup(Long fsGroup) {
    this.fsGroup = fsGroup;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext fsGroupChangePolicy(String fsGroupChangePolicy) {
    
    this.fsGroupChangePolicy = fsGroupChangePolicy;
    return this;
  }

   /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \&quot;OnRootMismatch\&quot; and \&quot;Always\&quot;. If not specified, \&quot;Always\&quot; is used. Note that this field cannot be set when spec.os.name is windows.
   * @return fsGroupChangePolicy
  **/
  @jakarta.annotation.Nullable
  public String getFsGroupChangePolicy() {
    return fsGroupChangePolicy;
  }


  public void setFsGroupChangePolicy(String fsGroupChangePolicy) {
    this.fsGroupChangePolicy = fsGroupChangePolicy;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext runAsGroup(Long runAsGroup) {
    
    this.runAsGroup = runAsGroup;
    return this;
  }

   /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @return runAsGroup
  **/
  @jakarta.annotation.Nullable
  public Long getRunAsGroup() {
    return runAsGroup;
  }


  public void setRunAsGroup(Long runAsGroup) {
    this.runAsGroup = runAsGroup;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext runAsNonRoot(Boolean runAsNonRoot) {
    
    this.runAsNonRoot = runAsNonRoot;
    return this;
  }

   /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @return runAsNonRoot
  **/
  @jakarta.annotation.Nullable
  public Boolean getRunAsNonRoot() {
    return runAsNonRoot;
  }


  public void setRunAsNonRoot(Boolean runAsNonRoot) {
    this.runAsNonRoot = runAsNonRoot;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext runAsUser(Long runAsUser) {
    
    this.runAsUser = runAsUser;
    return this;
  }

   /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @return runAsUser
  **/
  @jakarta.annotation.Nullable
  public Long getRunAsUser() {
    return runAsUser;
  }


  public void setRunAsUser(Long runAsUser) {
    this.runAsUser = runAsUser;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext seLinuxOptions(V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeLinuxOptions seLinuxOptions) {
    
    this.seLinuxOptions = seLinuxOptions;
    return this;
  }

   /**
   * Get seLinuxOptions
   * @return seLinuxOptions
  **/
  @jakarta.annotation.Nullable
  public V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeLinuxOptions getSeLinuxOptions() {
    return seLinuxOptions;
  }


  public void setSeLinuxOptions(V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeLinuxOptions seLinuxOptions) {
    this.seLinuxOptions = seLinuxOptions;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext seccompProfile(V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeccompProfile seccompProfile) {
    
    this.seccompProfile = seccompProfile;
    return this;
  }

   /**
   * Get seccompProfile
   * @return seccompProfile
  **/
  @jakarta.annotation.Nullable
  public V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeccompProfile getSeccompProfile() {
    return seccompProfile;
  }


  public void setSeccompProfile(V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeccompProfile seccompProfile) {
    this.seccompProfile = seccompProfile;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext supplementalGroups(List<Long> supplementalGroups) {
    
    this.supplementalGroups = supplementalGroups;
    return this;
  }

  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext addSupplementalGroupsItem(Long supplementalGroupsItem) {
    if (this.supplementalGroups == null) {
      this.supplementalGroups = new ArrayList<>();
    }
    this.supplementalGroups.add(supplementalGroupsItem);
    return this;
  }

   /**
   * A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   * @return supplementalGroups
  **/
  @jakarta.annotation.Nullable
  public List<Long> getSupplementalGroups() {
    return supplementalGroups;
  }


  public void setSupplementalGroups(List<Long> supplementalGroups) {
    this.supplementalGroups = supplementalGroups;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext sysctls(List<V1alpha1InstanceSetSpecTemplateSpecSecurityContextSysctlsInner> sysctls) {
    
    this.sysctls = sysctls;
    return this;
  }

  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext addSysctlsItem(V1alpha1InstanceSetSpecTemplateSpecSecurityContextSysctlsInner sysctlsItem) {
    if (this.sysctls == null) {
      this.sysctls = new ArrayList<>();
    }
    this.sysctls.add(sysctlsItem);
    return this;
  }

   /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   * @return sysctls
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetSpecTemplateSpecSecurityContextSysctlsInner> getSysctls() {
    return sysctls;
  }


  public void setSysctls(List<V1alpha1InstanceSetSpecTemplateSpecSecurityContextSysctlsInner> sysctls) {
    this.sysctls = sysctls;
  }


  public V1alpha1InstanceSetSpecTemplateSpecSecurityContext windowsOptions(V1alpha1InstanceSetSpecTemplateSpecSecurityContextWindowsOptions windowsOptions) {
    
    this.windowsOptions = windowsOptions;
    return this;
  }

   /**
   * Get windowsOptions
   * @return windowsOptions
  **/
  @jakarta.annotation.Nullable
  public V1alpha1InstanceSetSpecTemplateSpecSecurityContextWindowsOptions getWindowsOptions() {
    return windowsOptions;
  }


  public void setWindowsOptions(V1alpha1InstanceSetSpecTemplateSpecSecurityContextWindowsOptions windowsOptions) {
    this.windowsOptions = windowsOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1InstanceSetSpecTemplateSpecSecurityContext v1alpha1InstanceSetSpecTemplateSpecSecurityContext = (V1alpha1InstanceSetSpecTemplateSpecSecurityContext) o;
    return Objects.equals(this.fsGroup, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.fsGroup) &&
        Objects.equals(this.fsGroupChangePolicy, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.fsGroupChangePolicy) &&
        Objects.equals(this.runAsGroup, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.runAsGroup) &&
        Objects.equals(this.runAsNonRoot, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.runAsNonRoot) &&
        Objects.equals(this.runAsUser, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.runAsUser) &&
        Objects.equals(this.seLinuxOptions, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.seLinuxOptions) &&
        Objects.equals(this.seccompProfile, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.seccompProfile) &&
        Objects.equals(this.supplementalGroups, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.supplementalGroups) &&
        Objects.equals(this.sysctls, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.sysctls) &&
        Objects.equals(this.windowsOptions, v1alpha1InstanceSetSpecTemplateSpecSecurityContext.windowsOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fsGroup, fsGroupChangePolicy, runAsGroup, runAsNonRoot, runAsUser, seLinuxOptions, seccompProfile, supplementalGroups, sysctls, windowsOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1InstanceSetSpecTemplateSpecSecurityContext {\n");
    sb.append("    fsGroup: ").append(toIndentedString(fsGroup)).append("\n");
    sb.append("    fsGroupChangePolicy: ").append(toIndentedString(fsGroupChangePolicy)).append("\n");
    sb.append("    runAsGroup: ").append(toIndentedString(runAsGroup)).append("\n");
    sb.append("    runAsNonRoot: ").append(toIndentedString(runAsNonRoot)).append("\n");
    sb.append("    runAsUser: ").append(toIndentedString(runAsUser)).append("\n");
    sb.append("    seLinuxOptions: ").append(toIndentedString(seLinuxOptions)).append("\n");
    sb.append("    seccompProfile: ").append(toIndentedString(seccompProfile)).append("\n");
    sb.append("    supplementalGroups: ").append(toIndentedString(supplementalGroups)).append("\n");
    sb.append("    sysctls: ").append(toIndentedString(sysctls)).append("\n");
    sb.append("    windowsOptions: ").append(toIndentedString(windowsOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fsGroup");
    openapiFields.add("fsGroupChangePolicy");
    openapiFields.add("runAsGroup");
    openapiFields.add("runAsNonRoot");
    openapiFields.add("runAsUser");
    openapiFields.add("seLinuxOptions");
    openapiFields.add("seccompProfile");
    openapiFields.add("supplementalGroups");
    openapiFields.add("sysctls");
    openapiFields.add("windowsOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1InstanceSetSpecTemplateSpecSecurityContext
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1InstanceSetSpecTemplateSpecSecurityContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1InstanceSetSpecTemplateSpecSecurityContext is not found in the empty JSON string", V1alpha1InstanceSetSpecTemplateSpecSecurityContext.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1InstanceSetSpecTemplateSpecSecurityContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1InstanceSetSpecTemplateSpecSecurityContext` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("fsGroupChangePolicy") != null && !jsonObj.get("fsGroupChangePolicy").isJsonNull()) && !jsonObj.get("fsGroupChangePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fsGroupChangePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fsGroupChangePolicy").toString()));
      }
      // validate the optional field `seLinuxOptions`
      if (jsonObj.get("seLinuxOptions") != null && !jsonObj.get("seLinuxOptions").isJsonNull()) {
        V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeLinuxOptions.validateJsonObject(jsonObj.getAsJsonObject("seLinuxOptions"));
      }
      // validate the optional field `seccompProfile`
      if (jsonObj.get("seccompProfile") != null && !jsonObj.get("seccompProfile").isJsonNull()) {
        V1alpha1InstanceSetSpecTemplateSpecSecurityContextSeccompProfile.validateJsonObject(jsonObj.getAsJsonObject("seccompProfile"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supplementalGroups") != null && !jsonObj.get("supplementalGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplementalGroups` to be an array in the JSON string but got `%s`", jsonObj.get("supplementalGroups").toString()));
      }
      if (jsonObj.get("sysctls") != null && !jsonObj.get("sysctls").isJsonNull()) {
        JsonArray jsonArraysysctls = jsonObj.getAsJsonArray("sysctls");
        if (jsonArraysysctls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sysctls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sysctls` to be an array in the JSON string but got `%s`", jsonObj.get("sysctls").toString()));
          }

          // validate the optional field `sysctls` (array)
          for (int i = 0; i < jsonArraysysctls.size(); i++) {
            V1alpha1InstanceSetSpecTemplateSpecSecurityContextSysctlsInner.validateJsonObject(jsonArraysysctls.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `windowsOptions`
      if (jsonObj.get("windowsOptions") != null && !jsonObj.get("windowsOptions").isJsonNull()) {
        V1alpha1InstanceSetSpecTemplateSpecSecurityContextWindowsOptions.validateJsonObject(jsonObj.getAsJsonObject("windowsOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1InstanceSetSpecTemplateSpecSecurityContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1InstanceSetSpecTemplateSpecSecurityContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1InstanceSetSpecTemplateSpecSecurityContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1InstanceSetSpecTemplateSpecSecurityContext.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1InstanceSetSpecTemplateSpecSecurityContext>() {
           @Override
           public void write(JsonWriter out, V1alpha1InstanceSetSpecTemplateSpecSecurityContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1InstanceSetSpecTemplateSpecSecurityContext read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1InstanceSetSpecTemplateSpecSecurityContext given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1InstanceSetSpecTemplateSpecSecurityContext
  * @throws IOException if the JSON string is invalid with respect to V1alpha1InstanceSetSpecTemplateSpecSecurityContext
  */
  public static V1alpha1InstanceSetSpecTemplateSpecSecurityContext fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1InstanceSetSpecTemplateSpecSecurityContext.class);
  }

 /**
  * Convert an instance of V1alpha1InstanceSetSpecTemplateSpecSecurityContext to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

