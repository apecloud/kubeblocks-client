/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.workloads.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecDefaultTemplateOrdinalsRangesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specifies the desired Ordinals of this InstanceTemplate. The Ordinals used to specify the ordinal of the instance (pod) names to be generated under this InstanceTemplate.   For example, if Ordinals is {ranges: [{start: 0, end: 1}], discrete: [7]}, then the instance names generated under this InstanceTemplate would be $(cluster.name)-$(component.name)-$(template.name)-0„ÄÅ$(cluster.name)-$(component.name)-$(template.name)-1 and $(cluster.name)-$(component.name)-$(template.name)-7
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:03:17.809844Z[Etc/UTC]")
public class V1alpha1InstanceSetSpecInstancesInnerOrdinals {
  public static final String SERIALIZED_NAME_DISCRETE = "discrete";
  @SerializedName(SERIALIZED_NAME_DISCRETE)
  private List<Integer> discrete;

  public static final String SERIALIZED_NAME_RANGES = "ranges";
  @SerializedName(SERIALIZED_NAME_RANGES)
  private List<V1alpha1InstanceSetSpecDefaultTemplateOrdinalsRangesInner> ranges;

  public V1alpha1InstanceSetSpecInstancesInnerOrdinals() {
  }

  public V1alpha1InstanceSetSpecInstancesInnerOrdinals discrete(List<Integer> discrete) {
    
    this.discrete = discrete;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInnerOrdinals addDiscreteItem(Integer discreteItem) {
    if (this.discrete == null) {
      this.discrete = new ArrayList<>();
    }
    this.discrete.add(discreteItem);
    return this;
  }

   /**
   * Get discrete
   * @return discrete
  **/
  @jakarta.annotation.Nullable
  public List<Integer> getDiscrete() {
    return discrete;
  }


  public void setDiscrete(List<Integer> discrete) {
    this.discrete = discrete;
  }


  public V1alpha1InstanceSetSpecInstancesInnerOrdinals ranges(List<V1alpha1InstanceSetSpecDefaultTemplateOrdinalsRangesInner> ranges) {
    
    this.ranges = ranges;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInnerOrdinals addRangesItem(V1alpha1InstanceSetSpecDefaultTemplateOrdinalsRangesInner rangesItem) {
    if (this.ranges == null) {
      this.ranges = new ArrayList<>();
    }
    this.ranges.add(rangesItem);
    return this;
  }

   /**
   * Get ranges
   * @return ranges
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetSpecDefaultTemplateOrdinalsRangesInner> getRanges() {
    return ranges;
  }


  public void setRanges(List<V1alpha1InstanceSetSpecDefaultTemplateOrdinalsRangesInner> ranges) {
    this.ranges = ranges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1InstanceSetSpecInstancesInnerOrdinals v1alpha1InstanceSetSpecInstancesInnerOrdinals = (V1alpha1InstanceSetSpecInstancesInnerOrdinals) o;
    return Objects.equals(this.discrete, v1alpha1InstanceSetSpecInstancesInnerOrdinals.discrete) &&
        Objects.equals(this.ranges, v1alpha1InstanceSetSpecInstancesInnerOrdinals.ranges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discrete, ranges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1InstanceSetSpecInstancesInnerOrdinals {\n");
    sb.append("    discrete: ").append(toIndentedString(discrete)).append("\n");
    sb.append("    ranges: ").append(toIndentedString(ranges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discrete");
    openapiFields.add("ranges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1InstanceSetSpecInstancesInnerOrdinals
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1InstanceSetSpecInstancesInnerOrdinals.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1InstanceSetSpecInstancesInnerOrdinals is not found in the empty JSON string", V1alpha1InstanceSetSpecInstancesInnerOrdinals.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1InstanceSetSpecInstancesInnerOrdinals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1InstanceSetSpecInstancesInnerOrdinals` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("discrete") != null && !jsonObj.get("discrete").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `discrete` to be an array in the JSON string but got `%s`", jsonObj.get("discrete").toString()));
      }
      if (jsonObj.get("ranges") != null && !jsonObj.get("ranges").isJsonNull()) {
        JsonArray jsonArrayranges = jsonObj.getAsJsonArray("ranges");
        if (jsonArrayranges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ranges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ranges` to be an array in the JSON string but got `%s`", jsonObj.get("ranges").toString()));
          }

          // validate the optional field `ranges` (array)
          for (int i = 0; i < jsonArrayranges.size(); i++) {
            V1alpha1InstanceSetSpecDefaultTemplateOrdinalsRangesInner.validateJsonObject(jsonArrayranges.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1InstanceSetSpecInstancesInnerOrdinals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1InstanceSetSpecInstancesInnerOrdinals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1InstanceSetSpecInstancesInnerOrdinals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1InstanceSetSpecInstancesInnerOrdinals.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1InstanceSetSpecInstancesInnerOrdinals>() {
           @Override
           public void write(JsonWriter out, V1alpha1InstanceSetSpecInstancesInnerOrdinals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1InstanceSetSpecInstancesInnerOrdinals read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1InstanceSetSpecInstancesInnerOrdinals given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1InstanceSetSpecInstancesInnerOrdinals
  * @throws IOException if the JSON string is invalid with respect to V1alpha1InstanceSetSpecInstancesInnerOrdinals
  */
  public static V1alpha1InstanceSetSpecInstancesInnerOrdinals fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1InstanceSetSpecInstancesInnerOrdinals.class);
  }

 /**
  * Convert an instance of V1alpha1InstanceSetSpecInstancesInnerOrdinals to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

