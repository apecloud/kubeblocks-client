/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.workloads.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetStatusConditionsInner;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetStatusMembersStatusInner;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetStatusTemplatesStatusInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Represents the current information about the state machine. This data may be out of date.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:03:17.809844Z[Etc/UTC]")
public class V1alpha1InstanceSetStatus {
  public static final String SERIALIZED_NAME_AVAILABLE_REPLICAS = "availableReplicas";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_REPLICAS)
  private Integer availableReplicas;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<V1alpha1InstanceSetStatusConditionsInner> conditions;

  public static final String SERIALIZED_NAME_CURRENT_REPLICAS = "currentReplicas";
  @SerializedName(SERIALIZED_NAME_CURRENT_REPLICAS)
  private Integer currentReplicas;

  public static final String SERIALIZED_NAME_CURRENT_REVISION = "currentRevision";
  @SerializedName(SERIALIZED_NAME_CURRENT_REVISION)
  private String currentRevision;

  public static final String SERIALIZED_NAME_CURRENT_REVISIONS = "currentRevisions";
  @SerializedName(SERIALIZED_NAME_CURRENT_REVISIONS)
  private Map<String, String> currentRevisions = new HashMap<>();

  public static final String SERIALIZED_NAME_INIT_REPLICAS = "initReplicas";
  @SerializedName(SERIALIZED_NAME_INIT_REPLICAS)
  private Integer initReplicas;

  public static final String SERIALIZED_NAME_MEMBERS_STATUS = "membersStatus";
  @SerializedName(SERIALIZED_NAME_MEMBERS_STATUS)
  private List<V1alpha1InstanceSetStatusMembersStatusInner> membersStatus;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Long observedGeneration;

  public static final String SERIALIZED_NAME_READY_INIT_REPLICAS = "readyInitReplicas";
  @SerializedName(SERIALIZED_NAME_READY_INIT_REPLICAS)
  private Integer readyInitReplicas;

  public static final String SERIALIZED_NAME_READY_REPLICAS = "readyReplicas";
  @SerializedName(SERIALIZED_NAME_READY_REPLICAS)
  private Integer readyReplicas;

  public static final String SERIALIZED_NAME_READY_WITHOUT_PRIMARY = "readyWithoutPrimary";
  @SerializedName(SERIALIZED_NAME_READY_WITHOUT_PRIMARY)
  private Boolean readyWithoutPrimary;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private Integer replicas;

  public static final String SERIALIZED_NAME_TEMPLATES_STATUS = "templatesStatus";
  @SerializedName(SERIALIZED_NAME_TEMPLATES_STATUS)
  private List<V1alpha1InstanceSetStatusTemplatesStatusInner> templatesStatus;

  public static final String SERIALIZED_NAME_UPDATE_REVISION = "updateRevision";
  @SerializedName(SERIALIZED_NAME_UPDATE_REVISION)
  private String updateRevision;

  public static final String SERIALIZED_NAME_UPDATE_REVISIONS = "updateRevisions";
  @SerializedName(SERIALIZED_NAME_UPDATE_REVISIONS)
  private Map<String, String> updateRevisions = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATED_REPLICAS = "updatedReplicas";
  @SerializedName(SERIALIZED_NAME_UPDATED_REPLICAS)
  private Integer updatedReplicas;

  public V1alpha1InstanceSetStatus() {
  }

  public V1alpha1InstanceSetStatus availableReplicas(Integer availableReplicas) {
    
    this.availableReplicas = availableReplicas;
    return this;
  }

   /**
   * Total number of available instances (ready for at least minReadySeconds) targeted by this InstanceSet.
   * @return availableReplicas
  **/
  @jakarta.annotation.Nullable
  public Integer getAvailableReplicas() {
    return availableReplicas;
  }


  public void setAvailableReplicas(Integer availableReplicas) {
    this.availableReplicas = availableReplicas;
  }


  public V1alpha1InstanceSetStatus conditions(List<V1alpha1InstanceSetStatusConditionsInner> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public V1alpha1InstanceSetStatus addConditionsItem(V1alpha1InstanceSetStatusConditionsInner conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Represents the latest available observations of an instanceset&#39;s current state. Known .status.conditions.type are: \&quot;InstanceFailure\&quot;, \&quot;InstanceReady\&quot;
   * @return conditions
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetStatusConditionsInner> getConditions() {
    return conditions;
  }


  public void setConditions(List<V1alpha1InstanceSetStatusConditionsInner> conditions) {
    this.conditions = conditions;
  }


  public V1alpha1InstanceSetStatus currentReplicas(Integer currentReplicas) {
    
    this.currentReplicas = currentReplicas;
    return this;
  }

   /**
   * currentReplicas is the number of instances created by the InstanceSet controller from the InstanceSet version indicated by CurrentRevisions.
   * @return currentReplicas
  **/
  @jakarta.annotation.Nullable
  public Integer getCurrentReplicas() {
    return currentReplicas;
  }


  public void setCurrentReplicas(Integer currentReplicas) {
    this.currentReplicas = currentReplicas;
  }


  public V1alpha1InstanceSetStatus currentRevision(String currentRevision) {
    
    this.currentRevision = currentRevision;
    return this;
  }

   /**
   * currentRevision, if not empty, indicates the version of the InstanceSet used to generate instances in the sequence [0,currentReplicas).
   * @return currentRevision
  **/
  @jakarta.annotation.Nullable
  public String getCurrentRevision() {
    return currentRevision;
  }


  public void setCurrentRevision(String currentRevision) {
    this.currentRevision = currentRevision;
  }


  public V1alpha1InstanceSetStatus currentRevisions(Map<String, String> currentRevisions) {
    
    this.currentRevisions = currentRevisions;
    return this;
  }

  public V1alpha1InstanceSetStatus putCurrentRevisionsItem(String key, String currentRevisionsItem) {
    if (this.currentRevisions == null) {
      this.currentRevisions = new HashMap<>();
    }
    this.currentRevisions.put(key, currentRevisionsItem);
    return this;
  }

   /**
   * currentRevisions, if not empty, indicates the old version of the InstanceSet used to generate the underlying workload. key is the pod name, value is the revision.
   * @return currentRevisions
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getCurrentRevisions() {
    return currentRevisions;
  }


  public void setCurrentRevisions(Map<String, String> currentRevisions) {
    this.currentRevisions = currentRevisions;
  }


  public V1alpha1InstanceSetStatus initReplicas(Integer initReplicas) {
    
    this.initReplicas = initReplicas;
    return this;
  }

   /**
   * Defines the initial number of instances when the cluster is first initialized. This value is set to spec.Replicas at the time of object creation and remains constant thereafter. Used only when spec.roles set.
   * @return initReplicas
  **/
  @jakarta.annotation.Nullable
  public Integer getInitReplicas() {
    return initReplicas;
  }


  public void setInitReplicas(Integer initReplicas) {
    this.initReplicas = initReplicas;
  }


  public V1alpha1InstanceSetStatus membersStatus(List<V1alpha1InstanceSetStatusMembersStatusInner> membersStatus) {
    
    this.membersStatus = membersStatus;
    return this;
  }

  public V1alpha1InstanceSetStatus addMembersStatusItem(V1alpha1InstanceSetStatusMembersStatusInner membersStatusItem) {
    if (this.membersStatus == null) {
      this.membersStatus = new ArrayList<>();
    }
    this.membersStatus.add(membersStatusItem);
    return this;
  }

   /**
   * Provides the status of each member in the cluster.
   * @return membersStatus
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetStatusMembersStatusInner> getMembersStatus() {
    return membersStatus;
  }


  public void setMembersStatus(List<V1alpha1InstanceSetStatusMembersStatusInner> membersStatus) {
    this.membersStatus = membersStatus;
  }


  public V1alpha1InstanceSetStatus observedGeneration(Long observedGeneration) {
    
    this.observedGeneration = observedGeneration;
    return this;
  }

   /**
   * observedGeneration is the most recent generation observed for this InstanceSet. It corresponds to the InstanceSet&#39;s generation, which is updated on mutation by the API Server.
   * @return observedGeneration
  **/
  @jakarta.annotation.Nullable
  public Long getObservedGeneration() {
    return observedGeneration;
  }


  public void setObservedGeneration(Long observedGeneration) {
    this.observedGeneration = observedGeneration;
  }


  public V1alpha1InstanceSetStatus readyInitReplicas(Integer readyInitReplicas) {
    
    this.readyInitReplicas = readyInitReplicas;
    return this;
  }

   /**
   * Represents the number of instances that have already reached the MembersStatus during the cluster initialization stage. This value remains constant once it equals InitReplicas. Used only when spec.roles set.
   * @return readyInitReplicas
  **/
  @jakarta.annotation.Nullable
  public Integer getReadyInitReplicas() {
    return readyInitReplicas;
  }


  public void setReadyInitReplicas(Integer readyInitReplicas) {
    this.readyInitReplicas = readyInitReplicas;
  }


  public V1alpha1InstanceSetStatus readyReplicas(Integer readyReplicas) {
    
    this.readyReplicas = readyReplicas;
    return this;
  }

   /**
   * readyReplicas is the number of instances created for this InstanceSet with a Ready Condition.
   * @return readyReplicas
  **/
  @jakarta.annotation.Nullable
  public Integer getReadyReplicas() {
    return readyReplicas;
  }


  public void setReadyReplicas(Integer readyReplicas) {
    this.readyReplicas = readyReplicas;
  }


  public V1alpha1InstanceSetStatus readyWithoutPrimary(Boolean readyWithoutPrimary) {
    
    this.readyWithoutPrimary = readyWithoutPrimary;
    return this;
  }

   /**
   * Indicates whether it is required for the InstanceSet to have at least one primary instance ready.
   * @return readyWithoutPrimary
  **/
  @jakarta.annotation.Nullable
  public Boolean getReadyWithoutPrimary() {
    return readyWithoutPrimary;
  }


  public void setReadyWithoutPrimary(Boolean readyWithoutPrimary) {
    this.readyWithoutPrimary = readyWithoutPrimary;
  }


  public V1alpha1InstanceSetStatus replicas(Integer replicas) {
    
    this.replicas = replicas;
    return this;
  }

   /**
   * replicas is the number of instances created by the InstanceSet controller.
   * @return replicas
  **/
  @jakarta.annotation.Nonnull
  public Integer getReplicas() {
    return replicas;
  }


  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }


  public V1alpha1InstanceSetStatus templatesStatus(List<V1alpha1InstanceSetStatusTemplatesStatusInner> templatesStatus) {
    
    this.templatesStatus = templatesStatus;
    return this;
  }

  public V1alpha1InstanceSetStatus addTemplatesStatusItem(V1alpha1InstanceSetStatusTemplatesStatusInner templatesStatusItem) {
    if (this.templatesStatus == null) {
      this.templatesStatus = new ArrayList<>();
    }
    this.templatesStatus.add(templatesStatusItem);
    return this;
  }

   /**
   * TemplatesStatus represents status of each instance generated by InstanceTemplates
   * @return templatesStatus
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetStatusTemplatesStatusInner> getTemplatesStatus() {
    return templatesStatus;
  }


  public void setTemplatesStatus(List<V1alpha1InstanceSetStatusTemplatesStatusInner> templatesStatus) {
    this.templatesStatus = templatesStatus;
  }


  public V1alpha1InstanceSetStatus updateRevision(String updateRevision) {
    
    this.updateRevision = updateRevision;
    return this;
  }

   /**
   * updateRevision, if not empty, indicates the version of the InstanceSet used to generate instances in the sequence [replicas-updatedReplicas,replicas)
   * @return updateRevision
  **/
  @jakarta.annotation.Nullable
  public String getUpdateRevision() {
    return updateRevision;
  }


  public void setUpdateRevision(String updateRevision) {
    this.updateRevision = updateRevision;
  }


  public V1alpha1InstanceSetStatus updateRevisions(Map<String, String> updateRevisions) {
    
    this.updateRevisions = updateRevisions;
    return this;
  }

  public V1alpha1InstanceSetStatus putUpdateRevisionsItem(String key, String updateRevisionsItem) {
    if (this.updateRevisions == null) {
      this.updateRevisions = new HashMap<>();
    }
    this.updateRevisions.put(key, updateRevisionsItem);
    return this;
  }

   /**
   * updateRevisions, if not empty, indicates the new version of the InstanceSet used to generate the underlying workload. key is the pod name, value is the revision.
   * @return updateRevisions
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getUpdateRevisions() {
    return updateRevisions;
  }


  public void setUpdateRevisions(Map<String, String> updateRevisions) {
    this.updateRevisions = updateRevisions;
  }


  public V1alpha1InstanceSetStatus updatedReplicas(Integer updatedReplicas) {
    
    this.updatedReplicas = updatedReplicas;
    return this;
  }

   /**
   * updatedReplicas is the number of instances created by the InstanceSet controller from the InstanceSet version indicated by UpdateRevisions.
   * @return updatedReplicas
  **/
  @jakarta.annotation.Nullable
  public Integer getUpdatedReplicas() {
    return updatedReplicas;
  }


  public void setUpdatedReplicas(Integer updatedReplicas) {
    this.updatedReplicas = updatedReplicas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1InstanceSetStatus v1alpha1InstanceSetStatus = (V1alpha1InstanceSetStatus) o;
    return Objects.equals(this.availableReplicas, v1alpha1InstanceSetStatus.availableReplicas) &&
        Objects.equals(this.conditions, v1alpha1InstanceSetStatus.conditions) &&
        Objects.equals(this.currentReplicas, v1alpha1InstanceSetStatus.currentReplicas) &&
        Objects.equals(this.currentRevision, v1alpha1InstanceSetStatus.currentRevision) &&
        Objects.equals(this.currentRevisions, v1alpha1InstanceSetStatus.currentRevisions) &&
        Objects.equals(this.initReplicas, v1alpha1InstanceSetStatus.initReplicas) &&
        Objects.equals(this.membersStatus, v1alpha1InstanceSetStatus.membersStatus) &&
        Objects.equals(this.observedGeneration, v1alpha1InstanceSetStatus.observedGeneration) &&
        Objects.equals(this.readyInitReplicas, v1alpha1InstanceSetStatus.readyInitReplicas) &&
        Objects.equals(this.readyReplicas, v1alpha1InstanceSetStatus.readyReplicas) &&
        Objects.equals(this.readyWithoutPrimary, v1alpha1InstanceSetStatus.readyWithoutPrimary) &&
        Objects.equals(this.replicas, v1alpha1InstanceSetStatus.replicas) &&
        Objects.equals(this.templatesStatus, v1alpha1InstanceSetStatus.templatesStatus) &&
        Objects.equals(this.updateRevision, v1alpha1InstanceSetStatus.updateRevision) &&
        Objects.equals(this.updateRevisions, v1alpha1InstanceSetStatus.updateRevisions) &&
        Objects.equals(this.updatedReplicas, v1alpha1InstanceSetStatus.updatedReplicas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableReplicas, conditions, currentReplicas, currentRevision, currentRevisions, initReplicas, membersStatus, observedGeneration, readyInitReplicas, readyReplicas, readyWithoutPrimary, replicas, templatesStatus, updateRevision, updateRevisions, updatedReplicas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1InstanceSetStatus {\n");
    sb.append("    availableReplicas: ").append(toIndentedString(availableReplicas)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    currentReplicas: ").append(toIndentedString(currentReplicas)).append("\n");
    sb.append("    currentRevision: ").append(toIndentedString(currentRevision)).append("\n");
    sb.append("    currentRevisions: ").append(toIndentedString(currentRevisions)).append("\n");
    sb.append("    initReplicas: ").append(toIndentedString(initReplicas)).append("\n");
    sb.append("    membersStatus: ").append(toIndentedString(membersStatus)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    readyInitReplicas: ").append(toIndentedString(readyInitReplicas)).append("\n");
    sb.append("    readyReplicas: ").append(toIndentedString(readyReplicas)).append("\n");
    sb.append("    readyWithoutPrimary: ").append(toIndentedString(readyWithoutPrimary)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    templatesStatus: ").append(toIndentedString(templatesStatus)).append("\n");
    sb.append("    updateRevision: ").append(toIndentedString(updateRevision)).append("\n");
    sb.append("    updateRevisions: ").append(toIndentedString(updateRevisions)).append("\n");
    sb.append("    updatedReplicas: ").append(toIndentedString(updatedReplicas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableReplicas");
    openapiFields.add("conditions");
    openapiFields.add("currentReplicas");
    openapiFields.add("currentRevision");
    openapiFields.add("currentRevisions");
    openapiFields.add("initReplicas");
    openapiFields.add("membersStatus");
    openapiFields.add("observedGeneration");
    openapiFields.add("readyInitReplicas");
    openapiFields.add("readyReplicas");
    openapiFields.add("readyWithoutPrimary");
    openapiFields.add("replicas");
    openapiFields.add("templatesStatus");
    openapiFields.add("updateRevision");
    openapiFields.add("updateRevisions");
    openapiFields.add("updatedReplicas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("replicas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1InstanceSetStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1InstanceSetStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1InstanceSetStatus is not found in the empty JSON string", V1alpha1InstanceSetStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1InstanceSetStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1InstanceSetStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1InstanceSetStatus.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            V1alpha1InstanceSetStatusConditionsInner.validateJsonObject(jsonArrayconditions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("currentRevision") != null && !jsonObj.get("currentRevision").isJsonNull()) && !jsonObj.get("currentRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentRevision").toString()));
      }
      if (jsonObj.get("membersStatus") != null && !jsonObj.get("membersStatus").isJsonNull()) {
        JsonArray jsonArraymembersStatus = jsonObj.getAsJsonArray("membersStatus");
        if (jsonArraymembersStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("membersStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `membersStatus` to be an array in the JSON string but got `%s`", jsonObj.get("membersStatus").toString()));
          }

          // validate the optional field `membersStatus` (array)
          for (int i = 0; i < jsonArraymembersStatus.size(); i++) {
            V1alpha1InstanceSetStatusMembersStatusInner.validateJsonObject(jsonArraymembersStatus.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("templatesStatus") != null && !jsonObj.get("templatesStatus").isJsonNull()) {
        JsonArray jsonArraytemplatesStatus = jsonObj.getAsJsonArray("templatesStatus");
        if (jsonArraytemplatesStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("templatesStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `templatesStatus` to be an array in the JSON string but got `%s`", jsonObj.get("templatesStatus").toString()));
          }

          // validate the optional field `templatesStatus` (array)
          for (int i = 0; i < jsonArraytemplatesStatus.size(); i++) {
            V1alpha1InstanceSetStatusTemplatesStatusInner.validateJsonObject(jsonArraytemplatesStatus.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("updateRevision") != null && !jsonObj.get("updateRevision").isJsonNull()) && !jsonObj.get("updateRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateRevision").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1InstanceSetStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1InstanceSetStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1InstanceSetStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1InstanceSetStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1InstanceSetStatus>() {
           @Override
           public void write(JsonWriter out, V1alpha1InstanceSetStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1InstanceSetStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1InstanceSetStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1InstanceSetStatus
  * @throws IOException if the JSON string is invalid with respect to V1alpha1InstanceSetStatus
  */
  public static V1alpha1InstanceSetStatus fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1InstanceSetStatus.class);
  }

 /**
  * Convert an instance of V1alpha1InstanceSetStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

