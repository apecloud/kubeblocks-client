/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.25.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubeblocks.workloads.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecInstancesInnerEnvInner;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecInstancesInnerOrdinals;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecInstancesInnerResources;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecInstancesInnerSchedulingPolicy;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecInstancesInnerVolumeClaimTemplatesInner;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecInstancesInnerVolumeMountsInner;
import io.kubeblocks.workloads.models.V1alpha1InstanceSetSpecInstancesInnerVolumesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * InstanceTemplate allows customization of individual replica configurations within a Component, without altering the base component template defined in ClusterComponentSpec. It enables the application of distinct settings to specific instances (replicas), providing flexibility while maintaining a common configuration baseline.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-05T14:03:17.809844Z[Etc/UTC]")
public class V1alpha1InstanceSetSpecInstancesInner {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<V1alpha1InstanceSetSpecInstancesInnerEnvInner> env;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDINALS = "ordinals";
  @SerializedName(SERIALIZED_NAME_ORDINALS)
  private V1alpha1InstanceSetSpecInstancesInnerOrdinals ordinals;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private Integer replicas;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private V1alpha1InstanceSetSpecInstancesInnerResources resources;

  public static final String SERIALIZED_NAME_SCHEDULING_POLICY = "schedulingPolicy";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_POLICY)
  private V1alpha1InstanceSetSpecInstancesInnerSchedulingPolicy schedulingPolicy;

  public static final String SERIALIZED_NAME_VOLUME_CLAIM_TEMPLATES = "volumeClaimTemplates";
  @SerializedName(SERIALIZED_NAME_VOLUME_CLAIM_TEMPLATES)
  private List<V1alpha1InstanceSetSpecInstancesInnerVolumeClaimTemplatesInner> volumeClaimTemplates;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private List<V1alpha1InstanceSetSpecInstancesInnerVolumeMountsInner> volumeMounts;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<V1alpha1InstanceSetSpecInstancesInnerVolumesInner> volumes;

  public V1alpha1InstanceSetSpecInstancesInner() {
  }

  public V1alpha1InstanceSetSpecInstancesInner annotations(Map<String, String> annotations) {
    
    this.annotations = annotations;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInner putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Specifies a map of key-value pairs to be merged into the Pod&#39;s existing annotations. Existing keys will have their values overwritten, while new keys will be added to the annotations.
   * @return annotations
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }


  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public V1alpha1InstanceSetSpecInstancesInner env(List<V1alpha1InstanceSetSpecInstancesInnerEnvInner> env) {
    
    this.env = env;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInner addEnvItem(V1alpha1InstanceSetSpecInstancesInnerEnvInner envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Defines Env to override. Add new or override existing envs.
   * @return env
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetSpecInstancesInnerEnvInner> getEnv() {
    return env;
  }


  public void setEnv(List<V1alpha1InstanceSetSpecInstancesInnerEnvInner> env) {
    this.env = env;
  }


  public V1alpha1InstanceSetSpecInstancesInner image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Specifies an override for the first container&#39;s image in the pod.
   * @return image
  **/
  @jakarta.annotation.Nullable
  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public V1alpha1InstanceSetSpecInstancesInner labels(Map<String, String> labels) {
    
    this.labels = labels;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInner putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Specifies a map of key-value pairs that will be merged into the Pod&#39;s existing labels. Values for existing keys will be overwritten, and new keys will be added.
   * @return labels
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public V1alpha1InstanceSetSpecInstancesInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name specifies the unique name of the instance Pod created using this InstanceTemplate. This name is constructed by concatenating the component&#39;s name, the template&#39;s name, and the instance&#39;s ordinal using the pattern: $(cluster.name)-$(component.name)-$(template.name)-$(ordinal). Ordinals start from 0. The specified name overrides any default naming conventions or patterns.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1InstanceSetSpecInstancesInner ordinals(V1alpha1InstanceSetSpecInstancesInnerOrdinals ordinals) {
    
    this.ordinals = ordinals;
    return this;
  }

   /**
   * Get ordinals
   * @return ordinals
  **/
  @jakarta.annotation.Nullable
  public V1alpha1InstanceSetSpecInstancesInnerOrdinals getOrdinals() {
    return ordinals;
  }


  public void setOrdinals(V1alpha1InstanceSetSpecInstancesInnerOrdinals ordinals) {
    this.ordinals = ordinals;
  }


  public V1alpha1InstanceSetSpecInstancesInner replicas(Integer replicas) {
    
    this.replicas = replicas;
    return this;
  }

   /**
   * Specifies the number of instances (Pods) to create from this InstanceTemplate. This field allows setting how many replicated instances of the component, with the specific overrides in the InstanceTemplate, are created. The default value is 1. A value of 0 disables instance creation.
   * minimum: 0
   * @return replicas
  **/
  @jakarta.annotation.Nullable
  public Integer getReplicas() {
    return replicas;
  }


  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }


  public V1alpha1InstanceSetSpecInstancesInner resources(V1alpha1InstanceSetSpecInstancesInnerResources resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @jakarta.annotation.Nullable
  public V1alpha1InstanceSetSpecInstancesInnerResources getResources() {
    return resources;
  }


  public void setResources(V1alpha1InstanceSetSpecInstancesInnerResources resources) {
    this.resources = resources;
  }


  public V1alpha1InstanceSetSpecInstancesInner schedulingPolicy(V1alpha1InstanceSetSpecInstancesInnerSchedulingPolicy schedulingPolicy) {
    
    this.schedulingPolicy = schedulingPolicy;
    return this;
  }

   /**
   * Get schedulingPolicy
   * @return schedulingPolicy
  **/
  @jakarta.annotation.Nullable
  public V1alpha1InstanceSetSpecInstancesInnerSchedulingPolicy getSchedulingPolicy() {
    return schedulingPolicy;
  }


  public void setSchedulingPolicy(V1alpha1InstanceSetSpecInstancesInnerSchedulingPolicy schedulingPolicy) {
    this.schedulingPolicy = schedulingPolicy;
  }


  public V1alpha1InstanceSetSpecInstancesInner volumeClaimTemplates(List<V1alpha1InstanceSetSpecInstancesInnerVolumeClaimTemplatesInner> volumeClaimTemplates) {
    
    this.volumeClaimTemplates = volumeClaimTemplates;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInner addVolumeClaimTemplatesItem(V1alpha1InstanceSetSpecInstancesInnerVolumeClaimTemplatesInner volumeClaimTemplatesItem) {
    if (this.volumeClaimTemplates == null) {
      this.volumeClaimTemplates = new ArrayList<>();
    }
    this.volumeClaimTemplates.add(volumeClaimTemplatesItem);
    return this;
  }

   /**
   * Defines VolumeClaimTemplates to override. Add new or override existing volume claim templates.
   * @return volumeClaimTemplates
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetSpecInstancesInnerVolumeClaimTemplatesInner> getVolumeClaimTemplates() {
    return volumeClaimTemplates;
  }


  public void setVolumeClaimTemplates(List<V1alpha1InstanceSetSpecInstancesInnerVolumeClaimTemplatesInner> volumeClaimTemplates) {
    this.volumeClaimTemplates = volumeClaimTemplates;
  }


  public V1alpha1InstanceSetSpecInstancesInner volumeMounts(List<V1alpha1InstanceSetSpecInstancesInnerVolumeMountsInner> volumeMounts) {
    
    this.volumeMounts = volumeMounts;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInner addVolumeMountsItem(V1alpha1InstanceSetSpecInstancesInnerVolumeMountsInner volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

   /**
   * Defines VolumeMounts to override. Add new or override existing volume mounts of the first container in the pod.
   * @return volumeMounts
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetSpecInstancesInnerVolumeMountsInner> getVolumeMounts() {
    return volumeMounts;
  }


  public void setVolumeMounts(List<V1alpha1InstanceSetSpecInstancesInnerVolumeMountsInner> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }


  public V1alpha1InstanceSetSpecInstancesInner volumes(List<V1alpha1InstanceSetSpecInstancesInnerVolumesInner> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public V1alpha1InstanceSetSpecInstancesInner addVolumesItem(V1alpha1InstanceSetSpecInstancesInnerVolumesInner volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Defines Volumes to override. Add new or override existing volumes.
   * @return volumes
  **/
  @jakarta.annotation.Nullable
  public List<V1alpha1InstanceSetSpecInstancesInnerVolumesInner> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<V1alpha1InstanceSetSpecInstancesInnerVolumesInner> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1InstanceSetSpecInstancesInner v1alpha1InstanceSetSpecInstancesInner = (V1alpha1InstanceSetSpecInstancesInner) o;
    return Objects.equals(this.annotations, v1alpha1InstanceSetSpecInstancesInner.annotations) &&
        Objects.equals(this.env, v1alpha1InstanceSetSpecInstancesInner.env) &&
        Objects.equals(this.image, v1alpha1InstanceSetSpecInstancesInner.image) &&
        Objects.equals(this.labels, v1alpha1InstanceSetSpecInstancesInner.labels) &&
        Objects.equals(this.name, v1alpha1InstanceSetSpecInstancesInner.name) &&
        Objects.equals(this.ordinals, v1alpha1InstanceSetSpecInstancesInner.ordinals) &&
        Objects.equals(this.replicas, v1alpha1InstanceSetSpecInstancesInner.replicas) &&
        Objects.equals(this.resources, v1alpha1InstanceSetSpecInstancesInner.resources) &&
        Objects.equals(this.schedulingPolicy, v1alpha1InstanceSetSpecInstancesInner.schedulingPolicy) &&
        Objects.equals(this.volumeClaimTemplates, v1alpha1InstanceSetSpecInstancesInner.volumeClaimTemplates) &&
        Objects.equals(this.volumeMounts, v1alpha1InstanceSetSpecInstancesInner.volumeMounts) &&
        Objects.equals(this.volumes, v1alpha1InstanceSetSpecInstancesInner.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, env, image, labels, name, ordinals, replicas, resources, schedulingPolicy, volumeClaimTemplates, volumeMounts, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1InstanceSetSpecInstancesInner {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ordinals: ").append(toIndentedString(ordinals)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    schedulingPolicy: ").append(toIndentedString(schedulingPolicy)).append("\n");
    sb.append("    volumeClaimTemplates: ").append(toIndentedString(volumeClaimTemplates)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("env");
    openapiFields.add("image");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("ordinals");
    openapiFields.add("replicas");
    openapiFields.add("resources");
    openapiFields.add("schedulingPolicy");
    openapiFields.add("volumeClaimTemplates");
    openapiFields.add("volumeMounts");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1alpha1InstanceSetSpecInstancesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1alpha1InstanceSetSpecInstancesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1alpha1InstanceSetSpecInstancesInner is not found in the empty JSON string", V1alpha1InstanceSetSpecInstancesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1alpha1InstanceSetSpecInstancesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1alpha1InstanceSetSpecInstancesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1alpha1InstanceSetSpecInstancesInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            V1alpha1InstanceSetSpecInstancesInnerEnvInner.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `ordinals`
      if (jsonObj.get("ordinals") != null && !jsonObj.get("ordinals").isJsonNull()) {
        V1alpha1InstanceSetSpecInstancesInnerOrdinals.validateJsonObject(jsonObj.getAsJsonObject("ordinals"));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        V1alpha1InstanceSetSpecInstancesInnerResources.validateJsonObject(jsonObj.getAsJsonObject("resources"));
      }
      // validate the optional field `schedulingPolicy`
      if (jsonObj.get("schedulingPolicy") != null && !jsonObj.get("schedulingPolicy").isJsonNull()) {
        V1alpha1InstanceSetSpecInstancesInnerSchedulingPolicy.validateJsonObject(jsonObj.getAsJsonObject("schedulingPolicy"));
      }
      if (jsonObj.get("volumeClaimTemplates") != null && !jsonObj.get("volumeClaimTemplates").isJsonNull()) {
        JsonArray jsonArrayvolumeClaimTemplates = jsonObj.getAsJsonArray("volumeClaimTemplates");
        if (jsonArrayvolumeClaimTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeClaimTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeClaimTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("volumeClaimTemplates").toString()));
          }

          // validate the optional field `volumeClaimTemplates` (array)
          for (int i = 0; i < jsonArrayvolumeClaimTemplates.size(); i++) {
            V1alpha1InstanceSetSpecInstancesInnerVolumeClaimTemplatesInner.validateJsonObject(jsonArrayvolumeClaimTemplates.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("volumeMounts") != null && !jsonObj.get("volumeMounts").isJsonNull()) {
        JsonArray jsonArrayvolumeMounts = jsonObj.getAsJsonArray("volumeMounts");
        if (jsonArrayvolumeMounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeMounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeMounts` to be an array in the JSON string but got `%s`", jsonObj.get("volumeMounts").toString()));
          }

          // validate the optional field `volumeMounts` (array)
          for (int i = 0; i < jsonArrayvolumeMounts.size(); i++) {
            V1alpha1InstanceSetSpecInstancesInnerVolumeMountsInner.validateJsonObject(jsonArrayvolumeMounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            V1alpha1InstanceSetSpecInstancesInnerVolumesInner.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1alpha1InstanceSetSpecInstancesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1alpha1InstanceSetSpecInstancesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1alpha1InstanceSetSpecInstancesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1alpha1InstanceSetSpecInstancesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1alpha1InstanceSetSpecInstancesInner>() {
           @Override
           public void write(JsonWriter out, V1alpha1InstanceSetSpecInstancesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1alpha1InstanceSetSpecInstancesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1alpha1InstanceSetSpecInstancesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1alpha1InstanceSetSpecInstancesInner
  * @throws IOException if the JSON string is invalid with respect to V1alpha1InstanceSetSpecInstancesInner
  */
  public static V1alpha1InstanceSetSpecInstancesInner fromJson(String jsonString) throws IOException {
    return new JSON().getGson().fromJson(jsonString, V1alpha1InstanceSetSpecInstancesInner.class);
  }

 /**
  * Convert an instance of V1alpha1InstanceSetSpecInstancesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return new JSON().getGson().toJson(this);
  }
}

